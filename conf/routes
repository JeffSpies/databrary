# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Static content
GET 	/ 									controllers.Static.index
GET 	/about 								controllers.Static.about
GET 	/about/policies 					controllers.Static.policies
GET 	/about/faq 							controllers.Static.faq
GET 	/about/board 						controllers.Static.board
GET 	/about/team 						controllers.Static.team
GET 	/about/contributors 				controllers.Static.contributors
GET 	/about/jobs 						controllers.Static.jobs
GET 	/about/contact 						controllers.Static.contact

# Users
GET 	/login 								controllers.Login.view
POST	/Login 								controllers.Login.post
GET 	/OpenID 							controllers.Login.openID(username = "")
GET 	/OpenID/:username 					controllers.Login.openID(username : String)
# TODO: should be POST:
GET 	/Logout 							controllers.Login.logout

# Entities
GET 	/party/:id 							controllers.Party.view(id : models.Party.Id)
GET 	/party/:id/edit 					controllers.Party.edit(id : models.Party.Id)
POST 	/party/:id/Edit 					controllers.Party.change(id : models.Party.Id)
GET 	/party/:id/admin 					controllers.Party.admin(id : models.Party.Id)
GET 	/party/:id/Authorize/search/child 	controllers.Party.authorizeSearch(id : models.Party.Id, which : Boolean = false)
GET 	/party/:id/Authorize/search/parent 	controllers.Party.authorizeSearch(id : models.Party.Id, which : Boolean = true)
POST 	/party/:id/Authorize/:child 		controllers.Party.authorizeChange(id : models.Party.Id, child : models.Party.Id)
POST 	/party/:id/Authorize/:other/child 	controllers.Party.authorizeAdd(id : models.Party.Id, which : Boolean = false, other : models.Party.Id)
POST 	/party/:id/Authorize/:other/parent 	controllers.Party.authorizeAdd(id : models.Party.Id, which : Boolean = true, other : models.Party.Id)
# TODO: should be POST but currently used as link:
GET 	/party/:id/Authorize/:child/delete 	controllers.Party.authorizeDelete(id : models.Party.Id, child : models.Party.Id)

GET 	/study/:id 							controllers.Study.view(id : models.Study.Id)
GET 	/study/:id/edit 					controllers.Study.edit(id : models.Study.Id)
POST 	/study/:id/Edit 					controllers.Study.change(id : models.Study.Id)
GET 	/study/:id/access 					controllers.Study.admin(id : models.Study.Id)
GET 	/study/:id/Access/search 			controllers.Study.accessSearch(id : models.Study.Id)
POST 	/study/:id/Access/:party/add 		controllers.Study.accessAdd(id : models.Study.Id, party : models.Party.Id)
# TODO: should be POST:
GET 	/study/:id/Access/:party/delete 	controllers.Study.accessDelete(id : models.Study.Id, party : models.Party.Id)
POST 	/study/:id/Access/:party 			controllers.Study.accessChange(id : models.Study.Id, party : models.Party.Id)
POST 	/study/Create 						controllers.Study.create(owner : Option[models.Party.Id] ?= None)
GET 	/studies 							controllers.Study.listAll

GET 	/study/:id/slot 					controllers.Slot.create(id : models.Study.Id)
POST 	/study/:id/Slot 					controllers.Slot.add(id : models.Study.Id)
GET 	/slot/:id 							controllers.Slot.view(id : models.Slot.Id)
GET 	/slot/:id/edit 						controllers.Slot.edit(id : models.Slot.Id)
POST 	/slot/:id/Edit 						controllers.Slot.change(id : models.Slot.Id)

GET		/asset/:id/create					controllers.Asset.create(id : models.Container.Id)
POST	/asset/:id/Upload					controllers.Asset.upload(id : models.Container.Id)
GET		/asset/:id/:obj						controllers.Asset.view(id : models.Container.Id, obj : models.Asset.Id)
GET		/asset/:id/:obj/download			controllers.Asset.download(id : models.Container.Id, obj : models.Asset.Id, inline : Boolean = false)
GET		/asset/:id/:obj/inline				controllers.Asset.download(id : models.Container.Id, obj : models.Asset.Id, inline : Boolean = true)
GET		/asset/:id/:obj/head				controllers.Asset.head(id : models.Container.Id, obj : models.Asset.Id)
GET		/asset/:id/:obj/frame/:offset		controllers.Asset.frame(id : models.Container.Id, obj : models.Asset.Id, offset : dbrary.Offset)
GET		/asset/:id/:obj/edit				controllers.Asset.edit(id : models.Container.Id, obj : models.Asset.Id)
POST	/asset/:id/:obj/Edit				controllers.Asset.change(id : models.Container.Id, obj : models.Asset.Id)

POST 	/study/:id/Comment 					controllers.Comment.postStudy(id : models.Study.Id)
POST 	/slot/:id/Comment 					controllers.Comment.postSlot(id : models.Slot.Id)
POST 	/asset/:id/:obj/Comment 			controllers.Comment.postAssetLink(id : models.Container.Id, obj : models.Asset.Id)

GET	/record/:id					controllers.Record.view(id : models.Record.Id)
GET	/record/:id/edit				controllers.Record.edit(id : models.Record.Id)
POST	/record/:id/Edit				controllers.Record.update(id : models.Record.Id)

# Map static resources from the /public folder to the /assets URL path
GET 	/assets/*file 						controllers.Assets.at(path="/public", file)

# ajax
GET		/ajax/modal/login					controllers.Login.ajaxView
GET		/ajax/modal/profile					controllers.Party.ajaxView

# test
GET 	/test 								controllers.Site.test

# redirect trailing slash
GET 	/*path/ 							controllers.Site.untrail(path: String)
