# Routes
# This file defines all application routes (Higher priority routes first)
# vi:et
# ~~~~

# Static content
GET         /                                                                                         controllers.Static.index
GET         /about/team                                                                               controllers.Static.team
GET         /about                                                                                    controllers.Static.page(page = "about")
GET         /about/$page<[a-z]+>                                                                      controllers.Static.page(page : String)

# users
GET         /login                                                                                    controllers.Login.view
POST        /login                                                                                    controllers.Login.post
GET         /OpenID                                                                                   controllers.Login.openID(email = "")
GET         /OpenID/$email<.+\@.+\..+>                                                                controllers.Login.openID(email : String)
# TODO: should be POST:
GET         /logout                                                                                   controllers.Login.logout
GET         /superuser/on                                                                             controllers.Login.superuserOn
GET         /superuser/off                                                                            controllers.Login.superuserOff
GET         /token/password                                                                           controllers.Token.getPassword
POST        /token/password                                                                           controllers.Token.issuePassword
GET         /token/:token                                                                             controllers.Token.token(token : String)

# parties
GET         /party/$pID<-?[0-9]+>                                                                     controllers.Party.view(pID : models.Party.Id)
GET         /party/$pID<[0-9]+>/edit                                                                  controllers.Party.edit(pID : models.Party.Id)
POST        /party/$pID<[0-9]+>/edit                                                                  controllers.Party.change(pID : models.Party.Id)
POST        /party/$pID<[0-9]+>/token                                                                 controllers.Token.password(pID : models.Account.Id)
GET         /party/$pID<[0-9]+>/authorize                                                             controllers.Party.admin(pID : models.Party.Id)
GET         /party/$pID<[0-9]+>/authorize/search/child                                                controllers.Party.authorizeSearch(pID : models.Party.Id, which : Boolean = false)
GET         /party/$pID<[0-9]+>/authorize/search/parent                                               controllers.Party.authorizeSearch(pID : models.Party.Id, which : Boolean = true)
POST        /party/$pID<[0-9]+>/authorize/$child<-?[0-9]+>                                            controllers.Party.authorizeChange(pID : models.Party.Id, child : models.Party.Id)
POST        /party/$pID<[0-9]+>/authorize/$parent<-?[0-9]+>/apply                                     controllers.Party.authorizeApply(pID : models.Party.Id, parent : models.Party.Id)
# TODO: should be POST but currently used as link:
GET         /party/$pID<[0-9]+>/authorize/$child<-?[0-9]+>/remove                                     controllers.Party.authorizeDelete(pID : models.Party.Id, child : models.Party.Id)

# volumes
GET         /search                                                                                   controllers.Volume.search
GET         /volume/create                                                                            controllers.Volume.create(owner : Option[models.Party.Id] ?= None)
POST        /volume/create/$pID<[0-9]+>                                                               controllers.Volume.add(pID : models.Party.Id)
GET         /volume/$vID<[0-9]+>                                                                      controllers.Volume.view(vID : models.Volume.Id)
GET         /volume/$vID<[0-9]+>/edit                                                                 controllers.Volume.edit(vID : models.Volume.Id)
POST        /volume/$vID<[0-9]+>/edit                                                                 controllers.Volume.change(vID : models.Volume.Id)
GET         /volume/$vID<[0-9]+>/access                                                               controllers.Volume.admin(vID : models.Volume.Id)
GET         /volume/$vID<[0-9]+>/access/search                                                        controllers.Volume.accessSearch(vID : models.Volume.Id)
# TODO: should be POST:
GET         /volume/$vID<[0-9]+>/access/$pID<-?[0-9]+>/remove                                         controllers.Volume.accessDelete(vID : models.Volume.Id, pID : models.Party.Id)
POST        /volume/$vID<[0-9]+>/access/$pID<-?[0-9]+>                                                controllers.Volume.accessChange(vID : models.Volume.Id, pID : models.Party.Id)
GET         /volume/$vID<[0-9]+>/thumb                                                                controllers.Volume.thumb(vID : models.Volume.Id)

# slots
POST        /volume/$vID<[0-9]+>/slot/container                                                       controllers.Slot.addContainer(vID : models.Volume.Id)
GET         /volume/$vID<[0-9]+>/slot/container                                                       controllers.Slot.createContainer(vID : models.Volume.Id)

GET         /volume/$vID<[0-9]+>/slot/$cID<[0-9]+>/slot/create                                        controllers.Slot.create(vID : models.Volume.Id, cID : models.Slot.Id)
POST        /volume/$vID<[0-9]+>/slot/$cID<[0-9]+>/slot/create                                        controllers.Slot.add(vID : models.Volume.Id, cID : models.Slot.Id)

GET         /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>                                                    controllers.Slot.view(vID : models.Volume.Id, sID : models.Slot.Id)
GET         /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/edit                                               controllers.Slot.edit(vID : models.Volume.Id, sID : models.Slot.Id)
POST        /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/edit                                               controllers.Slot.change(vID : models.Volume.Id, sID : models.Slot.Id)
GET         /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/thumb                                              controllers.Slot.thumb(vID : models.Volume.Id, sID : models.Slot.Id)

# assets
GET         /volume/$vID<[0-9]+>/asset/create                                                         controllers.Asset.createTop(vID : models.Volume.Id)
GET         /volume/$vID<[0-9]+>/slot/$cID<[0-9]+>/asset/create                                       controllers.Asset.create(vID : models.Volume.Id, cID : models.Slot.Id)
POST        /volume/$vID<[0-9]+>/slot/$cID<[0-9]+>/asset/create                                       controllers.Asset.upload(vID : models.Volume.Id, cID : models.Slot.Id)
GET         /volume/$vID<[0-9]+>/asset/$aID<[0-9]+>                                                   controllers.Asset.view(vID : models.Volume.Id, aID : models.Asset.Id)
GET         /volume/$vID<[0-9]+>/asset/$aID<[0-9]+>/edit                                              controllers.Asset.edit(vID : models.Volume.Id, aID : models.Asset.Id)
POST        /volume/$vID<[0-9]+>/asset/$aID<[0-9]+>/edit                                              controllers.Asset.change(vID : models.Volume.Id, aID : models.Asset.Id)
POST        /volume/$vID<[0-9]+>/asset/$aID<[0-9]+>/remove                                            controllers.Asset.remove(vID : models.Volume.Id, aID : models.Asset.Id)

GET         /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/asset/$aID<[0-9]+>                                 controllers.SlotAsset.view(vID : models.Volume.Id, sID : models.Slot.Id, aID : models.Asset.Id)
GET         /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/asset/$aID<[0-9]+>/download                        controllers.SlotAsset.download(vID : models.Volume.Id, sID : models.Slot.Id, aID : models.Asset.Id, inline : Boolean = false)
GET         /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/asset/$aID<[0-9]+>/inline                          controllers.SlotAsset.download(vID : models.Volume.Id, sID : models.Slot.Id, aID : models.Asset.Id, inline : Boolean = true)
GET         /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/asset/$aID<[0-9]+>/head                            controllers.SlotAsset.head(vID : models.Volume.Id, sID : models.Slot.Id, aID : models.Asset.Id)
GET         /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/asset/$aID<[0-9]+>/thumb                           controllers.SlotAsset.thumb(vID : models.Volume.Id, sID : models.Slot.Id, aID : models.Asset.Id)
GET         /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/asset/$aID<[0-9]+>/frame/$offset<[0-9:\.]+>        controllers.SlotAsset.frame(vID : models.Volume.Id, sID : models.Slot.Id, aID : models.Asset.Id, offset : dbrary.Offset)
GET         /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/asset/$aID<[0-9]+>/old/$oID<[0-9]+>/download       controllers.SlotAsset.downloadOlder(vID : models.Volume.Id, sID : models.Slot.Id, aID : models.Asset.Id, oID : models.Asset.Id, inline : Boolean = false)
GET         /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/asset/$aID<[0-9]+>/old/$oID<[0-9]+>/inline         controllers.SlotAsset.downloadOlder(vID : models.Volume.Id, sID : models.Slot.Id, aID : models.Asset.Id, oID : models.Asset.Id, inline : Boolean = true)

# annotations
POST        /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/comment/create                                     controllers.Slot.comment(vID : models.Volume.Id, sID : models.Slot.Id, parent : Option[models.Comment.Id] ?= None)

POST        /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/tag                                                controllers.Slot.tag(vID : models.Volume.Id, sID : models.Slot.Id)

# records
POST        /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/record/$rID<[0-9]+>/remove                         controllers.Record.slotRemove(vID : models.Volume.Id, sID : models.Slot.Id, rID : models.Record.Id, editRedirect : Boolean = false)
POST        /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/record/$rID<[0-9]+>/remove/return                  controllers.Record.slotRemove(vID : models.Volume.Id, sID : models.Slot.Id, rID : models.Record.Id, editRedirect : Boolean = true)
POST        /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/record/$cID<-?[0-9]+>/create                       controllers.Record.slotAdd(vID : models.Volume.Id, sID : models.Slot.Id, cID : models.RecordCategory.Id, editRedirect : Boolean = false)
POST        /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/record/$cID<-?[0-9]+>/create/return                controllers.Record.slotAdd(vID : models.Volume.Id, sID : models.Slot.Id, cID : models.RecordCategory.Id, editRedirect : Boolean = true)

GET         /volume/$vID<[0-9]+>/record/$rID<[0-9]+>                                                  controllers.Record.view(vID : models.Volume.Id, rID : models.Record.Id)
GET         /volume/$vID<[0-9]+>/record/$cID<-?[0-9]+>/create                                         controllers.Record.add(vID : models.Volume.Id, cID : models.RecordCategory.Id)
GET         /volume/$vID<[0-9]+>/record/$rID<[0-9]+>/edit                                             controllers.Record.edit(vID : models.Volume.Id, rID : models.Record.Id)
POST        /volume/$vID<[0-9]+>/record/$rID<[0-9]+>/edit                                             controllers.Record.update(vID : models.Volume.Id, rID : models.Record.Id)

GET         /volume/$vID<[0-9]+>/ingest/csv                                                           controllers.Ingest.csv(vID : models.Volume.Id)
POST        /volume/$vID<[0-9]+>/ingest/curated                                                       controllers.Ingest.curated(vID : models.Volume.Id)

# ===== API ===== #
GET     /api/about/$page<[a-z]+>                                                                  controllers.StaticApi.page(page : String)

# ----- LOGIN ----- #
# GET
GET     /api/user                                                                                 controllers.LoginApi.get

# LOGIN
POST    /api/user/login                                                                           controllers.LoginApi.post
# LOGOUT
POST    /api/user/logout                                                                          controllers.LoginApi.logout
# SUPERUSER ON
POST    /api/user/superuser/on                                                                    controllers.LoginApi.superuserOn
# SUPERUSER OFF
POST    /api/user/superuser/off                                                                   controllers.LoginApi.superuserOff

# ----- PARTY ----- #
# GET       ?volumes;comments;parents[=all];children[=all];funding                                TODO: tags;network
GET     /api/party/$partyId<-?[0-9]+>                                                             controllers.PartyApi.get(partyId : models.Party.Id)
# UPDATE
POST    /api/party/$partyId<-?[0-9]+>                                                             controllers.PartyApi.update(partyId : models.Party.Id)

# ----- PARTY AUTHORIZE ----- #
# QUERY
GET     /api/party/$partyId<-?[0-9]+>/authorize                                                   controllers.PartyApi.authorizeGet(partyId : models.Party.Id)
# SEARCH
GET     /api/party/$partyId<-?[0-9]+>/authorize/:name                                             controllers.PartyApi.authorizeSearch(partyId : models.Party.Id, name : String)
# CHANGE
POST    /api/party/$partyId<-?[0-9]+>/authorize/$childId<[0-9]+>                                  controllers.PartyApi.authorizeChange(partyId : models.Party.Id, childId : models.Party.Id)
# APPLY
POST    /api/party/$partyId<-?[0-9]+>/authorize/$parentId<[0-9]+>/apply                           controllers.PartyApi.authorizeApply(partyId : models.Party.Id, parentId : models.Party.Id)
# DELETE
DELETE  /api/party/$partyId<-?[0-9]+>/authorize/$otherId<[0-9]+>                                  controllers.PartyApi.authorizeDelete(partyId : models.Party.Id, otherId : models.Party.Id)

# ----- VOLUME ----- #
# GET       ?summary;access;citations;tags;comments;funding;categories;records;sessions;assets;top
GET     /api/volume/$volumeId<[0-9]+>                                                             controllers.VolumeApi.get(volumeId : models.Volume.Id)
# CREATE    ?owner=ID
POST    /api/volume                                                                               controllers.VolumeApi.create(owner : models.Party.Id)
# UPDATE
POST    /api/volume/$volumeId<[0-9]+>                                                             controllers.VolumeApi.update(volumeId : models.Volume.Id)

# ----- VOLUME ACCESS ----- #
# QUERY
GET     /api/volume/$volumeId<[0-9]+>/access                                                      controllers.VolumeApi.accessGet(volumeId : models.Volume.Id)
# SEARCH
GET     /api/volume/$volumeId<[0-9]+>/access/:name                                                controllers.VolumeApi.accessSearch(volumeId : models.Volume.Id, name : String)
# CHANGE
POST    /api/volume/$volumeId<[0-9]+>/access/$partyId<-?[0-9]+>                                   controllers.VolumeApi.accessChange(volumeId : models.Volume.Id, partyId : models.Party.Id)
# DELETE
DELETE  /api/volume/$volumeId<[0-9]+>/access/$partyId<-?[0-9]+>                                   controllers.VolumeApi.accessDelete(volumeId : models.Volume.Id, partyId : models.Party.Id)

# ----- SLOT ----- #
# QUERY     ?volume=ID;record=ID;asset=ID
#                                                                                                 TODO: GET     /api/slot
# GET       ?segment=;assets;records;tags;comments
GET     /api/slot/$containerId<[0-9]+>                                                            controllers.SlotApi.get(containerId : models.Container.Id, segment : dbrary.Segment)
# UPDATE    ?segment=
POST    /api/slot/$containerId<[0-9]+>                                                            controllers.SlotApi.update(containerId : models.Container.Id, segment : dbrary.Segment)
# DELETE
#                                                                                                 TODO: DELETE /api/slot/$containerId<[0-9]+>

# ----- RECORD ----- #
# QUERY     ?volume=ID;category=NAME;                                                             TODO: container=ID;asset=ID
GET     /api/record                                                                               controllers.RecordApi.query(volume : models.Volume.Id)
# GET       ?slots;                                                                               TODO: assets
GET     /api/record/$recordId<[0-9]+>                                                             controllers.RecordApi.get(recordId : models.Record.Id)
# CREATE    ?volume=ID;category=NAME
POST    /api/record                                                                               controllers.RecordApi.create(volume : models.Volume.Id, category : Option[String] ?= None)
# UPDATE
POST    /api/record/$recordId<[0-9]+>                                                             controllers.RecordApi.update(recordId : models.Record.Id)
# DELETE
#                                                                                                 TODO: DELETE /api/record/$recordId<[0-9]+>

# ----- ASSET ----- #
# GET       ?slot;revisions
GET     /api/asset/$assetId<[0-9]+>                                                               controllers.AssetApi.get(assetId : models.Asset.Id)
# CREATE
#                                                                                                 TODO: POST    /api/asset
# UPDATE
POST    /api/asset/$assetId<[0-9]+>                                                               controllers.AssetApi.update(assetId : models.Asset.Id)

# ----- SLOT ASSET ----- #
# QUERY     ?volume=ID;slot=ID;record=ID
#                                                                                                 TODO: GET     /api/slot/$containerId<[0-9]+>/asset
# GET       ?segment=
GET     /api/slot/$containerId<[0-9]+>/asset/$assetId<[0-9]+>                                     controllers.SlotAssetApi.get(containerId : models.Container.Id, segment : dbrary.Segment, assetId : models.Asset.Id)

# ----- COMMENT ----- #
# CREATE    ?container=ID;segment=
POST    /api/comment                                                                              controllers.SlotApi.comment(container : models.Container.Id, segment : dbrary.Segment, parent : Option[models.Comment.Id] ?= None)

# ----- TAG ----- #
# GET       ?slots
GET     /api/tag/:name                                                                            controllers.TagApi.get(name : String)
# UPDATE    ?container=ID;segment=
POST    /api/tag/:name                                                                            controllers.TagApi.update(name : String, container : models.Container.Id, segment : dbrary.Segment)

# ===== /API ===== #

# static resources
GET         /public/*file                                                                             controllers.Assets.at(path="/public", file)

# test
GET         /test                                                                                     controllers.Site.test

# redirects
GET         /p/*path                                                                                  controllers.Site.tinyUrl(path : String, prefix : String = "party")
GET         /v/*path                                                                                  controllers.Site.tinyUrl(path : String, prefix : String = "volume")
GET         /*path/                                                                                   controllers.Site.untrail(path: String)
