# Routes
# This file defines all application routes (Higher priority routes first)
# vi:et
# ~~~~

# Static content
GET     /                                                                                         controllers.StaticHtml.index
GET     /about/team                                                                               controllers.StaticHtml.team
GET     /about                                                                                    controllers.StaticHtml.page(page = "about")
GET     /about/$page<[a-z]+>                                                                      controllers.StaticHtml.page(page : String)

# users
GET     /login                                                                                    controllers.LoginHtml.view
POST    /login                                                                                    controllers.LoginHtml.post
GET     /OpenID                                                                                   controllers.LoginHtml.openID(email = "")
GET     /OpenID/$email<.+\@.+\..+>                                                                controllers.LoginHtml.openID(email : String)
# TODO: should be POST:
GET     /logout                                                                                   controllers.LoginHtml.logout
GET     /superuser/on                                                                             controllers.LoginHtml.superuserOn
GET     /superuser/off                                                                            controllers.LoginHtml.superuserOff
GET     /token/password                                                                           controllers.Token.getPassword
POST    /token/password                                                                           controllers.Token.issuePassword
GET     /token/:token                                                                             controllers.Token.token(token : String)

# parties
GET     /party/$pID<-?[0-9]+>                                                                     controllers.PartyHtml.view(pID : models.Party.Id)
GET     /party/$pID<[0-9]+>/edit                                                                  controllers.PartyHtml.edit(pID : models.Party.Id)
POST    /party/$pID<[0-9]+>/edit                                                                  controllers.PartyHtml.update(pID : models.Party.Id)
POST    /party/$pID<[0-9]+>/token                                                                 controllers.Token.password(pID : models.Account.Id)
GET     /party/$pID<[0-9]+>/authorize                                                             controllers.PartyHtml.admin(pID : models.Party.Id)
GET     /party/$pID<[0-9]+>/authorize/search/child                                                controllers.PartyHtml.authorizeSearch(pID : models.Party.Id, which : Boolean = false)
GET     /party/$pID<[0-9]+>/authorize/search/parent                                               controllers.PartyHtml.authorizeSearch(pID : models.Party.Id, which : Boolean = true)
POST    /party/$pID<[0-9]+>/authorize/$child<-?[0-9]+>                                            controllers.PartyHtml.authorizeChange(pID : models.Party.Id, child : models.Party.Id)
POST    /party/$pID<[0-9]+>/authorize/$parent<-?[0-9]+>/apply                                     controllers.PartyHtml.authorizeApply(pID : models.Party.Id, parent : models.Party.Id)
# TODO: should be POST but currently used as link:
GET     /party/$pID<[0-9]+>/authorize/$child<-?[0-9]+>/remove                                     controllers.PartyHtml.authorizeDelete(pID : models.Party.Id, child : models.Party.Id)

# volumes
GET     /search                                                                                   controllers.VolumeHtml.search
GET     /volume/create                                                                            controllers.VolumeHtml.add(owner : Option[models.Party.Id] ?= None)
POST    /volume/create/$pID<[0-9]+>                                                               controllers.VolumeHtml.create(pID : models.Party.Id)
GET     /volume/$vID<[0-9]+>                                                                      controllers.VolumeHtml.view(vID : models.Volume.Id)
GET     /volume/$vID<[0-9]+>/edit                                                                 controllers.VolumeHtml.edit(vID : models.Volume.Id)
POST    /volume/$vID<[0-9]+>/edit                                                                 controllers.VolumeHtml.update(vID : models.Volume.Id)
GET     /volume/$vID<[0-9]+>/access                                                               controllers.VolumeHtml.admin(vID : models.Volume.Id)
GET     /volume/$vID<[0-9]+>/access/search                                                        controllers.VolumeHtml.accessSearch(vID : models.Volume.Id)
# TODO: should be POST:
GET     /volume/$vID<[0-9]+>/access/$pID<-?[0-9]+>/remove                                         controllers.VolumeHtml.accessDelete(vID : models.Volume.Id, pID : models.Party.Id)
POST    /volume/$vID<[0-9]+>/access/$pID<-?[0-9]+>                                                controllers.VolumeHtml.accessChange(vID : models.Volume.Id, pID : models.Party.Id)
GET     /volume/$vID<[0-9]+>/thumb                                                                controllers.VolumeController.thumb(vID : models.Volume.Id)

# slots
POST    /volume/$vID<[0-9]+>/slot/container                                                       controllers.SlotHtml.addContainer(vID : models.Volume.Id)
GET     /volume/$vID<[0-9]+>/slot/container                                                       controllers.SlotHtml.createContainer(vID : models.Volume.Id)

GET     /volume/$vID<[0-9]+>/slot/$cID<[0-9]+>/slot/create                                        controllers.SlotHtml.create(vID : models.Volume.Id, cID : models.Slot.Id)
POST    /volume/$vID<[0-9]+>/slot/$cID<[0-9]+>/slot/create                                        controllers.SlotHtml.add(vID : models.Volume.Id, cID : models.Slot.Id)

GET     /slot/$id<[0-9]+>                                                                         controllers.SlotHtml.view(id : models.Slot.Id, start : Option[dbrary.Offset] ?= None, end : Option[dbrary.Offset] ?= None)
GET     /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/edit                                               controllers.SlotHtml.edit(vID : models.Volume.Id, sID : models.Slot.Id)
POST    /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/edit                                               controllers.SlotHtml.change(vID : models.Volume.Id, sID : models.Slot.Id)
GET     /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/thumb                                              controllers.SlotHtml.thumb(vID : models.Volume.Id, sID : models.Slot.Id)

# assets
GET     /volume/$vID<[0-9]+>/asset/create                                                         controllers.AssetHtml.createTop(vID : models.Volume.Id)
GET     /volume/$vID<[0-9]+>/slot/$cID<[0-9]+>/asset/create                                       controllers.AssetHtml.create(vID : models.Volume.Id, cID : models.Slot.Id)
POST    /volume/$vID<[0-9]+>/slot/$cID<[0-9]+>/asset/create                                       controllers.AssetHtml.upload(vID : models.Volume.Id, cID : models.Slot.Id)
GET     /volume/$vID<[0-9]+>/asset/$aID<[0-9]+>                                                   controllers.AssetHtml.view(vID : models.Volume.Id, aID : models.Asset.Id)
GET     /volume/$vID<[0-9]+>/asset/$aID<[0-9]+>/edit                                              controllers.AssetHtml.edit(vID : models.Volume.Id, aID : models.Asset.Id)
POST    /volume/$vID<[0-9]+>/asset/$aID<[0-9]+>/edit                                              controllers.AssetHtml.change(vID : models.Volume.Id, aID : models.Asset.Id)
POST    /volume/$vID<[0-9]+>/asset/$aID<[0-9]+>/remove                                            controllers.AssetHtml.remove(vID : models.Volume.Id, aID : models.Asset.Id)

GET     /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/asset/$aID<[0-9]+>                                 controllers.SlotAssetController.view(vID : models.Volume.Id, sID : models.Slot.Id, aID : models.Asset.Id)
GET     /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/asset/$aID<[0-9]+>/download                        controllers.SlotAssetController.download(vID : models.Volume.Id, sID : models.Slot.Id, aID : models.Asset.Id, inline : Boolean = false)
GET     /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/asset/$aID<[0-9]+>/inline                          controllers.SlotAssetController.download(vID : models.Volume.Id, sID : models.Slot.Id, aID : models.Asset.Id, inline : Boolean = true)
GET     /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/asset/$aID<[0-9]+>/head                            controllers.SlotAssetController.head(vID : models.Volume.Id, sID : models.Slot.Id, aID : models.Asset.Id)
GET     /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/asset/$aID<[0-9]+>/thumb                           controllers.SlotAssetController.thumb(vID : models.Volume.Id, sID : models.Slot.Id, aID : models.Asset.Id)
GET     /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/asset/$aID<[0-9]+>/frame/$offset<[0-9:\.]+>        controllers.SlotAssetController.frame(vID : models.Volume.Id, sID : models.Slot.Id, aID : models.Asset.Id, offset : dbrary.Offset)

# annotations
POST    /slot/$sID<[0-9]+>/comment/create                                                         controllers.SlotHtml.comment(sID : models.Slot.Id, start : Option[dbrary.Offset] ?= None, end : Option[dbrary.Offset] ?= None, parent : Option[models.Comment.Id] ?= None)

POST    /slot/$sID<[0-9]+>/tag                                                                    controllers.TagHtml.update(name : String ?= "", sID : models.Slot.Id, start : Option[dbrary.Offset] ?= None, end : Option[dbrary.Offset] ?= None)

# records
POST    /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/record/$rID<[0-9]+>/remove                         controllers.RecordHtml.slotRemove(vID : models.Volume.Id, sID : models.Slot.Id, rID : models.Record.Id, editRedirect : Boolean = false)
POST    /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/record/$rID<[0-9]+>/remove/return                  controllers.RecordHtml.slotRemove(vID : models.Volume.Id, sID : models.Slot.Id, rID : models.Record.Id, editRedirect : Boolean = true)
POST    /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/record/$cID<-?[0-9]+>/create                       controllers.RecordHtml.slotAdd(vID : models.Volume.Id, sID : models.Slot.Id, cID : models.RecordCategory.Id, editRedirect : Boolean = false)
POST    /volume/$vID<[0-9]+>/slot/$sID<[0-9]+>/record/$cID<-?[0-9]+>/create/return                controllers.RecordHtml.slotAdd(vID : models.Volume.Id, sID : models.Slot.Id, cID : models.RecordCategory.Id, editRedirect : Boolean = true)

GET     /record/$rID<[0-9]+>                                                                      controllers.RecordHtml.view(rID : models.Record.Id)
GET     /volume/$vID<[0-9]+>/record/$cID<-?[0-9]+>/create                                         controllers.RecordHtml.add(vID : models.Volume.Id, cID : models.RecordCategory.Id)
GET     /record/$rID<[0-9]+>/edit                                                                 controllers.RecordHtml.edit(rID : models.Record.Id)
POST    /record/$rID<[0-9]+>/edit                                                                 controllers.RecordHtml.update(rID : models.Record.Id)

GET     /volume/$vID<[0-9]+>/ingest/csv                                                           controllers.Ingest.csv(vID : models.Volume.Id)
POST    /volume/$vID<[0-9]+>/ingest/curated                                                       controllers.Ingest.curated(vID : models.Volume.Id)

# API
GET     /api/about/$page<[a-z]+>                                                                  controllers.StaticApi.page(page : String)
POST    /api/login                                                                                controllers.LoginApi.post
POST    /api/logout                                                                               controllers.LoginApi.logout
POST    /api/superuser/on                                                                         controllers.LoginApi.superuserOn
POST    /api/superuser/off                                                                        controllers.LoginApi.superuserOff

GET     /api/party/$partyId<-?[0-9]+>                                                             controllers.PartyApi.get(partyId : models.Party.Id)
POST    /api/party/$partyId<-?[0-9]+>                                                             controllers.PartyApi.update(partyId : models.Party.Id)
GET     /api/party/$partyId<-?[0-9]+>/authorize/:name                                             controllers.PartyApi.authorizeSearch(partyId : models.Party.Id, name : String)
GET     /api/party/$partyId<-?[0-9]+>/authorize                                                   controllers.PartyApi.authorizeGet(partyId : models.Party.Id)
POST    /api/party/$partyId<-?[0-9]+>/authorize/$childId<[0-9]+>                                  controllers.PartyApi.authorizeChange(partyId : models.Party.Id, childId : models.Party.Id)
POST    /api/party/$partyId<-?[0-9]+>/authorize/$parentId<[0-9]+>/apply                           controllers.PartyApi.authorizeApply(partyId : models.Party.Id, parentId : models.Party.Id)
DELETE  /api/party/$partyId<-?[0-9]+>/authorize/$otherId<[0-9]+>                                  controllers.PartyApi.authorizeDelete(partyId : models.Party.Id, otherId : models.Party.Id)

GET     /api/volume/$volumeId<[0-9]+>                                                             controllers.VolumeApi.get(volumeId : models.Volume.Id)
POST    /api/volume/$volumeId<[0-9]+>                                                             controllers.VolumeApi.update(volumeId : models.Volume.Id)
POST    /api/volume                                                                               controllers.VolumeApi.create(owner : models.Party.Id)
GET     /api/volume/$volumeId<[0-9]+>/access/:name                                                controllers.VolumeApi.accessSearch(volumeId : models.Volume.Id, name : String)
GET     /api/volume/$volumeId<[0-9]+>/access                                                      controllers.VolumeApi.accessGet(volumeId : models.Volume.Id)
POST    /api/volume/$volumeId<[0-9]+>/access/$partyId<-?[0-9]+>                                   controllers.VolumeApi.accessChange(volumeId : models.Volume.Id, partyId : models.Party.Id)
DELETE  /api/volume/$volumeId<[0-9]+>/access/$partyId<-?[0-9]+>                                   controllers.VolumeApi.accessDelete(volumeId : models.Volume.Id, partyId : models.Party.Id)

GET     /api/slot/$containerId<[0-9]+>                                                            controllers.SlotApi.get(containerId : models.Container.Id, start : Option[dbrary.Offset] ?= None, end : Option[dbrary.Offset] ?= None)

GET     /api/record/$recordId<[0-9]+>                                                             controllers.RecordApi.get(recordId : models.Record.Id)
GET     /api/record                                                                               controllers.RecordApi.query(volume : models.Volume.Id)
POST    /api/record/$recordId<[0-9]+>                                                             controllers.RecordApi.update(recordId : models.Record.Id)
POST    /api/record                                                                               controllers.RecordApi.create(volume : models.Volume.Id, category : Option[String] ?= None)

GET     /api/asset/$assetId<[0-9]+>                                                               controllers.AssetApi.get(assetId : models.Asset.Id)

POST    /api/comment                                                                              controllers.SlotApi.comment(container : models.Container.Id, start : Option[dbrary.Offset] ?= None, end : Option[dbrary.Offset] ?= None, parent : Option[models.Comment.Id] ?= None)

GET     /api/tag/:name                                                                            controllers.TagApi.get(name : String)
POST    /api/tag/:name                                                                            controllers.TagApi.update(name : String, container : models.Container.Id, start : Option[dbrary.Offset] ?= None, end : Option[dbrary.Offset] ?= None)

# static resources
GET     /public/*file                                                                             controllers.Assets.at(path="/public", file)

# test
GET     /test                                                                                     controllers.Site.test

# redirects
GET     /p/*path                                                                                  controllers.Site.tinyUrl(path : String, prefix : String = "party")
GET     /v/*path                                                                                  controllers.Site.tinyUrl(path : String, prefix : String = "volume")
GET     /*path/                                                                                   controllers.Site.untrail(path: String)
