#!/bin/bash
set -o pipefail

if [[ $# -eq 1 ]] ; then
	f=`basename "$1"`
	f="`dirname "$1"`/transcoded/${f%.*}-01.mp4"
	[[ -f $f ]] && set -- "$1" "$f"
fi
if [[ $# -ne 2 ]] ; then
	echo "Usage: $0 FILE1 FILE2" >&2
	exit 1
fi

probe () {
	declare -gA "$1"
	while IFS== read k v ; do
		eval "$1[$k]=$v"
	done < <( ffprobe -loglevel warning -show_format -show_streams -of flat -i "$2" ; echo "status=$?" )
	eval "[[ $1[status] -eq 0 ]]" || exit 1
}

get () {
	eval "$1=\${$2[$3]}"
}

set () {
	eval "$1[$2]=\$3"
}

count_streams () {
	local i n f
	get n $1 format.nb_streams
	for (( i=0 ; i<n ; i ++ )) ; do
		get f $1 streams.stream.$i.codec_type
		eval "(( ++$1[format.nb_streams.$f] ))"
	done
}

get_both () {
	get "a$1" a "$2"
	get "b$1" b "$2"
}

bad () {
	echo "$@"
	exit 1
}

probe a "$1"
probe b "$2"
count_streams a
count_streams b

for t in video audio ; do
	get_both n format.nb_streams.$t
	if [[ $an -ne $bn ]] ; then
		bad "Number of $t streams differ: $an $bn"
	fi
done

get_both s format.start_time
get_both d format.duration
dt=`bc <<< "dt=$ad-$bd;dt<-0.1||dt>0.1"`
if [[ $dt -gt 0 ]] ; then
	bad "Lengths differ: $as-$ad $bs-$bd"
fi
