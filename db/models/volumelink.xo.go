// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// VolumeLink represents a row from '"public"."volume_link"'.
type VolumeLink struct {
	Volume int64  `json:"volume"` // volume
	Head   string `json:"head"`   // head
	URL    string `json:"url"`    // url

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VolumeLink exists in the database.
func (vl *VolumeLink) Exists() bool {
	return vl._exists
}

// Deleted provides information if the VolumeLink has been deleted from the database.
func (vl *VolumeLink) Deleted() bool {
	return vl._deleted
}

// Insert inserts the VolumeLink to the database.
func (vl *VolumeLink) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vl._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."volume_link" (` +
		`"volume", "head", "url"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, vl.Volume, vl.Head, vl.URL)
	err = db.QueryRow(sqlstr, vl.Volume, vl.Head, vl.URL).Scan(&vl.URL)
	if err != nil {
		return err
	}

	// set existence
	vl._exists = true

	return nil
}

// Update updates the VolumeLink in the database.
func (vl *VolumeLink) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vl._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vl._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."volume_link" SET (` +
		`"volume", "head"` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE "url" = $3`

	// run query
	XOLog(sqlstr, vl.Volume, vl.Head, vl.URL)
	_, err = db.Exec(sqlstr, vl.Volume, vl.Head, vl.URL)
	return err
}

// Save saves the VolumeLink to the database.
func (vl *VolumeLink) Save(db XODB) error {
	if vl.Exists() {
		return vl.Update(db)
	}

	return vl.Insert(db)
}

// Upsert performs an upsert for VolumeLink.
//
// NOTE: PostgreSQL 9.5+ only
func (vl *VolumeLink) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if vl._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."volume_link" (` +
		`"volume", "head", "url"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT ("url") DO UPDATE SET (` +
		`"volume", "head", "url"` +
		`) = (` +
		`EXCLUDED."volume", EXCLUDED."head", EXCLUDED."url"` +
		`)`

	// run query
	XOLog(sqlstr, vl.Volume, vl.Head, vl.URL)
	_, err = db.Exec(sqlstr, vl.Volume, vl.Head, vl.URL)
	if err != nil {
		return err
	}

	// set existence
	vl._exists = true

	return nil
}

// Delete deletes the VolumeLink from the database.
func (vl *VolumeLink) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vl._exists {
		return nil
	}

	// if deleted, bail
	if vl._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."volume_link" WHERE "url" = $1`

	// run query
	XOLog(sqlstr, vl.URL)
	_, err = db.Exec(sqlstr, vl.URL)
	if err != nil {
		return err
	}

	// set deleted
	vl._deleted = true

	return nil
}

// Volume returns the Volume associated with the VolumeLink's Volume (volume).
//
// Generated from foreign key 'volume_link_volume_fkey'.
func (vl *VolumeLink) VolumeByVolumeID(db XODB) (*Volume, error) {
	return VolumeByID(db, vl.Volume)
}

// VolumeLinkByVolumeURL retrieves a row from '"public"."volume_link"' as a VolumeLink.
//
// Generated from index 'volume_link_pkey'.
func VolumeLinkByVolumeURL(db XODB, volume int64, url string) (*VolumeLink, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"volume", "head", "url" ` +
		`FROM "public"."volume_link" ` +
		`WHERE "volume" = $1 AND "url" = $2`

	// run query
	XOLog(sqlstr, volume, url)
	vl := VolumeLink{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, volume, url).Scan(&vl.Volume, &vl.Head, &vl.URL)
	if err != nil {
		return nil, err
	}

	return &vl, nil
}
