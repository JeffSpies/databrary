// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"

	"github.com/databrary/databrary/db/models/custom_types"
)

// SlotRelease represents a row from '"public"."slot_release"'.
type SlotRelease struct {
	Container int64                `json:"container"` // container
	Segment   custom_types.Segment `json:"segment"`   // segment
	Release   Release              `json:"release"`   // release

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SlotRelease exists in the database.
func (sr *SlotRelease) Exists() bool {
	return sr._exists
}

// Deleted provides information if the SlotRelease has been deleted from the database.
func (sr *SlotRelease) Deleted() bool {
	return sr._deleted
}

// Insert inserts the SlotRelease to the database.
func (sr *SlotRelease) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if sr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."slot_release" (` +
		`"container", "segment", "release"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, sr.Container, sr.Segment, sr.Release)
	err = db.QueryRow(sqlstr, sr.Container, sr.Segment, sr.Release).Scan(&sr.Segment)
	if err != nil {
		return err
	}

	// set existence
	sr._exists = true

	return nil
}

// Update updates the SlotRelease in the database.
func (sr *SlotRelease) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if sr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."slot_release" SET (` +
		`"container", "release"` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE "segment" = $3`

	// run query
	XOLog(sqlstr, sr.Container, sr.Release, sr.Segment)
	_, err = db.Exec(sqlstr, sr.Container, sr.Release, sr.Segment)
	return err
}

// Save saves the SlotRelease to the database.
func (sr *SlotRelease) Save(db XODB) error {
	if sr.Exists() {
		return sr.Update(db)
	}

	return sr.Insert(db)
}

// Upsert performs an upsert for SlotRelease.
//
// NOTE: PostgreSQL 9.5+ only
func (sr *SlotRelease) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if sr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."slot_release" (` +
		`"container", "segment", "release"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT ("segment") DO UPDATE SET (` +
		`"container", "segment", "release"` +
		`) = (` +
		`EXCLUDED."container", EXCLUDED."segment", EXCLUDED."release"` +
		`)`

	// run query
	XOLog(sqlstr, sr.Container, sr.Segment, sr.Release)
	_, err = db.Exec(sqlstr, sr.Container, sr.Segment, sr.Release)
	if err != nil {
		return err
	}

	// set existence
	sr._exists = true

	return nil
}

// Delete deletes the SlotRelease from the database.
func (sr *SlotRelease) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sr._exists {
		return nil
	}

	// if deleted, bail
	if sr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."slot_release" WHERE "segment" = $1`

	// run query
	XOLog(sqlstr, sr.Segment)
	_, err = db.Exec(sqlstr, sr.Segment)
	if err != nil {
		return err
	}

	// set deleted
	sr._deleted = true

	return nil
}

// Container returns the Container associated with the SlotRelease's Container (container).
//
// Generated from foreign key 'slot_release_container_fkey'.
func (sr *SlotRelease) ContainerByContainerID(db XODB) (*Container, error) {
	return ContainerByID(db, sr.Container)
}

// SlotReleaseByContainerSegment retrieves a row from '"public"."slot_release"' as a SlotRelease.
//
// Generated from index 'slot_release_pkey'.
func SlotReleaseByContainerSegment(db XODB, container int64, segment custom_types.Segment) (*SlotRelease, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"container", "segment", "release" ` +
		`FROM "public"."slot_release" ` +
		`WHERE "container" = $1 AND "segment" = $2`

	// run query
	XOLog(sqlstr, container, segment)
	sr := SlotRelease{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, container, segment).Scan(&sr.Container, &sr.Segment, &sr.Release)
	if err != nil {
		return nil, err
	}

	return &sr, nil
}
