// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// MeasureNumeric represents a row from '"public"."measure_numeric"'.
type MeasureNumeric struct {
	Record int64   `json:"record"` // record
	Metric int64   `json:"metric"` // metric
	Datum  float64 `json:"datum"`  // datum

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MeasureNumeric exists in the database.
func (mn *MeasureNumeric) Exists() bool {
	return mn._exists
}

// Deleted provides information if the MeasureNumeric has been deleted from the database.
func (mn *MeasureNumeric) Deleted() bool {
	return mn._deleted
}

// Insert inserts the MeasureNumeric to the database.
func (mn *MeasureNumeric) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mn._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."measure_numeric" (` +
		`"record", "metric", "datum"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, mn.Record, mn.Metric, mn.Datum)
	err = db.QueryRow(sqlstr, mn.Record, mn.Metric, mn.Datum).Scan(&mn.Metric)
	if err != nil {
		return err
	}

	// set existence
	mn._exists = true

	return nil
}

// Update updates the MeasureNumeric in the database.
func (mn *MeasureNumeric) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mn._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mn._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."measure_numeric" SET (` +
		`"record", "datum"` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE "metric" = $3`

	// run query
	XOLog(sqlstr, mn.Record, mn.Datum, mn.Metric)
	_, err = db.Exec(sqlstr, mn.Record, mn.Datum, mn.Metric)
	return err
}

// Save saves the MeasureNumeric to the database.
func (mn *MeasureNumeric) Save(db XODB) error {
	if mn.Exists() {
		return mn.Update(db)
	}

	return mn.Insert(db)
}

// Upsert performs an upsert for MeasureNumeric.
//
// NOTE: PostgreSQL 9.5+ only
func (mn *MeasureNumeric) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if mn._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."measure_numeric" (` +
		`"record", "metric", "datum"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT ("metric") DO UPDATE SET (` +
		`"record", "metric", "datum"` +
		`) = (` +
		`EXCLUDED."record", EXCLUDED."metric", EXCLUDED."datum"` +
		`)`

	// run query
	XOLog(sqlstr, mn.Record, mn.Metric, mn.Datum)
	_, err = db.Exec(sqlstr, mn.Record, mn.Metric, mn.Datum)
	if err != nil {
		return err
	}

	// set existence
	mn._exists = true

	return nil
}

// Delete deletes the MeasureNumeric from the database.
func (mn *MeasureNumeric) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mn._exists {
		return nil
	}

	// if deleted, bail
	if mn._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."measure_numeric" WHERE "metric" = $1`

	// run query
	XOLog(sqlstr, mn.Metric)
	_, err = db.Exec(sqlstr, mn.Metric)
	if err != nil {
		return err
	}

	// set deleted
	mn._deleted = true

	return nil
}

// Metric returns the Metric associated with the MeasureNumeric's Metric (metric).
//
// Generated from foreign key 'measure_numeric_metric_fkey'.
func (mn *MeasureNumeric) MetricByMetricID(db XODB) (*Metric, error) {
	return MetricByID(db, mn.Metric)
}

// Record returns the Record associated with the MeasureNumeric's Record (record).
//
// Generated from foreign key 'measure_numeric_record_fkey'.
func (mn *MeasureNumeric) RecordByRecordID(db XODB) (*Record, error) {
	return RecordByID(db, mn.Record)
}

// MeasureNumericByRecordMetric retrieves a row from '"public"."measure_numeric"' as a MeasureNumeric.
//
// Generated from index 'measure_numeric_pkey'.
func MeasureNumericByRecordMetric(db XODB, record int64, metric int64) (*MeasureNumeric, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"record", "metric", "datum" ` +
		`FROM "public"."measure_numeric" ` +
		`WHERE "record" = $1 AND "metric" = $2`

	// run query
	XOLog(sqlstr, record, metric)
	mn := MeasureNumeric{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, record, metric).Scan(&mn.Record, &mn.Metric, &mn.Datum)
	if err != nil {
		return nil, err
	}

	return &mn, nil
}
