// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/lib/pq"
)

// Container represents a row from '"public"."container"'.
type Container struct {
	ID     int64          `json:"id"`     // id
	Volume int64          `json:"volume"` // volume
	Top    bool           `json:"top"`    // top
	Name   sql.NullString `json:"name"`   // name
	Date   pq.NullTime    `json:"date"`   // date

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Container exists in the database.
func (c *Container) Exists() bool {
	return c._exists
}

// Deleted provides information if the Container has been deleted from the database.
func (c *Container) Deleted() bool {
	return c._deleted
}

// Insert inserts the Container to the database.
func (c *Container) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO "public"."container" (` +
		`"volume", "top", "name", "date"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING "id"`

	// run query
	XOLog(sqlstr, c.Volume, c.Top, c.Name, c.Date)
	err = db.QueryRow(sqlstr, c.Volume, c.Top, c.Name, c.Date).Scan(&c.ID)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Container in the database.
func (c *Container) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."container" SET (` +
		`"volume", "top", "name", "date"` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE "id" = $5`

	// run query
	XOLog(sqlstr, c.Volume, c.Top, c.Name, c.Date, c.ID)
	_, err = db.Exec(sqlstr, c.Volume, c.Top, c.Name, c.Date, c.ID)
	return err
}

// Save saves the Container to the database.
func (c *Container) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Container.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Container) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."container" (` +
		`"id", "volume", "top", "name", "date"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"id", "volume", "top", "name", "date"` +
		`) = (` +
		`EXCLUDED."id", EXCLUDED."volume", EXCLUDED."top", EXCLUDED."name", EXCLUDED."date"` +
		`)`

	// run query
	XOLog(sqlstr, c.ID, c.Volume, c.Top, c.Name, c.Date)
	_, err = db.Exec(sqlstr, c.ID, c.Volume, c.Top, c.Name, c.Date)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Container from the database.
func (c *Container) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."container" WHERE "id" = $1`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = db.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// Volume returns the Volume associated with the Container's Volume (volume).
//
// Generated from foreign key 'container_volume_fkey'.
func (c *Container) VolumeByVolumeID(db XODB) (*Volume, error) {
	return VolumeByID(db, c.Volume)
}

// ContainerByID retrieves a row from '"public"."container"' as a Container.
//
// Generated from index 'container_pkey'.
func ContainerByID(db XODB, id int64) (*Container, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "volume", "top", "name", "date" ` +
		`FROM "public"."container" ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	c := Container{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&c.ID, &c.Volume, &c.Top, &c.Name, &c.Date)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// ContainersByTop retrieves a row from '"public"."container"' as a Container.
//
// Generated from index 'container_top_idx'.
func ContainersByTop(db XODB, volume int64) ([]*Container, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "volume", "top", "name", "date" ` +
		`FROM "public"."container" ` +
		`WHERE "volume" = $1`

	// run query
	XOLog(sqlstr, volume)
	q, err := db.Query(sqlstr, volume)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Container{}
	for q.Next() {
		c := Container{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.ID, &c.Volume, &c.Top, &c.Name, &c.Date)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// ContainersByVolume retrieves a row from '"public"."container"' as a Container.
//
// Generated from index 'container_volume_idx'.
func ContainersByVolume(db XODB, volume int64) ([]*Container, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "volume", "top", "name", "date" ` +
		`FROM "public"."container" ` +
		`WHERE "volume" = $1`

	// run query
	XOLog(sqlstr, volume)
	q, err := db.Query(sqlstr, volume)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Container{}
	for q.Next() {
		c := Container{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.ID, &c.Volume, &c.Top, &c.Name, &c.Date)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}
