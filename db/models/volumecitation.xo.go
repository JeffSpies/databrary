// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// VolumeCitation represents a row from '"public"."volume_citation"'.
type VolumeCitation struct {
	Volume int64          `json:"volume"` // volume
	Head   string         `json:"head"`   // head
	URL    sql.NullString `json:"url"`    // url
	Year   sql.NullInt64  `json:"year"`   // year

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VolumeCitation exists in the database.
func (vc *VolumeCitation) Exists() bool {
	return vc._exists
}

// Deleted provides information if the VolumeCitation has been deleted from the database.
func (vc *VolumeCitation) Deleted() bool {
	return vc._deleted
}

// Insert inserts the VolumeCitation to the database.
func (vc *VolumeCitation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."volume_citation" (` +
		`"volume", "head", "url", "year"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, vc.Volume, vc.Head, vc.URL, vc.Year)
	err = db.QueryRow(sqlstr, vc.Volume, vc.Head, vc.URL, vc.Year).Scan(&vc.Volume)
	if err != nil {
		return err
	}

	// set existence
	vc._exists = true

	return nil
}

// Update updates the VolumeCitation in the database.
func (vc *VolumeCitation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."volume_citation" SET (` +
		`"head", "url", "year"` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE "volume" = $4`

	// run query
	XOLog(sqlstr, vc.Head, vc.URL, vc.Year, vc.Volume)
	_, err = db.Exec(sqlstr, vc.Head, vc.URL, vc.Year, vc.Volume)
	return err
}

// Save saves the VolumeCitation to the database.
func (vc *VolumeCitation) Save(db XODB) error {
	if vc.Exists() {
		return vc.Update(db)
	}

	return vc.Insert(db)
}

// Upsert performs an upsert for VolumeCitation.
//
// NOTE: PostgreSQL 9.5+ only
func (vc *VolumeCitation) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if vc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."volume_citation" (` +
		`"volume", "head", "url", "year"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT ("volume") DO UPDATE SET (` +
		`"volume", "head", "url", "year"` +
		`) = (` +
		`EXCLUDED."volume", EXCLUDED."head", EXCLUDED."url", EXCLUDED."year"` +
		`)`

	// run query
	XOLog(sqlstr, vc.Volume, vc.Head, vc.URL, vc.Year)
	_, err = db.Exec(sqlstr, vc.Volume, vc.Head, vc.URL, vc.Year)
	if err != nil {
		return err
	}

	// set existence
	vc._exists = true

	return nil
}

// Delete deletes the VolumeCitation from the database.
func (vc *VolumeCitation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vc._exists {
		return nil
	}

	// if deleted, bail
	if vc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."volume_citation" WHERE "volume" = $1`

	// run query
	XOLog(sqlstr, vc.Volume)
	_, err = db.Exec(sqlstr, vc.Volume)
	if err != nil {
		return err
	}

	// set deleted
	vc._deleted = true

	return nil
}

// Volume returns the Volume associated with the VolumeCitation's Volume (volume).
//
// Generated from foreign key 'volume_citation_volume_fkey'.
func (vc *VolumeCitation) VolumeByVolumeID(db XODB) (*Volume, error) {
	return VolumeByID(db, vc.Volume)
}

// VolumeCitationByVolume retrieves a row from '"public"."volume_citation"' as a VolumeCitation.
//
// Generated from index 'volume_citation_pkey'.
func VolumeCitationByVolume(db XODB, volume int64) (*VolumeCitation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"volume", "head", "url", "year" ` +
		`FROM "public"."volume_citation" ` +
		`WHERE "volume" = $1`

	// run query
	XOLog(sqlstr, volume)
	vc := VolumeCitation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, volume).Scan(&vc.Volume, &vc.Head, &vc.URL, &vc.Year)
	if err != nil {
		return nil, err
	}

	return &vc, nil
}
