// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Session represents a row from '"public"."session"'.
type Session struct {
	Token     string    `json:"token"`     // token
	Expires   time.Time `json:"expires"`   // expires
	Account   int64     `json:"account"`   // account
	Verf      string    `json:"verf"`      // verf
	Superuser bool      `json:"superuser"` // superuser

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Session exists in the database.
func (s *Session) Exists() bool {
	return s._exists
}

// Deleted provides information if the Session has been deleted from the database.
func (s *Session) Deleted() bool {
	return s._deleted
}

// Insert inserts the Session to the database.
func (s *Session) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."session" (` +
		`"token", "expires", "account", "verf", "superuser"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, s.Token, s.Expires, s.Account, s.Verf, s.Superuser)
	err = db.QueryRow(sqlstr, s.Token, s.Expires, s.Account, s.Verf, s.Superuser).Scan(&s.Token)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Update updates the Session in the database.
func (s *Session) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."session" SET (` +
		`"expires", "account", "verf", "superuser"` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE "token" = $5`

	// run query
	XOLog(sqlstr, s.Expires, s.Account, s.Verf, s.Superuser, s.Token)
	_, err = db.Exec(sqlstr, s.Expires, s.Account, s.Verf, s.Superuser, s.Token)
	return err
}

// Save saves the Session to the database.
func (s *Session) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Upsert performs an upsert for Session.
//
// NOTE: PostgreSQL 9.5+ only
func (s *Session) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."session" (` +
		`"token", "expires", "account", "verf", "superuser"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT ("token") DO UPDATE SET (` +
		`"token", "expires", "account", "verf", "superuser"` +
		`) = (` +
		`EXCLUDED."token", EXCLUDED."expires", EXCLUDED."account", EXCLUDED."verf", EXCLUDED."superuser"` +
		`)`

	// run query
	XOLog(sqlstr, s.Token, s.Expires, s.Account, s.Verf, s.Superuser)
	_, err = db.Exec(sqlstr, s.Token, s.Expires, s.Account, s.Verf, s.Superuser)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Delete deletes the Session from the database.
func (s *Session) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."session" WHERE "token" = $1`

	// run query
	XOLog(sqlstr, s.Token)
	_, err = db.Exec(sqlstr, s.Token)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// Account returns the Account associated with the Session's Account (account).
//
// Generated from foreign key 'session_account_fkey'.
func (s *Session) AccountByAccountID(db XODB) (*Account, error) {
	return AccountByID(db, s.Account)
}

// SessionByToken retrieves a row from '"public"."session"' as a Session.
//
// Generated from index 'session_pkey'.
func SessionByToken(db XODB, token string) (*Session, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"token", "expires", "account", "verf", "superuser" ` +
		`FROM "public"."session" ` +
		`WHERE "token" = $1`

	// run query
	XOLog(sqlstr, token)
	s := Session{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, token).Scan(&s.Token, &s.Expires, &s.Account, &s.Verf, &s.Superuser)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
