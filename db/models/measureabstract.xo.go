// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// MeasureAbstract represents a row from '"public"."measure_abstract"'.
type MeasureAbstract struct {
	Record int64 `json:"record"` // record
	Metric int64 `json:"metric"` // metric

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MeasureAbstract exists in the database.
func (ma *MeasureAbstract) Exists() bool {
	return ma._exists
}

// Deleted provides information if the MeasureAbstract has been deleted from the database.
func (ma *MeasureAbstract) Deleted() bool {
	return ma._deleted
}

// Insert inserts the MeasureAbstract to the database.
func (ma *MeasureAbstract) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ma._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."measure_abstract" (` +
		`"record", "metric"` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, ma.Record, ma.Metric)
	err = db.QueryRow(sqlstr, ma.Record, ma.Metric).Scan(&ma.Metric)
	if err != nil {
		return err
	}

	// set existence
	ma._exists = true

	return nil
}

// Update updates the MeasureAbstract in the database.
func (ma *MeasureAbstract) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ma._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ma._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."measure_abstract" SET (` +
		`"record"` +
		`) = ( ` +
		`$1` +
		`) WHERE "metric" = $2`

	// run query
	XOLog(sqlstr, ma.Record, ma.Metric)
	_, err = db.Exec(sqlstr, ma.Record, ma.Metric)
	return err
}

// Save saves the MeasureAbstract to the database.
func (ma *MeasureAbstract) Save(db XODB) error {
	if ma.Exists() {
		return ma.Update(db)
	}

	return ma.Insert(db)
}

// Upsert performs an upsert for MeasureAbstract.
//
// NOTE: PostgreSQL 9.5+ only
func (ma *MeasureAbstract) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ma._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."measure_abstract" (` +
		`"record", "metric"` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT ("metric") DO UPDATE SET (` +
		`"record", "metric"` +
		`) = (` +
		`EXCLUDED."record", EXCLUDED."metric"` +
		`)`

	// run query
	XOLog(sqlstr, ma.Record, ma.Metric)
	_, err = db.Exec(sqlstr, ma.Record, ma.Metric)
	if err != nil {
		return err
	}

	// set existence
	ma._exists = true

	return nil
}

// Delete deletes the MeasureAbstract from the database.
func (ma *MeasureAbstract) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ma._exists {
		return nil
	}

	// if deleted, bail
	if ma._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."measure_abstract" WHERE "metric" = $1`

	// run query
	XOLog(sqlstr, ma.Metric)
	_, err = db.Exec(sqlstr, ma.Metric)
	if err != nil {
		return err
	}

	// set deleted
	ma._deleted = true

	return nil
}

// Metric returns the Metric associated with the MeasureAbstract's Metric (metric).
//
// Generated from foreign key 'measure_abstract_metric_fkey'.
func (ma *MeasureAbstract) MetricByMetricID(db XODB) (*Metric, error) {
	return MetricByID(db, ma.Metric)
}

// Record returns the Record associated with the MeasureAbstract's Record (record).
//
// Generated from foreign key 'measure_abstract_record_fkey'.
func (ma *MeasureAbstract) RecordByRecordID(db XODB) (*Record, error) {
	return RecordByID(db, ma.Record)
}

// MeasureAbstractByRecordMetric retrieves a row from '"public"."measure_abstract"' as a MeasureAbstract.
//
// Generated from index 'measure_abstract_pkey'.
func MeasureAbstractByRecordMetric(db XODB, record int64, metric int64) (*MeasureAbstract, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"record", "metric" ` +
		`FROM "public"."measure_abstract" ` +
		`WHERE "record" = $1 AND "metric" = $2`

	// run query
	XOLog(sqlstr, record, metric)
	ma := MeasureAbstract{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, record, metric).Scan(&ma.Record, &ma.Metric)
	if err != nil {
		return nil, err
	}

	return &ma, nil
}
