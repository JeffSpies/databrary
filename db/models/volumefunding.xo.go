// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// VolumeFunding represents a row from '"public"."volume_funding"'.
type VolumeFunding struct {
	Volume int64       `json:"volume"` // volume
	Funder int64       `json:"funder"` // funder
	Awards StringSlice `json:"awards"` // awards

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VolumeFunding exists in the database.
func (vf *VolumeFunding) Exists() bool {
	return vf._exists
}

// Deleted provides information if the VolumeFunding has been deleted from the database.
func (vf *VolumeFunding) Deleted() bool {
	return vf._deleted
}

// Insert inserts the VolumeFunding to the database.
func (vf *VolumeFunding) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vf._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."volume_funding" (` +
		`"volume", "funder", "awards"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, vf.Volume, vf.Funder, vf.Awards)
	err = db.QueryRow(sqlstr, vf.Volume, vf.Funder, vf.Awards).Scan(&vf.Funder)
	if err != nil {
		return err
	}

	// set existence
	vf._exists = true

	return nil
}

// Update updates the VolumeFunding in the database.
func (vf *VolumeFunding) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vf._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vf._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."volume_funding" SET (` +
		`"volume", "awards"` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE "funder" = $3`

	// run query
	XOLog(sqlstr, vf.Volume, vf.Awards, vf.Funder)
	_, err = db.Exec(sqlstr, vf.Volume, vf.Awards, vf.Funder)
	return err
}

// Save saves the VolumeFunding to the database.
func (vf *VolumeFunding) Save(db XODB) error {
	if vf.Exists() {
		return vf.Update(db)
	}

	return vf.Insert(db)
}

// Upsert performs an upsert for VolumeFunding.
//
// NOTE: PostgreSQL 9.5+ only
func (vf *VolumeFunding) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if vf._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."volume_funding" (` +
		`"volume", "funder", "awards"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT ("funder") DO UPDATE SET (` +
		`"volume", "funder", "awards"` +
		`) = (` +
		`EXCLUDED."volume", EXCLUDED."funder", EXCLUDED."awards"` +
		`)`

	// run query
	XOLog(sqlstr, vf.Volume, vf.Funder, vf.Awards)
	_, err = db.Exec(sqlstr, vf.Volume, vf.Funder, vf.Awards)
	if err != nil {
		return err
	}

	// set existence
	vf._exists = true

	return nil
}

// Delete deletes the VolumeFunding from the database.
func (vf *VolumeFunding) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vf._exists {
		return nil
	}

	// if deleted, bail
	if vf._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."volume_funding" WHERE "funder" = $1`

	// run query
	XOLog(sqlstr, vf.Funder)
	_, err = db.Exec(sqlstr, vf.Funder)
	if err != nil {
		return err
	}

	// set deleted
	vf._deleted = true

	return nil
}

// Funder returns the Funder associated with the VolumeFunding's Funder (funder).
//
// Generated from foreign key 'volume_funding_funder_fkey'.
func (vf *VolumeFunding) FunderByFunderID(db XODB) (*Funder, error) {
	return FunderByFundrefID(db, vf.Funder)
}

// Volume returns the Volume associated with the VolumeFunding's Volume (volume).
//
// Generated from foreign key 'volume_funding_volume_fkey'.
func (vf *VolumeFunding) VolumeByVolumeID(db XODB) (*Volume, error) {
	return VolumeByID(db, vf.Volume)
}

// VolumeFundingByVolumeFunder retrieves a row from '"public"."volume_funding"' as a VolumeFunding.
//
// Generated from index 'volume_funding_pkey'.
func VolumeFundingByVolumeFunder(db XODB, volume int64, funder int64) (*VolumeFunding, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"volume", "funder", "awards" ` +
		`FROM "public"."volume_funding" ` +
		`WHERE "volume" = $1 AND "funder" = $2`

	// run query
	XOLog(sqlstr, volume, funder)
	vf := VolumeFunding{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, volume, funder).Scan(&vf.Volume, &vf.Funder, &vf.Awards)
	if err != nil {
		return nil, err
	}

	return &vf, nil
}
