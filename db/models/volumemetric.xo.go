// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// VolumeMetric represents a row from '"public"."volume_metric"'.
type VolumeMetric struct {
	Volume int64 `json:"volume"` // volume
	Metric int64 `json:"metric"` // metric

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VolumeMetric exists in the database.
func (vm *VolumeMetric) Exists() bool {
	return vm._exists
}

// Deleted provides information if the VolumeMetric has been deleted from the database.
func (vm *VolumeMetric) Deleted() bool {
	return vm._deleted
}

// Insert inserts the VolumeMetric to the database.
func (vm *VolumeMetric) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."volume_metric" (` +
		`"volume", "metric"` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, vm.Volume, vm.Metric)
	err = db.QueryRow(sqlstr, vm.Volume, vm.Metric).Scan(&vm.Metric)
	if err != nil {
		return err
	}

	// set existence
	vm._exists = true

	return nil
}

// Update updates the VolumeMetric in the database.
func (vm *VolumeMetric) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."volume_metric" SET (` +
		`"volume"` +
		`) = ( ` +
		`$1` +
		`) WHERE "metric" = $2`

	// run query
	XOLog(sqlstr, vm.Volume, vm.Metric)
	_, err = db.Exec(sqlstr, vm.Volume, vm.Metric)
	return err
}

// Save saves the VolumeMetric to the database.
func (vm *VolumeMetric) Save(db XODB) error {
	if vm.Exists() {
		return vm.Update(db)
	}

	return vm.Insert(db)
}

// Upsert performs an upsert for VolumeMetric.
//
// NOTE: PostgreSQL 9.5+ only
func (vm *VolumeMetric) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if vm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."volume_metric" (` +
		`"volume", "metric"` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT ("metric") DO UPDATE SET (` +
		`"volume", "metric"` +
		`) = (` +
		`EXCLUDED."volume", EXCLUDED."metric"` +
		`)`

	// run query
	XOLog(sqlstr, vm.Volume, vm.Metric)
	_, err = db.Exec(sqlstr, vm.Volume, vm.Metric)
	if err != nil {
		return err
	}

	// set existence
	vm._exists = true

	return nil
}

// Delete deletes the VolumeMetric from the database.
func (vm *VolumeMetric) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vm._exists {
		return nil
	}

	// if deleted, bail
	if vm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."volume_metric" WHERE "metric" = $1`

	// run query
	XOLog(sqlstr, vm.Metric)
	_, err = db.Exec(sqlstr, vm.Metric)
	if err != nil {
		return err
	}

	// set deleted
	vm._deleted = true

	return nil
}

// Metric returns the Metric associated with the VolumeMetric's Metric (metric).
//
// Generated from foreign key 'volume_metric_metric_fkey'.
func (vm *VolumeMetric) MetricByMetricID(db XODB) (*Metric, error) {
	return MetricByID(db, vm.Metric)
}

// Volume returns the Volume associated with the VolumeMetric's Volume (volume).
//
// Generated from foreign key 'volume_metric_volume_fkey'.
func (vm *VolumeMetric) VolumeByVolumeID(db XODB) (*Volume, error) {
	return VolumeByID(db, vm.Volume)
}

// VolumeMetricByVolumeMetric retrieves a row from '"public"."volume_metric"' as a VolumeMetric.
//
// Generated from index 'volume_metric_pkey'.
func VolumeMetricByVolumeMetric(db XODB, volume int64, metric int64) (*VolumeMetric, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"volume", "metric" ` +
		`FROM "public"."volume_metric" ` +
		`WHERE "volume" = $1 AND "metric" = $2`

	// run query
	XOLog(sqlstr, volume, metric)
	vm := VolumeMetric{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, volume, metric).Scan(&vm.Volume, &vm.Metric)
	if err != nil {
		return nil, err
	}

	return &vm, nil
}
