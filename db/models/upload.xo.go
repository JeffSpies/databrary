// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Upload represents a row from '"public"."upload"'.
type Upload struct {
	Token    string    `json:"token"`    // token
	Expires  time.Time `json:"expires"`  // expires
	Account  int64     `json:"account"`  // account
	Volume   int64     `json:"volume"`   // volume
	Filename string    `json:"filename"` // filename
	Size     int64     `json:"size"`     // size

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Upload exists in the database.
func (u *Upload) Exists() bool {
	return u._exists
}

// Deleted provides information if the Upload has been deleted from the database.
func (u *Upload) Deleted() bool {
	return u._deleted
}

// Insert inserts the Upload to the database.
func (u *Upload) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."upload" (` +
		`"token", "expires", "account", "volume", "filename", "size"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`

	// run query
	XOLog(sqlstr, u.Token, u.Expires, u.Account, u.Volume, u.Filename, u.Size)
	err = db.QueryRow(sqlstr, u.Token, u.Expires, u.Account, u.Volume, u.Filename, u.Size).Scan(&u.Token)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Update updates the Upload in the database.
func (u *Upload) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."upload" SET (` +
		`"expires", "account", "volume", "filename", "size"` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE "token" = $6`

	// run query
	XOLog(sqlstr, u.Expires, u.Account, u.Volume, u.Filename, u.Size, u.Token)
	_, err = db.Exec(sqlstr, u.Expires, u.Account, u.Volume, u.Filename, u.Size, u.Token)
	return err
}

// Save saves the Upload to the database.
func (u *Upload) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Upsert performs an upsert for Upload.
//
// NOTE: PostgreSQL 9.5+ only
func (u *Upload) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."upload" (` +
		`"token", "expires", "account", "volume", "filename", "size"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT ("token") DO UPDATE SET (` +
		`"token", "expires", "account", "volume", "filename", "size"` +
		`) = (` +
		`EXCLUDED."token", EXCLUDED."expires", EXCLUDED."account", EXCLUDED."volume", EXCLUDED."filename", EXCLUDED."size"` +
		`)`

	// run query
	XOLog(sqlstr, u.Token, u.Expires, u.Account, u.Volume, u.Filename, u.Size)
	_, err = db.Exec(sqlstr, u.Token, u.Expires, u.Account, u.Volume, u.Filename, u.Size)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Delete deletes the Upload from the database.
func (u *Upload) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."upload" WHERE "token" = $1`

	// run query
	XOLog(sqlstr, u.Token)
	_, err = db.Exec(sqlstr, u.Token)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// Account returns the Account associated with the Upload's Account (account).
//
// Generated from foreign key 'upload_account_fkey'.
func (u *Upload) AccountByAccountID(db XODB) (*Account, error) {
	return AccountByID(db, u.Account)
}

// Volume returns the Volume associated with the Upload's Volume (volume).
//
// Generated from foreign key 'upload_volume_fkey'.
func (u *Upload) VolumeByVolumeID(db XODB) (*Volume, error) {
	return VolumeByID(db, u.Volume)
}

// UploadByToken retrieves a row from '"public"."upload"' as a Upload.
//
// Generated from index 'upload_pkey'.
func UploadByToken(db XODB, token string) (*Upload, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"token", "expires", "account", "volume", "filename", "size" ` +
		`FROM "public"."upload" ` +
		`WHERE "token" = $1`

	// run query
	XOLog(sqlstr, token)
	u := Upload{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, token).Scan(&u.Token, &u.Expires, &u.Account, &u.Volume, &u.Filename, &u.Size)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
