// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/databrary/databrary/db/models/custom_types"
)

// Comment represents a row from '"public"."comment"'.
type Comment struct {
	Container int64                `json:"container"` // container
	Segment   custom_types.Segment `json:"segment"`   // segment
	ID        int64                `json:"id"`        // id
	Who       int64                `json:"who"`       // who
	Time      time.Time            `json:"time"`      // time
	Text      string               `json:"text"`      // text
	Parent    sql.NullInt64        `json:"parent"`    // parent

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Comment exists in the database.
func (c *Comment) Exists() bool {
	return c._exists
}

// Deleted provides information if the Comment has been deleted from the database.
func (c *Comment) Deleted() bool {
	return c._deleted
}

// Insert inserts the Comment to the database.
func (c *Comment) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO "public"."comment" (` +
		`"container", "segment", "who", "time", "text", "parent"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING "id"`

	// run query
	XOLog(sqlstr, c.Container, c.Segment, c.Who, c.Time, c.Text, c.Parent)
	err = db.QueryRow(sqlstr, c.Container, c.Segment, c.Who, c.Time, c.Text, c.Parent).Scan(&c.ID)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Comment in the database.
func (c *Comment) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."comment" SET (` +
		`"container", "segment", "who", "time", "text", "parent"` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE "id" = $7`

	// run query
	XOLog(sqlstr, c.Container, c.Segment, c.Who, c.Time, c.Text, c.Parent, c.ID)
	_, err = db.Exec(sqlstr, c.Container, c.Segment, c.Who, c.Time, c.Text, c.Parent, c.ID)
	return err
}

// Save saves the Comment to the database.
func (c *Comment) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Comment.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Comment) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."comment" (` +
		`"container", "segment", "id", "who", "time", "text", "parent"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"container", "segment", "id", "who", "time", "text", "parent"` +
		`) = (` +
		`EXCLUDED."container", EXCLUDED."segment", EXCLUDED."id", EXCLUDED."who", EXCLUDED."time", EXCLUDED."text", EXCLUDED."parent"` +
		`)`

	// run query
	XOLog(sqlstr, c.Container, c.Segment, c.ID, c.Who, c.Time, c.Text, c.Parent)
	_, err = db.Exec(sqlstr, c.Container, c.Segment, c.ID, c.Who, c.Time, c.Text, c.Parent)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Comment from the database.
func (c *Comment) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."comment" WHERE "id" = $1`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = db.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// Container returns the Container associated with the Comment's Container (container).
//
// Generated from foreign key 'comment_container_fkey'.
func (c *Comment) ContainerByContainerID(db XODB) (*Container, error) {
	return ContainerByID(db, c.Container)
}

// Comment returns the Comment associated with the Comment's Parent (parent).
//
// Generated from foreign key 'comment_parent_fkey'.
func (c *Comment) Comment(db XODB) (*Comment, error) {
	return CommentByID(db, c.Parent.Int64)
}

// Account returns the Account associated with the Comment's Who (who).
//
// Generated from foreign key 'comment_who_fkey'.
func (c *Comment) Account(db XODB) (*Account, error) {
	return AccountByID(db, c.Who)
}

// CommentsByParent retrieves a row from '"public"."comment"' as a Comment.
//
// Generated from index 'comment_parent_idx'.
func CommentsByParent(db XODB, parent sql.NullInt64) ([]*Comment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"container", "segment", "id", "who", "time", "text", "parent" ` +
		`FROM "public"."comment" ` +
		`WHERE "parent" = $1`

	// run query
	XOLog(sqlstr, parent)
	q, err := db.Query(sqlstr, parent)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Comment{}
	for q.Next() {
		c := Comment{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.Container, &c.Segment, &c.ID, &c.Who, &c.Time, &c.Text, &c.Parent)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// CommentByID retrieves a row from '"public"."comment"' as a Comment.
//
// Generated from index 'comment_pkey'.
func CommentByID(db XODB, id int64) (*Comment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"container", "segment", "id", "who", "time", "text", "parent" ` +
		`FROM "public"."comment" ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	c := Comment{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&c.Container, &c.Segment, &c.ID, &c.Who, &c.Time, &c.Text, &c.Parent)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// CommentsBySlot retrieves a row from '"public"."comment"' as a Comment.
//
// Generated from index 'comment_slot_idx'.
func CommentsBySlot(db XODB, container int64, segment custom_types.Segment) ([]*Comment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"container", "segment", "id", "who", "time", "text", "parent" ` +
		`FROM "public"."comment" ` +
		`WHERE "container" = $1 AND "segment" = $2`

	// run query
	XOLog(sqlstr, container, segment)
	q, err := db.Query(sqlstr, container, segment)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Comment{}
	for q.Next() {
		c := Comment{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.Container, &c.Segment, &c.ID, &c.Who, &c.Time, &c.Text, &c.Parent)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// CommentsByWho retrieves a row from '"public"."comment"' as a Comment.
//
// Generated from index 'comment_who_idx'.
func CommentsByWho(db XODB, who int64) ([]*Comment, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"container", "segment", "id", "who", "time", "text", "parent" ` +
		`FROM "public"."comment" ` +
		`WHERE "who" = $1`

	// run query
	XOLog(sqlstr, who)
	q, err := db.Query(sqlstr, who)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Comment{}
	for q.Next() {
		c := Comment{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.Container, &c.Segment, &c.ID, &c.Who, &c.Time, &c.Text, &c.Parent)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}
