// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// AccountToken represents a row from '"public"."account_token"'.
type AccountToken struct {
	Token   string    `json:"token"`   // token
	Expires time.Time `json:"expires"` // expires
	Account int64     `json:"account"` // account

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AccountToken exists in the database.
func (at *AccountToken) Exists() bool {
	return at._exists
}

// Deleted provides information if the AccountToken has been deleted from the database.
func (at *AccountToken) Deleted() bool {
	return at._deleted
}

// Insert inserts the AccountToken to the database.
func (at *AccountToken) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if at._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."account_token" (` +
		`"token", "expires", "account"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, at.Token, at.Expires, at.Account)
	err = db.QueryRow(sqlstr, at.Token, at.Expires, at.Account).Scan(&at.Token)
	if err != nil {
		return err
	}

	// set existence
	at._exists = true

	return nil
}

// Update updates the AccountToken in the database.
func (at *AccountToken) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !at._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if at._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."account_token" SET (` +
		`"expires", "account"` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE "token" = $3`

	// run query
	XOLog(sqlstr, at.Expires, at.Account, at.Token)
	_, err = db.Exec(sqlstr, at.Expires, at.Account, at.Token)
	return err
}

// Save saves the AccountToken to the database.
func (at *AccountToken) Save(db XODB) error {
	if at.Exists() {
		return at.Update(db)
	}

	return at.Insert(db)
}

// Upsert performs an upsert for AccountToken.
//
// NOTE: PostgreSQL 9.5+ only
func (at *AccountToken) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if at._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."account_token" (` +
		`"token", "expires", "account"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT ("token") DO UPDATE SET (` +
		`"token", "expires", "account"` +
		`) = (` +
		`EXCLUDED."token", EXCLUDED."expires", EXCLUDED."account"` +
		`)`

	// run query
	XOLog(sqlstr, at.Token, at.Expires, at.Account)
	_, err = db.Exec(sqlstr, at.Token, at.Expires, at.Account)
	if err != nil {
		return err
	}

	// set existence
	at._exists = true

	return nil
}

// Delete deletes the AccountToken from the database.
func (at *AccountToken) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !at._exists {
		return nil
	}

	// if deleted, bail
	if at._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."account_token" WHERE "token" = $1`

	// run query
	XOLog(sqlstr, at.Token)
	_, err = db.Exec(sqlstr, at.Token)
	if err != nil {
		return err
	}

	// set deleted
	at._deleted = true

	return nil
}

// Account returns the Account associated with the AccountToken's Account (account).
//
// Generated from foreign key 'account_token_account_fkey'.
func (at *AccountToken) AccountByAccountID(db XODB) (*Account, error) {
	return AccountByID(db, at.Account)
}

// AccountTokenByToken retrieves a row from '"public"."account_token"' as a AccountToken.
//
// Generated from index 'account_token_pkey'.
func AccountTokenByToken(db XODB, token string) (*AccountToken, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"token", "expires", "account" ` +
		`FROM "public"."account_token" ` +
		`WHERE "token" = $1`

	// run query
	XOLog(sqlstr, token)
	at := AccountToken{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, token).Scan(&at.Token, &at.Expires, &at.Account)
	if err != nil {
		return nil, err
	}

	return &at, nil
}
