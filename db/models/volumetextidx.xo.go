// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"github.com/databrary/databrary/db/models/custom_types"
)

// VolumeTextIdx represents a row from '"public"."volume_text_idx"'.
type VolumeTextIdx struct {
	Volume int64                 `json:"volume"` // volume
	Ts     custom_types.Tsvector `json:"ts"`     // ts

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VolumeTextIdx exists in the database.
func (vti *VolumeTextIdx) Exists() bool {
	return vti._exists
}

// Deleted provides information if the VolumeTextIdx has been deleted from the database.
func (vti *VolumeTextIdx) Deleted() bool {
	return vti._deleted
}

// Insert inserts the VolumeTextIdx to the database.
func (vti *VolumeTextIdx) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vti._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."volume_text_idx" (` +
		`"volume", "ts"` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, vti.Volume, vti.Ts)
	err = db.QueryRow(sqlstr, vti.Volume, vti.Ts).Scan(&vti.Volume)
	if err != nil {
		return err
	}

	// set existence
	vti._exists = true

	return nil
}

// Update updates the VolumeTextIdx in the database.
func (vti *VolumeTextIdx) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vti._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vti._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."volume_text_idx" SET (` +
		`"ts"` +
		`) = ( ` +
		`$1` +
		`) WHERE "volume" = $2`

	// run query
	XOLog(sqlstr, vti.Ts, vti.Volume)
	_, err = db.Exec(sqlstr, vti.Ts, vti.Volume)
	return err
}

// Save saves the VolumeTextIdx to the database.
func (vti *VolumeTextIdx) Save(db XODB) error {
	if vti.Exists() {
		return vti.Update(db)
	}

	return vti.Insert(db)
}

// Upsert performs an upsert for VolumeTextIdx.
//
// NOTE: PostgreSQL 9.5+ only
func (vti *VolumeTextIdx) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if vti._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."volume_text_idx" (` +
		`"volume", "ts"` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT ("volume") DO UPDATE SET (` +
		`"volume", "ts"` +
		`) = (` +
		`EXCLUDED."volume", EXCLUDED."ts"` +
		`)`

	// run query
	XOLog(sqlstr, vti.Volume, vti.Ts)
	_, err = db.Exec(sqlstr, vti.Volume, vti.Ts)
	if err != nil {
		return err
	}

	// set existence
	vti._exists = true

	return nil
}

// Delete deletes the VolumeTextIdx from the database.
func (vti *VolumeTextIdx) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vti._exists {
		return nil
	}

	// if deleted, bail
	if vti._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."volume_text_idx" WHERE "volume" = $1`

	// run query
	XOLog(sqlstr, vti.Volume)
	_, err = db.Exec(sqlstr, vti.Volume)
	if err != nil {
		return err
	}

	// set deleted
	vti._deleted = true

	return nil
}

// Volume returns the Volume associated with the VolumeTextIdx's Volume (volume).
//
// Generated from foreign key 'volume_text_idx_volume_fkey'.
func (vti *VolumeTextIdx) VolumeByVolumeID(db XODB) (*Volume, error) {
	return VolumeByID(db, vti.Volume)
}

// VolumeTextIdxByVolume retrieves a row from '"public"."volume_text_idx"' as a VolumeTextIdx.
//
// Generated from index 'volume_text_idx_pkey'.
func VolumeTextIdxByVolume(db XODB, volume int64) (*VolumeTextIdx, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"volume", "ts" ` +
		`FROM "public"."volume_text_idx" ` +
		`WHERE "volume" = $1`

	// run query
	XOLog(sqlstr, volume)
	vti := VolumeTextIdx{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, volume).Scan(&vti.Volume, &vti.Ts)
	if err != nil {
		return nil, err
	}

	return &vti, nil
}

// VolumeTextIdxesByTs retrieves a row from '"public"."volume_text_idx"' as a VolumeTextIdx.
//
// Generated from index 'volume_text_idx_ts_idx'.
func VolumeTextIdxesByTs(db XODB, ts custom_types.Tsvector) ([]*VolumeTextIdx, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"volume", "ts" ` +
		`FROM "public"."volume_text_idx" ` +
		`WHERE "ts" = $1`

	// run query
	XOLog(sqlstr, ts)
	q, err := db.Query(sqlstr, ts)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*VolumeTextIdx{}
	for q.Next() {
		vti := VolumeTextIdx{
			_exists: true,
		}

		// scan
		err = q.Scan(&vti.Volume, &vti.Ts)
		if err != nil {
			return nil, err
		}

		res = append(res, &vti)
	}

	return res, nil
}
