// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// LoginToken represents a row from '"public"."login_token"'.
type LoginToken struct {
	Token    string    `json:"token"`    // token
	Expires  time.Time `json:"expires"`  // expires
	Account  int64     `json:"account"`  // account
	Password bool      `json:"password"` // password

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the LoginToken exists in the database.
func (lt *LoginToken) Exists() bool {
	return lt._exists
}

// Deleted provides information if the LoginToken has been deleted from the database.
func (lt *LoginToken) Deleted() bool {
	return lt._deleted
}

// Insert inserts the LoginToken to the database.
func (lt *LoginToken) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if lt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."login_token" (` +
		`"token", "expires", "account", "password"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, lt.Token, lt.Expires, lt.Account, lt.Password)
	err = db.QueryRow(sqlstr, lt.Token, lt.Expires, lt.Account, lt.Password).Scan(&lt.Token)
	if err != nil {
		return err
	}

	// set existence
	lt._exists = true

	return nil
}

// Update updates the LoginToken in the database.
func (lt *LoginToken) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !lt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if lt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."login_token" SET (` +
		`"expires", "account", "password"` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE "token" = $4`

	// run query
	XOLog(sqlstr, lt.Expires, lt.Account, lt.Password, lt.Token)
	_, err = db.Exec(sqlstr, lt.Expires, lt.Account, lt.Password, lt.Token)
	return err
}

// Save saves the LoginToken to the database.
func (lt *LoginToken) Save(db XODB) error {
	if lt.Exists() {
		return lt.Update(db)
	}

	return lt.Insert(db)
}

// Upsert performs an upsert for LoginToken.
//
// NOTE: PostgreSQL 9.5+ only
func (lt *LoginToken) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if lt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."login_token" (` +
		`"token", "expires", "account", "password"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT ("token") DO UPDATE SET (` +
		`"token", "expires", "account", "password"` +
		`) = (` +
		`EXCLUDED."token", EXCLUDED."expires", EXCLUDED."account", EXCLUDED."password"` +
		`)`

	// run query
	XOLog(sqlstr, lt.Token, lt.Expires, lt.Account, lt.Password)
	_, err = db.Exec(sqlstr, lt.Token, lt.Expires, lt.Account, lt.Password)
	if err != nil {
		return err
	}

	// set existence
	lt._exists = true

	return nil
}

// Delete deletes the LoginToken from the database.
func (lt *LoginToken) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !lt._exists {
		return nil
	}

	// if deleted, bail
	if lt._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."login_token" WHERE "token" = $1`

	// run query
	XOLog(sqlstr, lt.Token)
	_, err = db.Exec(sqlstr, lt.Token)
	if err != nil {
		return err
	}

	// set deleted
	lt._deleted = true

	return nil
}

// Account returns the Account associated with the LoginToken's Account (account).
//
// Generated from foreign key 'login_token_account_fkey'.
func (lt *LoginToken) AccountByAccountID(db XODB) (*Account, error) {
	return AccountByID(db, lt.Account)
}

// LoginTokenByAccount retrieves a row from '"public"."login_token"' as a LoginToken.
//
// Generated from index 'login_token_account_idx'.
func LoginTokenByAccount(db XODB, account int64) (*LoginToken, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"token", "expires", "account", "password" ` +
		`FROM "public"."login_token" ` +
		`WHERE "account" = $1`

	// run query
	XOLog(sqlstr, account)
	lt := LoginToken{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, account).Scan(&lt.Token, &lt.Expires, &lt.Account, &lt.Password)
	if err != nil {
		return nil, err
	}

	return &lt, nil
}

// LoginTokenByToken retrieves a row from '"public"."login_token"' as a LoginToken.
//
// Generated from index 'login_token_pkey'.
func LoginTokenByToken(db XODB, token string) (*LoginToken, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"token", "expires", "account", "password" ` +
		`FROM "public"."login_token" ` +
		`WHERE "token" = $1`

	// run query
	XOLog(sqlstr, token)
	lt := LoginToken{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, token).Scan(&lt.Token, &lt.Expires, &lt.Account, &lt.Password)
	if err != nil {
		return nil, err
	}

	return &lt, nil
}
