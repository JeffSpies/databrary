// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// Tag represents a row from '"public"."tag"'.
type Tag struct {
	ID   int64  `json:"id"`   // id
	Name string `json:"name"` // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Tag exists in the database.
func (t *Tag) Exists() bool {
	return t._exists
}

// Deleted provides information if the Tag has been deleted from the database.
func (t *Tag) Deleted() bool {
	return t._deleted
}

// Insert inserts the Tag to the database.
func (t *Tag) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO "public"."tag" (` +
		`"name"` +
		`) VALUES (` +
		`$1` +
		`) RETURNING "id"`

	// run query
	XOLog(sqlstr, t.Name)
	err = db.QueryRow(sqlstr, t.Name).Scan(&t.ID)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Update updates the Tag in the database.
func (t *Tag) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."tag" SET (` +
		`"name"` +
		`) = ( ` +
		`$1` +
		`) WHERE "id" = $2`

	// run query
	XOLog(sqlstr, t.Name, t.ID)
	_, err = db.Exec(sqlstr, t.Name, t.ID)
	return err
}

// Save saves the Tag to the database.
func (t *Tag) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Insert(db)
}

// Upsert performs an upsert for Tag.
//
// NOTE: PostgreSQL 9.5+ only
func (t *Tag) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."tag" (` +
		`"id", "name"` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"id", "name"` +
		`) = (` +
		`EXCLUDED."id", EXCLUDED."name"` +
		`)`

	// run query
	XOLog(sqlstr, t.ID, t.Name)
	_, err = db.Exec(sqlstr, t.ID, t.Name)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Delete deletes the Tag from the database.
func (t *Tag) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."tag" WHERE "id" = $1`

	// run query
	XOLog(sqlstr, t.ID)
	_, err = db.Exec(sqlstr, t.ID)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

// TagByName retrieves a row from '"public"."tag"' as a Tag.
//
// Generated from index 'tag_name_key'.
func TagByName(db XODB, name string) (*Tag, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "name" ` +
		`FROM "public"."tag" ` +
		`WHERE "name" = $1`

	// run query
	XOLog(sqlstr, name)
	t := Tag{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&t.ID, &t.Name)
	if err != nil {
		return nil, err
	}

	return &t, nil
}

// TagByID retrieves a row from '"public"."tag"' as a Tag.
//
// Generated from index 'tag_pkey'.
func TagByID(db XODB, id int64) (*Tag, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "name" ` +
		`FROM "public"."tag" ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	t := Tag{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&t.ID, &t.Name)
	if err != nil {
		return nil, err
	}

	return &t, nil
}
