// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// Avatar represents a row from '"public"."avatar"'.
type Avatar struct {
	Party int64 `json:"party"` // party
	Asset int64 `json:"asset"` // asset

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Avatar exists in the database.
func (a *Avatar) Exists() bool {
	return a._exists
}

// Deleted provides information if the Avatar has been deleted from the database.
func (a *Avatar) Deleted() bool {
	return a._deleted
}

// Insert inserts the Avatar to the database.
func (a *Avatar) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."avatar" (` +
		`"party", "asset"` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, a.Party, a.Asset)
	err = db.QueryRow(sqlstr, a.Party, a.Asset).Scan(&a.Party)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Avatar in the database.
func (a *Avatar) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."avatar" SET (` +
		`"asset"` +
		`) = ( ` +
		`$1` +
		`) WHERE "party" = $2`

	// run query
	XOLog(sqlstr, a.Asset, a.Party)
	_, err = db.Exec(sqlstr, a.Asset, a.Party)
	return err
}

// Save saves the Avatar to the database.
func (a *Avatar) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Avatar.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Avatar) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."avatar" (` +
		`"party", "asset"` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT ("party") DO UPDATE SET (` +
		`"party", "asset"` +
		`) = (` +
		`EXCLUDED."party", EXCLUDED."asset"` +
		`)`

	// run query
	XOLog(sqlstr, a.Party, a.Asset)
	_, err = db.Exec(sqlstr, a.Party, a.Asset)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Avatar from the database.
func (a *Avatar) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."avatar" WHERE "party" = $1`

	// run query
	XOLog(sqlstr, a.Party)
	_, err = db.Exec(sqlstr, a.Party)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// Asset returns the Asset associated with the Avatar's Asset (asset).
//
// Generated from foreign key 'avatar_asset_fkey'.
func (a *Avatar) AssetByAssetID(db XODB) (*Asset, error) {
	return AssetByID(db, a.Asset)
}

// Party returns the Party associated with the Avatar's Party (party).
//
// Generated from foreign key 'avatar_party_fkey'.
func (a *Avatar) PartyByPartyID(db XODB) (*Party, error) {
	return PartyByID(db, a.Party)
}

// AvatarByParty retrieves a row from '"public"."avatar"' as a Avatar.
//
// Generated from index 'avatar_pkey'.
func AvatarByParty(db XODB, party int64) (*Avatar, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"party", "asset" ` +
		`FROM "public"."avatar" ` +
		`WHERE "party" = $1`

	// run query
	XOLog(sqlstr, party)
	a := Avatar{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, party).Scan(&a.Party, &a.Asset)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
