// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"

	"github.com/lib/pq"
)

// Authorize represents a row from '"public"."authorize"'.
type Authorize struct {
	Child   int64       `json:"child"`   // child
	Parent  int64       `json:"parent"`  // parent
	Site    Permission  `json:"site"`    // site
	Member  Permission  `json:"member"`  // member
	Expires pq.NullTime `json:"expires"` // expires

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Authorize exists in the database.
func (a *Authorize) Exists() bool {
	return a._exists
}

// Deleted provides information if the Authorize has been deleted from the database.
func (a *Authorize) Deleted() bool {
	return a._deleted
}

// Insert inserts the Authorize to the database.
func (a *Authorize) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."authorize" (` +
		`"child", "parent", "site", "member", "expires"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)`

	// run query
	XOLog(sqlstr, a.Child, a.Parent, a.Site, a.Member, a.Expires)
	err = db.QueryRow(sqlstr, a.Child, a.Parent, a.Site, a.Member, a.Expires).Scan(&a.Parent)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Authorize in the database.
func (a *Authorize) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."authorize" SET (` +
		`"child", "site", "member", "expires"` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE "parent" = $5`

	// run query
	XOLog(sqlstr, a.Child, a.Site, a.Member, a.Expires, a.Parent)
	_, err = db.Exec(sqlstr, a.Child, a.Site, a.Member, a.Expires, a.Parent)
	return err
}

// Save saves the Authorize to the database.
func (a *Authorize) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Authorize.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Authorize) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."authorize" (` +
		`"child", "parent", "site", "member", "expires"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT ("parent") DO UPDATE SET (` +
		`"child", "parent", "site", "member", "expires"` +
		`) = (` +
		`EXCLUDED."child", EXCLUDED."parent", EXCLUDED."site", EXCLUDED."member", EXCLUDED."expires"` +
		`)`

	// run query
	XOLog(sqlstr, a.Child, a.Parent, a.Site, a.Member, a.Expires)
	_, err = db.Exec(sqlstr, a.Child, a.Parent, a.Site, a.Member, a.Expires)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Authorize from the database.
func (a *Authorize) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."authorize" WHERE "parent" = $1`

	// run query
	XOLog(sqlstr, a.Parent)
	_, err = db.Exec(sqlstr, a.Parent)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// PartyByChild returns the Party associated with the Authorize's Child (child).
//
// Generated from foreign key 'authorize_child_fkey'.
func (a *Authorize) PartyByChild(db XODB) (*Party, error) {
	return PartyByID(db, a.Child)
}

// PartyByParent returns the Party associated with the Authorize's Parent (parent).
//
// Generated from foreign key 'authorize_parent_fkey'.
func (a *Authorize) PartyByParent(db XODB) (*Party, error) {
	return PartyByID(db, a.Parent)
}

// AuthorizeByParentChild retrieves a row from '"public"."authorize"' as a Authorize.
//
// Generated from index 'authorize_pkey'.
func AuthorizeByParentChild(db XODB, parent int64, child int64) (*Authorize, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"child", "parent", "site", "member", "expires" ` +
		`FROM "public"."authorize" ` +
		`WHERE "parent" = $1 AND "child" = $2`

	// run query
	XOLog(sqlstr, parent, child)
	a := Authorize{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, parent, child).Scan(&a.Child, &a.Parent, &a.Site, &a.Member, &a.Expires)
	if err != nil {
		return nil, err
	}

	return &a, nil
}
