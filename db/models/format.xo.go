// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// Format represents a row from '"public"."format"'.
type Format struct {
	ID        int16       `json:"id"`        // id
	Mimetype  string      `json:"mimetype"`  // mimetype
	Extension StringSlice `json:"extension"` // extension
	Name      string      `json:"name"`      // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Format exists in the database.
func (f *Format) Exists() bool {
	return f._exists
}

// Deleted provides information if the Format has been deleted from the database.
func (f *Format) Deleted() bool {
	return f._deleted
}

// Insert inserts the Format to the database.
func (f *Format) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO "public"."format" (` +
		`"mimetype", "extension", "name"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING "id"`

	// run query
	XOLog(sqlstr, f.Mimetype, f.Extension, f.Name)
	err = db.QueryRow(sqlstr, f.Mimetype, f.Extension, f.Name).Scan(&f.ID)
	if err != nil {
		return err
	}

	// set existence
	f._exists = true

	return nil
}

// Update updates the Format in the database.
func (f *Format) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if f._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."format" SET (` +
		`"mimetype", "extension", "name"` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE "id" = $4`

	// run query
	XOLog(sqlstr, f.Mimetype, f.Extension, f.Name, f.ID)
	_, err = db.Exec(sqlstr, f.Mimetype, f.Extension, f.Name, f.ID)
	return err
}

// Save saves the Format to the database.
func (f *Format) Save(db XODB) error {
	if f.Exists() {
		return f.Update(db)
	}

	return f.Insert(db)
}

// Upsert performs an upsert for Format.
//
// NOTE: PostgreSQL 9.5+ only
func (f *Format) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."format" (` +
		`"id", "mimetype", "extension", "name"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"id", "mimetype", "extension", "name"` +
		`) = (` +
		`EXCLUDED."id", EXCLUDED."mimetype", EXCLUDED."extension", EXCLUDED."name"` +
		`)`

	// run query
	XOLog(sqlstr, f.ID, f.Mimetype, f.Extension, f.Name)
	_, err = db.Exec(sqlstr, f.ID, f.Mimetype, f.Extension, f.Name)
	if err != nil {
		return err
	}

	// set existence
	f._exists = true

	return nil
}

// Delete deletes the Format from the database.
func (f *Format) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return nil
	}

	// if deleted, bail
	if f._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."format" WHERE "id" = $1`

	// run query
	XOLog(sqlstr, f.ID)
	_, err = db.Exec(sqlstr, f.ID)
	if err != nil {
		return err
	}

	// set deleted
	f._deleted = true

	return nil
}

// FormatByMimetype retrieves a row from '"public"."format"' as a Format.
//
// Generated from index 'format_mimetype_key'.
func FormatByMimetype(db XODB, mimetype string) (*Format, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "mimetype", "extension", "name" ` +
		`FROM "public"."format" ` +
		`WHERE "mimetype" = $1`

	// run query
	XOLog(sqlstr, mimetype)
	f := Format{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, mimetype).Scan(&f.ID, &f.Mimetype, &f.Extension, &f.Name)
	if err != nil {
		return nil, err
	}

	return &f, nil
}

// FormatByID retrieves a row from '"public"."format"' as a Format.
//
// Generated from index 'format_pkey'.
func FormatByID(db XODB, id int16) (*Format, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "mimetype", "extension", "name" ` +
		`FROM "public"."format" ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	f := Format{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&f.ID, &f.Mimetype, &f.Extension, &f.Name)
	if err != nil {
		return nil, err
	}

	return &f, nil
}
