// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Volume represents a row from '"public"."volume"'.
type Volume struct {
	ID    int64          `json:"id"`    // id
	Name  string         `json:"name"`  // name
	Body  sql.NullString `json:"body"`  // body
	Alias sql.NullString `json:"alias"` // alias
	Doi   sql.NullString `json:"doi"`   // doi

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Volume exists in the database.
func (v *Volume) Exists() bool {
	return v._exists
}

// Deleted provides information if the Volume has been deleted from the database.
func (v *Volume) Deleted() bool {
	return v._deleted
}

// Insert inserts the Volume to the database.
func (v *Volume) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if v._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO "public"."volume" (` +
		`"name", "body", "alias", "doi"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING "id"`

	// run query
	XOLog(sqlstr, v.Name, v.Body, v.Alias, v.Doi)
	err = db.QueryRow(sqlstr, v.Name, v.Body, v.Alias, v.Doi).Scan(&v.ID)
	if err != nil {
		return err
	}

	// set existence
	v._exists = true

	return nil
}

// Update updates the Volume in the database.
func (v *Volume) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !v._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if v._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."volume" SET (` +
		`"name", "body", "alias", "doi"` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE "id" = $5`

	// run query
	XOLog(sqlstr, v.Name, v.Body, v.Alias, v.Doi, v.ID)
	_, err = db.Exec(sqlstr, v.Name, v.Body, v.Alias, v.Doi, v.ID)
	return err
}

// Save saves the Volume to the database.
func (v *Volume) Save(db XODB) error {
	if v.Exists() {
		return v.Update(db)
	}

	return v.Insert(db)
}

// Upsert performs an upsert for Volume.
//
// NOTE: PostgreSQL 9.5+ only
func (v *Volume) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if v._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."volume" (` +
		`"id", "name", "body", "alias", "doi"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"id", "name", "body", "alias", "doi"` +
		`) = (` +
		`EXCLUDED."id", EXCLUDED."name", EXCLUDED."body", EXCLUDED."alias", EXCLUDED."doi"` +
		`)`

	// run query
	XOLog(sqlstr, v.ID, v.Name, v.Body, v.Alias, v.Doi)
	_, err = db.Exec(sqlstr, v.ID, v.Name, v.Body, v.Alias, v.Doi)
	if err != nil {
		return err
	}

	// set existence
	v._exists = true

	return nil
}

// Delete deletes the Volume from the database.
func (v *Volume) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !v._exists {
		return nil
	}

	// if deleted, bail
	if v._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."volume" WHERE "id" = $1`

	// run query
	XOLog(sqlstr, v.ID)
	_, err = db.Exec(sqlstr, v.ID)
	if err != nil {
		return err
	}

	// set deleted
	v._deleted = true

	return nil
}

// VolumeByDoi retrieves a row from '"public"."volume"' as a Volume.
//
// Generated from index 'volume_doi_key'.
func VolumeByDoi(db XODB, doi sql.NullString) (*Volume, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "name", "body", "alias", "doi" ` +
		`FROM "public"."volume" ` +
		`WHERE "doi" = $1`

	// run query
	XOLog(sqlstr, doi)
	v := Volume{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, doi).Scan(&v.ID, &v.Name, &v.Body, &v.Alias, &v.Doi)
	if err != nil {
		return nil, err
	}

	return &v, nil
}

// VolumeByID retrieves a row from '"public"."volume"' as a Volume.
//
// Generated from index 'volume_pkey'.
func VolumeByID(db XODB, id int64) (*Volume, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "name", "body", "alias", "doi" ` +
		`FROM "public"."volume" ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	v := Volume{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&v.ID, &v.Name, &v.Body, &v.Alias, &v.Doi)
	if err != nil {
		return nil, err
	}

	return &v, nil
}
