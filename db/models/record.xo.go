// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// Record represents a row from '"public"."record"'.
type Record struct {
	ID       int64 `json:"id"`       // id
	Volume   int64 `json:"volume"`   // volume
	Category int16 `json:"category"` // category

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Record exists in the database.
func (r *Record) Exists() bool {
	return r._exists
}

// Deleted provides information if the Record has been deleted from the database.
func (r *Record) Deleted() bool {
	return r._deleted
}

// Insert inserts the Record to the database.
func (r *Record) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO "public"."record" (` +
		`"volume", "category"` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING "id"`

	// run query
	XOLog(sqlstr, r.Volume, r.Category)
	err = db.QueryRow(sqlstr, r.Volume, r.Category).Scan(&r.ID)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Update updates the Record in the database.
func (r *Record) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."record" SET (` +
		`"volume", "category"` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE "id" = $3`

	// run query
	XOLog(sqlstr, r.Volume, r.Category, r.ID)
	_, err = db.Exec(sqlstr, r.Volume, r.Category, r.ID)
	return err
}

// Save saves the Record to the database.
func (r *Record) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Upsert performs an upsert for Record.
//
// NOTE: PostgreSQL 9.5+ only
func (r *Record) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."record" (` +
		`"id", "volume", "category"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"id", "volume", "category"` +
		`) = (` +
		`EXCLUDED."id", EXCLUDED."volume", EXCLUDED."category"` +
		`)`

	// run query
	XOLog(sqlstr, r.ID, r.Volume, r.Category)
	_, err = db.Exec(sqlstr, r.ID, r.Volume, r.Category)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Delete deletes the Record from the database.
func (r *Record) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."record" WHERE "id" = $1`

	// run query
	XOLog(sqlstr, r.ID)
	_, err = db.Exec(sqlstr, r.ID)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// Category returns the Category associated with the Record's Category (category).
//
// Generated from foreign key 'record_category_fkey'.
func (r *Record) CategoryByCategoryID(db XODB) (*Category, error) {
	return CategoryByID(db, r.Category)
}

// Volume returns the Volume associated with the Record's Volume (volume).
//
// Generated from foreign key 'record_volume_fkey'.
func (r *Record) VolumeByVolumeID(db XODB) (*Volume, error) {
	return VolumeByID(db, r.Volume)
}

// RecordByID retrieves a row from '"public"."record"' as a Record.
//
// Generated from index 'record_pkey'.
func RecordByID(db XODB, id int64) (*Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "volume", "category" ` +
		`FROM "public"."record" ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	r := Record{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&r.ID, &r.Volume, &r.Category)
	if err != nil {
		return nil, err
	}

	return &r, nil
}

// RecordsByVolume retrieves a row from '"public"."record"' as a Record.
//
// Generated from index 'record_volume_idx'.
func RecordsByVolume(db XODB, volume int64) ([]*Record, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "volume", "category" ` +
		`FROM "public"."record" ` +
		`WHERE "volume" = $1`

	// run query
	XOLog(sqlstr, volume)
	q, err := db.Query(sqlstr, volume)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Record{}
	for q.Next() {
		r := Record{
			_exists: true,
		}

		// scan
		err = q.Scan(&r.ID, &r.Volume, &r.Category)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}
