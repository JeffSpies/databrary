// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"

	"github.com/databrary/databrary/db/models/custom_types"
)

// TagUse represents a row from '"public"."tag_use"'.
type TagUse struct {
	Container int64                `json:"container"` // container
	Segment   custom_types.Segment `json:"segment"`   // segment
	Tag       int64                `json:"tag"`       // tag
	Who       int64                `json:"who"`       // who

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TagUse exists in the database.
func (tu *TagUse) Exists() bool {
	return tu._exists
}

// Deleted provides information if the TagUse has been deleted from the database.
func (tu *TagUse) Deleted() bool {
	return tu._deleted
}

// Insert inserts the TagUse to the database.
func (tu *TagUse) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."tag_use" (` +
		`"container", "segment", "tag", "who"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, tu.Container, tu.Segment, tu.Tag, tu.Who)
	err = db.QueryRow(sqlstr, tu.Container, tu.Segment, tu.Tag, tu.Who).Scan(&tu.Who)
	if err != nil {
		return err
	}

	// set existence
	tu._exists = true

	return nil
}

// Update updates the TagUse in the database.
func (tu *TagUse) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tu._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tu._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."tag_use" SET (` +
		`"container", "segment", "tag"` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE "who" = $4`

	// run query
	XOLog(sqlstr, tu.Container, tu.Segment, tu.Tag, tu.Who)
	_, err = db.Exec(sqlstr, tu.Container, tu.Segment, tu.Tag, tu.Who)
	return err
}

// Save saves the TagUse to the database.
func (tu *TagUse) Save(db XODB) error {
	if tu.Exists() {
		return tu.Update(db)
	}

	return tu.Insert(db)
}

// Upsert performs an upsert for TagUse.
//
// NOTE: PostgreSQL 9.5+ only
func (tu *TagUse) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if tu._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."tag_use" (` +
		`"container", "segment", "tag", "who"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT ("who") DO UPDATE SET (` +
		`"container", "segment", "tag", "who"` +
		`) = (` +
		`EXCLUDED."container", EXCLUDED."segment", EXCLUDED."tag", EXCLUDED."who"` +
		`)`

	// run query
	XOLog(sqlstr, tu.Container, tu.Segment, tu.Tag, tu.Who)
	_, err = db.Exec(sqlstr, tu.Container, tu.Segment, tu.Tag, tu.Who)
	if err != nil {
		return err
	}

	// set existence
	tu._exists = true

	return nil
}

// Delete deletes the TagUse from the database.
func (tu *TagUse) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tu._exists {
		return nil
	}

	// if deleted, bail
	if tu._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."tag_use" WHERE "who" = $1`

	// run query
	XOLog(sqlstr, tu.Who)
	_, err = db.Exec(sqlstr, tu.Who)
	if err != nil {
		return err
	}

	// set deleted
	tu._deleted = true

	return nil
}

// Container returns the Container associated with the TagUse's Container (container).
//
// Generated from foreign key 'tag_use_container_fkey'.
func (tu *TagUse) ContainerByContainerID(db XODB) (*Container, error) {
	return ContainerByID(db, tu.Container)
}

// Tag returns the Tag associated with the TagUse's Tag (tag).
//
// Generated from foreign key 'tag_use_tag_fkey'.
func (tu *TagUse) TagByTagID(db XODB) (*Tag, error) {
	return TagByID(db, tu.Tag)
}

// Account returns the Account associated with the TagUse's Who (who).
//
// Generated from foreign key 'tag_use_who_fkey'.
func (tu *TagUse) Account(db XODB) (*Account, error) {
	return AccountByID(db, tu.Who)
}

// TagUseByTagWhoContainerSegment retrieves a row from '"public"."tag_use"' as a TagUse.
//
// Generated from index 'tag_use_pkey'.
func TagUseByTagWhoContainerSegment(db XODB, tag int64, who int64, container int64, segment custom_types.Segment) (*TagUse, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"container", "segment", "tag", "who" ` +
		`FROM "public"."tag_use" ` +
		`WHERE "tag" = $1 AND "who" = $2 AND "container" = $3 AND "segment" = $4`

	// run query
	XOLog(sqlstr, tag, who, container, segment)
	tu := TagUse{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, tag, who, container, segment).Scan(&tu.Container, &tu.Segment, &tu.Tag, &tu.Who)
	if err != nil {
		return nil, err
	}

	return &tu, nil
}

// TagUsesBySlot retrieves a row from '"public"."tag_use"' as a TagUse.
//
// Generated from index 'tag_use_slot_idx'.
func TagUsesBySlot(db XODB, container int64, segment custom_types.Segment) ([]*TagUse, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"container", "segment", "tag", "who" ` +
		`FROM "public"."tag_use" ` +
		`WHERE "container" = $1 AND "segment" = $2`

	// run query
	XOLog(sqlstr, container, segment)
	q, err := db.Query(sqlstr, container, segment)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*TagUse{}
	for q.Next() {
		tu := TagUse{
			_exists: true,
		}

		// scan
		err = q.Scan(&tu.Container, &tu.Segment, &tu.Tag, &tu.Who)
		if err != nil {
			return nil, err
		}

		res = append(res, &tu)
	}

	return res, nil
}

// TagUsesByWho retrieves a row from '"public"."tag_use"' as a TagUse.
//
// Generated from index 'tag_use_who_idx'.
func TagUsesByWho(db XODB, who int64) ([]*TagUse, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"container", "segment", "tag", "who" ` +
		`FROM "public"."tag_use" ` +
		`WHERE "who" = $1`

	// run query
	XOLog(sqlstr, who)
	q, err := db.Query(sqlstr, who)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*TagUse{}
	for q.Next() {
		tu := TagUse{
			_exists: true,
		}

		// scan
		err = q.Scan(&tu.Container, &tu.Segment, &tu.Tag, &tu.Who)
		if err != nil {
			return nil, err
		}

		res = append(res, &tu)
	}

	return res, nil
}
