// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// VolumeOwner represents a row from '"public"."volume_owners"'.
type VolumeOwner struct {
	Volume int64       `json:"volume"` // volume
	Owners StringSlice `json:"owners"` // owners

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the VolumeOwner exists in the database.
func (vo *VolumeOwner) Exists() bool {
	return vo._exists
}

// Deleted provides information if the VolumeOwner has been deleted from the database.
func (vo *VolumeOwner) Deleted() bool {
	return vo._deleted
}

// Insert inserts the VolumeOwner to the database.
func (vo *VolumeOwner) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if vo._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."volume_owners" (` +
		`"volume", "owners"` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, vo.Volume, vo.Owners)
	err = db.QueryRow(sqlstr, vo.Volume, vo.Owners).Scan(&vo.Volume)
	if err != nil {
		return err
	}

	// set existence
	vo._exists = true

	return nil
}

// Update updates the VolumeOwner in the database.
func (vo *VolumeOwner) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vo._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if vo._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."volume_owners" SET (` +
		`"owners"` +
		`) = ( ` +
		`$1` +
		`) WHERE "volume" = $2`

	// run query
	XOLog(sqlstr, vo.Owners, vo.Volume)
	_, err = db.Exec(sqlstr, vo.Owners, vo.Volume)
	return err
}

// Save saves the VolumeOwner to the database.
func (vo *VolumeOwner) Save(db XODB) error {
	if vo.Exists() {
		return vo.Update(db)
	}

	return vo.Insert(db)
}

// Upsert performs an upsert for VolumeOwner.
//
// NOTE: PostgreSQL 9.5+ only
func (vo *VolumeOwner) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if vo._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."volume_owners" (` +
		`"volume", "owners"` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT ("volume") DO UPDATE SET (` +
		`"volume", "owners"` +
		`) = (` +
		`EXCLUDED."volume", EXCLUDED."owners"` +
		`)`

	// run query
	XOLog(sqlstr, vo.Volume, vo.Owners)
	_, err = db.Exec(sqlstr, vo.Volume, vo.Owners)
	if err != nil {
		return err
	}

	// set existence
	vo._exists = true

	return nil
}

// Delete deletes the VolumeOwner from the database.
func (vo *VolumeOwner) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !vo._exists {
		return nil
	}

	// if deleted, bail
	if vo._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."volume_owners" WHERE "volume" = $1`

	// run query
	XOLog(sqlstr, vo.Volume)
	_, err = db.Exec(sqlstr, vo.Volume)
	if err != nil {
		return err
	}

	// set deleted
	vo._deleted = true

	return nil
}

// Volume returns the Volume associated with the VolumeOwner's Volume (volume).
//
// Generated from foreign key 'volume_owners_volume_fkey'.
func (vo *VolumeOwner) VolumeByVolumeID(db XODB) (*Volume, error) {
	return VolumeByID(db, vo.Volume)
}

// VolumeOwnerByVolume retrieves a row from '"public"."volume_owners"' as a VolumeOwner.
//
// Generated from index 'volume_owners_pkey'.
func VolumeOwnerByVolume(db XODB, volume int64) (*VolumeOwner, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"volume", "owners" ` +
		`FROM "public"."volume_owners" ` +
		`WHERE "volume" = $1`

	// run query
	XOLog(sqlstr, volume)
	vo := VolumeOwner{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, volume).Scan(&vo.Volume, &vo.Owners)
	if err != nil {
		return nil, err
	}

	return &vo, nil
}
