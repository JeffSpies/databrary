// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"

	"github.com/databrary/databrary/db/models/custom_types"
)

// SlotAsset represents a row from '"public"."slot_asset"'.
type SlotAsset struct {
	Container int64                `json:"container"` // container
	Segment   custom_types.Segment `json:"segment"`   // segment
	Asset     int64                `json:"asset"`     // asset

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SlotAsset exists in the database.
func (sa *SlotAsset) Exists() bool {
	return sa._exists
}

// Deleted provides information if the SlotAsset has been deleted from the database.
func (sa *SlotAsset) Deleted() bool {
	return sa._deleted
}

// Insert inserts the SlotAsset to the database.
func (sa *SlotAsset) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if sa._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."slot_asset" (` +
		`"container", "segment", "asset"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, sa.Container, sa.Segment, sa.Asset)
	err = db.QueryRow(sqlstr, sa.Container, sa.Segment, sa.Asset).Scan(&sa.Asset)
	if err != nil {
		return err
	}

	// set existence
	sa._exists = true

	return nil
}

// Update updates the SlotAsset in the database.
func (sa *SlotAsset) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sa._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if sa._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."slot_asset" SET (` +
		`"container", "segment"` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE "asset" = $3`

	// run query
	XOLog(sqlstr, sa.Container, sa.Segment, sa.Asset)
	_, err = db.Exec(sqlstr, sa.Container, sa.Segment, sa.Asset)
	return err
}

// Save saves the SlotAsset to the database.
func (sa *SlotAsset) Save(db XODB) error {
	if sa.Exists() {
		return sa.Update(db)
	}

	return sa.Insert(db)
}

// Upsert performs an upsert for SlotAsset.
//
// NOTE: PostgreSQL 9.5+ only
func (sa *SlotAsset) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if sa._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."slot_asset" (` +
		`"container", "segment", "asset"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT ("asset") DO UPDATE SET (` +
		`"container", "segment", "asset"` +
		`) = (` +
		`EXCLUDED."container", EXCLUDED."segment", EXCLUDED."asset"` +
		`)`

	// run query
	XOLog(sqlstr, sa.Container, sa.Segment, sa.Asset)
	_, err = db.Exec(sqlstr, sa.Container, sa.Segment, sa.Asset)
	if err != nil {
		return err
	}

	// set existence
	sa._exists = true

	return nil
}

// Delete deletes the SlotAsset from the database.
func (sa *SlotAsset) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sa._exists {
		return nil
	}

	// if deleted, bail
	if sa._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."slot_asset" WHERE "asset" = $1`

	// run query
	XOLog(sqlstr, sa.Asset)
	_, err = db.Exec(sqlstr, sa.Asset)
	if err != nil {
		return err
	}

	// set deleted
	sa._deleted = true

	return nil
}

// Asset returns the Asset associated with the SlotAsset's Asset (asset).
//
// Generated from foreign key 'slot_asset_asset_fkey'.
func (sa *SlotAsset) AssetByAssetID(db XODB) (*Asset, error) {
	return AssetByID(db, sa.Asset)
}

// Container returns the Container associated with the SlotAsset's Container (container).
//
// Generated from foreign key 'slot_asset_container_fkey'.
func (sa *SlotAsset) ContainerByContainerID(db XODB) (*Container, error) {
	return ContainerByID(db, sa.Container)
}

// SlotAssetByAsset retrieves a row from '"public"."slot_asset"' as a SlotAsset.
//
// Generated from index 'slot_asset_pkey'.
func SlotAssetByAsset(db XODB, asset int64) (*SlotAsset, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"container", "segment", "asset" ` +
		`FROM "public"."slot_asset" ` +
		`WHERE "asset" = $1`

	// run query
	XOLog(sqlstr, asset)
	sa := SlotAsset{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, asset).Scan(&sa.Container, &sa.Segment, &sa.Asset)
	if err != nil {
		return nil, err
	}

	return &sa, nil
}

// SlotAssetsBySlot retrieves a row from '"public"."slot_asset"' as a SlotAsset.
//
// Generated from index 'slot_asset_slot_idx'.
func SlotAssetsBySlot(db XODB, container int64, segment custom_types.Segment) ([]*SlotAsset, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"container", "segment", "asset" ` +
		`FROM "public"."slot_asset" ` +
		`WHERE "container" = $1 AND "segment" = $2`

	// run query
	XOLog(sqlstr, container, segment)
	q, err := db.Query(sqlstr, container, segment)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*SlotAsset{}
	for q.Next() {
		sa := SlotAsset{
			_exists: true,
		}

		// scan
		err = q.Scan(&sa.Container, &sa.Segment, &sa.Asset)
		if err != nil {
			return nil, err
		}

		res = append(res, &sa)
	}

	return res, nil
}
