// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// Notice represents a row from '"public"."notice"'.
type Notice struct {
	ID       int16          `json:"id"`       // id
	Name     string         `json:"name"`     // name
	Delivery NoticeDelivery `json:"delivery"` // delivery

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Notice exists in the database.
func (n *Notice) Exists() bool {
	return n._exists
}

// Deleted provides information if the Notice has been deleted from the database.
func (n *Notice) Deleted() bool {
	return n._deleted
}

// Insert inserts the Notice to the database.
func (n *Notice) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if n._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO "public"."notice" (` +
		`"name", "delivery"` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING "id"`

	// run query
	XOLog(sqlstr, n.Name, n.Delivery)
	err = db.QueryRow(sqlstr, n.Name, n.Delivery).Scan(&n.ID)
	if err != nil {
		return err
	}

	// set existence
	n._exists = true

	return nil
}

// Update updates the Notice in the database.
func (n *Notice) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if n._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."notice" SET (` +
		`"name", "delivery"` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE "id" = $3`

	// run query
	XOLog(sqlstr, n.Name, n.Delivery, n.ID)
	_, err = db.Exec(sqlstr, n.Name, n.Delivery, n.ID)
	return err
}

// Save saves the Notice to the database.
func (n *Notice) Save(db XODB) error {
	if n.Exists() {
		return n.Update(db)
	}

	return n.Insert(db)
}

// Upsert performs an upsert for Notice.
//
// NOTE: PostgreSQL 9.5+ only
func (n *Notice) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if n._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."notice" (` +
		`"id", "name", "delivery"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"id", "name", "delivery"` +
		`) = (` +
		`EXCLUDED."id", EXCLUDED."name", EXCLUDED."delivery"` +
		`)`

	// run query
	XOLog(sqlstr, n.ID, n.Name, n.Delivery)
	_, err = db.Exec(sqlstr, n.ID, n.Name, n.Delivery)
	if err != nil {
		return err
	}

	// set existence
	n._exists = true

	return nil
}

// Delete deletes the Notice from the database.
func (n *Notice) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !n._exists {
		return nil
	}

	// if deleted, bail
	if n._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."notice" WHERE "id" = $1`

	// run query
	XOLog(sqlstr, n.ID)
	_, err = db.Exec(sqlstr, n.ID)
	if err != nil {
		return err
	}

	// set deleted
	n._deleted = true

	return nil
}

// NoticeByName retrieves a row from '"public"."notice"' as a Notice.
//
// Generated from index 'notice_name_key'.
func NoticeByName(db XODB, name string) (*Notice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "name", "delivery" ` +
		`FROM "public"."notice" ` +
		`WHERE "name" = $1`

	// run query
	XOLog(sqlstr, name)
	n := Notice{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&n.ID, &n.Name, &n.Delivery)
	if err != nil {
		return nil, err
	}

	return &n, nil
}

// NoticeByID retrieves a row from '"public"."notice"' as a Notice.
//
// Generated from index 'notice_pkey'.
func NoticeByID(db XODB, id int16) (*Notice, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "name", "delivery" ` +
		`FROM "public"."notice" ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	n := Notice{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&n.ID, &n.Name, &n.Delivery)
	if err != nil {
		return nil, err
	}

	return &n, nil
}
