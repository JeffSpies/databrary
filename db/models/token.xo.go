// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Token represents a row from '"public"."token"'.
type Token struct {
	Token   string    `json:"token"`   // token
	Expires time.Time `json:"expires"` // expires

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Token exists in the database.
func (t *Token) Exists() bool {
	return t._exists
}

// Deleted provides information if the Token has been deleted from the database.
func (t *Token) Deleted() bool {
	return t._deleted
}

// Insert inserts the Token to the database.
func (t *Token) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."token" (` +
		`"token", "expires"` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, t.Token, t.Expires)
	err = db.QueryRow(sqlstr, t.Token, t.Expires).Scan(&t.Token)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Update updates the Token in the database.
func (t *Token) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."token" SET (` +
		`"expires"` +
		`) = ( ` +
		`$1` +
		`) WHERE "token" = $2`

	// run query
	XOLog(sqlstr, t.Expires, t.Token)
	_, err = db.Exec(sqlstr, t.Expires, t.Token)
	return err
}

// Save saves the Token to the database.
func (t *Token) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Insert(db)
}

// Upsert performs an upsert for Token.
//
// NOTE: PostgreSQL 9.5+ only
func (t *Token) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."token" (` +
		`"token", "expires"` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT ("token") DO UPDATE SET (` +
		`"token", "expires"` +
		`) = (` +
		`EXCLUDED."token", EXCLUDED."expires"` +
		`)`

	// run query
	XOLog(sqlstr, t.Token, t.Expires)
	_, err = db.Exec(sqlstr, t.Token, t.Expires)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Delete deletes the Token from the database.
func (t *Token) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."token" WHERE "token" = $1`

	// run query
	XOLog(sqlstr, t.Token)
	_, err = db.Exec(sqlstr, t.Token)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

// TokenByToken retrieves a row from '"public"."token"' as a Token.
//
// Generated from index 'token_pkey'.
func TokenByToken(db XODB, token string) (*Token, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"token", "expires" ` +
		`FROM "public"."token" ` +
		`WHERE "token" = $1`

	// run query
	XOLog(sqlstr, token)
	t := Token{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, token).Scan(&t.Token, &t.Expires)
	if err != nil {
		return nil, err
	}

	return &t, nil
}
