// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testRecords(t *testing.T) {
	t.Parallel()

	query := Records(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testRecordsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	record := &Record{}
	if err = randomize.Struct(seed, record, recordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = record.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = record.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Records(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecordsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	record := &Record{}
	if err = randomize.Struct(seed, record, recordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = record.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Records(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Records(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecordsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	record := &Record{}
	if err = randomize.Struct(seed, record, recordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = record.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RecordSlice{record}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Records(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testRecordsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	record := &Record{}
	if err = randomize.Struct(seed, record, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = record.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := RecordExists(tx, record.ID)
	if err != nil {
		t.Errorf("Unable to check if Record exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RecordExistsG to return true, but got false.")
	}
}
func testRecordsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	record := &Record{}
	if err = randomize.Struct(seed, record, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = record.Insert(tx); err != nil {
		t.Error(err)
	}

	recordFound, err := FindRecord(tx, record.ID)
	if err != nil {
		t.Error(err)
	}

	if recordFound == nil {
		t.Error("want a record, got nil")
	}
}
func testRecordsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	record := &Record{}
	if err = randomize.Struct(seed, record, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = record.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Records(tx).Bind(record); err != nil {
		t.Error(err)
	}
}

func testRecordsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	record := &Record{}
	if err = randomize.Struct(seed, record, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = record.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Records(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRecordsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	recordOne := &Record{}
	recordTwo := &Record{}
	if err = randomize.Struct(seed, recordOne, recordDBTypes, false, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}
	if err = randomize.Struct(seed, recordTwo, recordDBTypes, false, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = recordOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = recordTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Records(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRecordsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	recordOne := &Record{}
	recordTwo := &Record{}
	if err = randomize.Struct(seed, recordOne, recordDBTypes, false, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}
	if err = randomize.Struct(seed, recordTwo, recordDBTypes, false, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = recordOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = recordTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Records(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func recordBeforeInsertHook(e boil.Executor, o *Record) error {
	*o = Record{}
	return nil
}

func recordAfterInsertHook(e boil.Executor, o *Record) error {
	*o = Record{}
	return nil
}

func recordAfterSelectHook(e boil.Executor, o *Record) error {
	*o = Record{}
	return nil
}

func recordBeforeUpdateHook(e boil.Executor, o *Record) error {
	*o = Record{}
	return nil
}

func recordAfterUpdateHook(e boil.Executor, o *Record) error {
	*o = Record{}
	return nil
}

func recordBeforeDeleteHook(e boil.Executor, o *Record) error {
	*o = Record{}
	return nil
}

func recordAfterDeleteHook(e boil.Executor, o *Record) error {
	*o = Record{}
	return nil
}

func recordBeforeUpsertHook(e boil.Executor, o *Record) error {
	*o = Record{}
	return nil
}

func recordAfterUpsertHook(e boil.Executor, o *Record) error {
	*o = Record{}
	return nil
}

func testRecordsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Record{}
	o := &Record{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, recordDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Record object: %s", err)
	}

	AddRecordHook(boil.BeforeInsertHook, recordBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	recordBeforeInsertHooks = []RecordHook{}

	AddRecordHook(boil.AfterInsertHook, recordAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	recordAfterInsertHooks = []RecordHook{}

	AddRecordHook(boil.AfterSelectHook, recordAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	recordAfterSelectHooks = []RecordHook{}

	AddRecordHook(boil.BeforeUpdateHook, recordBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	recordBeforeUpdateHooks = []RecordHook{}

	AddRecordHook(boil.AfterUpdateHook, recordAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	recordAfterUpdateHooks = []RecordHook{}

	AddRecordHook(boil.BeforeDeleteHook, recordBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	recordBeforeDeleteHooks = []RecordHook{}

	AddRecordHook(boil.AfterDeleteHook, recordAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	recordAfterDeleteHooks = []RecordHook{}

	AddRecordHook(boil.BeforeUpsertHook, recordBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	recordBeforeUpsertHooks = []RecordHook{}

	AddRecordHook(boil.AfterUpsertHook, recordAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	recordAfterUpsertHooks = []RecordHook{}
}
func testRecordsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	record := &Record{}
	if err = randomize.Struct(seed, record, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = record.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Records(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecordsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	record := &Record{}
	if err = randomize.Struct(seed, record, recordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = record.Insert(tx, recordColumns...); err != nil {
		t.Error(err)
	}

	count, err := Records(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecordOneToOneRecordMeasureUsingIDRecordMeasure(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var foreign RecordMeasure
	var local Record

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, recordMeasureDBTypes, true, recordMeasureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecordMeasure struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreign.ID = local.ID
	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDRecordMeasureByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecordSlice{&local}
	if err = local.L.LoadIDRecordMeasure(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.IDRecordMeasure == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDRecordMeasure = nil
	if err = local.L.LoadIDRecordMeasure(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.IDRecordMeasure == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecordOneToOneSetOpRecordMeasureUsingIDRecordMeasure(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Record
	var b, c RecordMeasure

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recordMeasureDBTypes, false, strmangle.SetComplement(recordMeasurePrimaryKeyColumns, recordMeasureColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recordMeasureDBTypes, false, strmangle.SetComplement(recordMeasurePrimaryKeyColumns, recordMeasureColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecordMeasure{&b, &c} {
		err = a.SetIDRecordMeasure(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDRecordMeasure != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.ID != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.ID {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := RecordMeasureExists(tx, x.ID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.ID {
			t.Error("foreign key was wrong value", a.ID, x.ID)
		}

		if err = x.Delete(tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testRecordToManyMetrics(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Record
	var b, c Metric

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, metricDBTypes, false, metricColumnsWithDefault...)
	randomize.Struct(seed, &c, metricDBTypes, false, metricColumnsWithDefault...)

	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"measure_abstract\" (\"record\", \"metric\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"measure_abstract\" (\"record\", \"metric\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	metric, err := a.MetricsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range metric {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RecordSlice{&a}
	if err = a.L.LoadMetrics(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Metrics); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Metrics = nil
	if err = a.L.LoadMetrics(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Metrics); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", metric)
	}
}

func testRecordToManyMeasureTexts(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Record
	var b, c MeasureText

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, measureTextDBTypes, false, measureTextColumnsWithDefault...)
	randomize.Struct(seed, &c, measureTextDBTypes, false, measureTextColumnsWithDefault...)

	b.Record = a.ID
	c.Record = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	measureText, err := a.MeasureTextsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range measureText {
		if v.Record == b.Record {
			bFound = true
		}
		if v.Record == c.Record {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RecordSlice{&a}
	if err = a.L.LoadMeasureTexts(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MeasureTexts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MeasureTexts = nil
	if err = a.L.LoadMeasureTexts(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MeasureTexts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", measureText)
	}
}

func testRecordToManyMeasureNumerics(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Record
	var b, c MeasureNumeric

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, measureNumericDBTypes, false, measureNumericColumnsWithDefault...)
	randomize.Struct(seed, &c, measureNumericDBTypes, false, measureNumericColumnsWithDefault...)

	b.Record = a.ID
	c.Record = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	measureNumeric, err := a.MeasureNumericsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range measureNumeric {
		if v.Record == b.Record {
			bFound = true
		}
		if v.Record == c.Record {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RecordSlice{&a}
	if err = a.L.LoadMeasureNumerics(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MeasureNumerics); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MeasureNumerics = nil
	if err = a.L.LoadMeasureNumerics(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MeasureNumerics); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", measureNumeric)
	}
}

func testRecordToManyMeasureDates(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Record
	var b, c MeasureDate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, measureDateDBTypes, false, measureDateColumnsWithDefault...)
	randomize.Struct(seed, &c, measureDateDBTypes, false, measureDateColumnsWithDefault...)

	b.Record = a.ID
	c.Record = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	measureDate, err := a.MeasureDatesByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range measureDate {
		if v.Record == b.Record {
			bFound = true
		}
		if v.Record == c.Record {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RecordSlice{&a}
	if err = a.L.LoadMeasureDates(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MeasureDates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MeasureDates = nil
	if err = a.L.LoadMeasureDates(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MeasureDates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", measureDate)
	}
}

func testRecordToManySlotRecords(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Record
	var b, c SlotRecord

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, slotRecordDBTypes, false, slotRecordColumnsWithDefault...)
	randomize.Struct(seed, &c, slotRecordDBTypes, false, slotRecordColumnsWithDefault...)

	b.Record = a.ID
	c.Record = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	slotRecord, err := a.SlotRecordsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range slotRecord {
		if v.Record == b.Record {
			bFound = true
		}
		if v.Record == c.Record {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RecordSlice{&a}
	if err = a.L.LoadSlotRecords(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SlotRecords); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SlotRecords = nil
	if err = a.L.LoadSlotRecords(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SlotRecords); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", slotRecord)
	}
}

func testRecordToManyAddOpMetrics(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Record
	var b, c, d, e Metric

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Metric{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, metricDBTypes, false, strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Metric{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMetrics(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Records[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Records[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Metrics[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Metrics[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MetricsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRecordToManySetOpMetrics(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Record
	var b, c, d, e Metric

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Metric{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, metricDBTypes, false, strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetMetrics(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MetricsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMetrics(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MetricsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Records) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Records) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Records[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Records[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Metrics[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Metrics[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRecordToManyRemoveOpMetrics(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Record
	var b, c, d, e Metric

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Metric{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, metricDBTypes, false, strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddMetrics(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MetricsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMetrics(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MetricsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Records) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Records) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Records[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Records[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Metrics) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Metrics[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Metrics[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRecordToManyAddOpMeasureTexts(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Record
	var b, c, d, e MeasureText

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MeasureText{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, measureTextDBTypes, false, strmangle.SetComplement(measureTextPrimaryKeyColumns, measureTextColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MeasureText{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMeasureTexts(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Record {
			t.Error("foreign key was wrong value", a.ID, first.Record)
		}
		if a.ID != second.Record {
			t.Error("foreign key was wrong value", a.ID, second.Record)
		}

		if first.R.Record != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Record != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MeasureTexts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MeasureTexts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MeasureTextsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRecordToManyAddOpMeasureNumerics(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Record
	var b, c, d, e MeasureNumeric

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MeasureNumeric{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, measureNumericDBTypes, false, strmangle.SetComplement(measureNumericPrimaryKeyColumns, measureNumericColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MeasureNumeric{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMeasureNumerics(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Record {
			t.Error("foreign key was wrong value", a.ID, first.Record)
		}
		if a.ID != second.Record {
			t.Error("foreign key was wrong value", a.ID, second.Record)
		}

		if first.R.Record != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Record != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MeasureNumerics[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MeasureNumerics[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MeasureNumericsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRecordToManyAddOpMeasureDates(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Record
	var b, c, d, e MeasureDate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MeasureDate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, measureDateDBTypes, false, strmangle.SetComplement(measureDatePrimaryKeyColumns, measureDateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MeasureDate{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMeasureDates(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Record {
			t.Error("foreign key was wrong value", a.ID, first.Record)
		}
		if a.ID != second.Record {
			t.Error("foreign key was wrong value", a.ID, second.Record)
		}

		if first.R.Record != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Record != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MeasureDates[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MeasureDates[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MeasureDatesByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRecordToManyAddOpSlotRecords(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Record
	var b, c, d, e SlotRecord

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SlotRecord{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, slotRecordDBTypes, false, strmangle.SetComplement(slotRecordPrimaryKeyColumns, slotRecordColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SlotRecord{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSlotRecords(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Record {
			t.Error("foreign key was wrong value", a.ID, first.Record)
		}
		if a.ID != second.Record {
			t.Error("foreign key was wrong value", a.ID, second.Record)
		}

		if first.R.Record != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Record != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SlotRecords[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SlotRecords[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SlotRecordsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRecordToOneCategoryUsingCategory(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Record
	var foreign Category

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Category = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.CategoryByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecordSlice{&local}
	if err = local.L.LoadCategory(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecordToOneVolumeUsingVolume(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Record
	var foreign Volume

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, volumeDBTypes, true, volumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Volume = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.VolumeByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecordSlice{&local}
	if err = local.L.LoadVolume(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Volume = nil
	if err = local.L.LoadVolume(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecordToOneSetOpCategoryUsingCategory(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Record
	var b, c Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Category{&b, &c} {
		err = a.SetCategory(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Records[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Category != x.ID {
			t.Error("foreign key was wrong value", a.Category)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Category))
		reflect.Indirect(reflect.ValueOf(&a.Category)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Category != x.ID {
			t.Error("foreign key was wrong value", a.Category, x.ID)
		}
	}
}
func testRecordToOneSetOpVolumeUsingVolume(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Record
	var b, c Volume

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recordDBTypes, false, strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, volumeDBTypes, false, strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, volumeDBTypes, false, strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Volume{&b, &c} {
		err = a.SetVolume(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Volume != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Records[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Volume != x.ID {
			t.Error("foreign key was wrong value", a.Volume)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Volume))
		reflect.Indirect(reflect.ValueOf(&a.Volume)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Volume != x.ID {
			t.Error("foreign key was wrong value", a.Volume, x.ID)
		}
	}
}
func testRecordsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	record := &Record{}
	if err = randomize.Struct(seed, record, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = record.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = record.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testRecordsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	record := &Record{}
	if err = randomize.Struct(seed, record, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = record.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RecordSlice{record}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testRecordsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	record := &Record{}
	if err = randomize.Struct(seed, record, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = record.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Records(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	recordDBTypes = map[string]string{`Category`: `smallint`, `ID`: `integer`, `Volume`: `integer`}
	_             = bytes.MinRead
)

func testRecordsUpdate(t *testing.T) {
	t.Parallel()

	if len(recordColumns) == len(recordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	record := &Record{}
	if err = randomize.Struct(seed, record, recordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = record.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Records(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, record, recordDBTypes, true, recordColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err = record.Update(tx); err != nil {
		t.Error(err)
	}
}

func testRecordsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(recordColumns) == len(recordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	record := &Record{}
	if err = randomize.Struct(seed, record, recordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = record.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Records(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, record, recordDBTypes, true, recordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(recordColumns, recordPrimaryKeyColumns) {
		fields = recordColumns
	} else {
		fields = strmangle.SetComplement(
			recordColumns,
			recordPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(record))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := RecordSlice{record}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testRecordsUpsert(t *testing.T) {
	t.Parallel()

	if len(recordColumns) == len(recordPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	record := Record{}
	if err = randomize.Struct(seed, &record, recordDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = record.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Record: %s", err)
	}

	count, err := Records(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &record, recordDBTypes, false, recordPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}

	if err = record.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Record: %s", err)
	}

	count, err = Records(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
