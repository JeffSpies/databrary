// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testNotifications(t *testing.T) {
	t.Parallel()

	query := Notifications(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testNotificationsDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notification := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = notification.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotificationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notification := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Notifications(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotificationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notification := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := NotificationSlice{notification}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testNotificationsExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notification := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := NotificationExists(tx, notification.ID)
	if err != nil {
		t.Errorf("Unable to check if Notification exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NotificationExistsG to return true, but got false.")
	}
}
func testNotificationsFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notification := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	notificationFound, err := FindNotification(tx, notification.ID)
	if err != nil {
		t.Error(err)
	}

	if notificationFound == nil {
		t.Error("want a record, got nil")
	}
}
func testNotificationsBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notification := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Notifications(tx).Bind(notification); err != nil {
		t.Error(err)
	}
}

func testNotificationsOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notification := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Notifications(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNotificationsAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notificationOne := NotificationRandom()
	notificationTwo := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notificationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = notificationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Notifications(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNotificationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notificationOne := NotificationRandom()
	notificationTwo := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notificationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = notificationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func notificationBeforeInsertHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationAfterInsertHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationAfterSelectHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationBeforeUpdateHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationAfterUpdateHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationBeforeDeleteHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationAfterDeleteHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationBeforeUpsertHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationAfterUpsertHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func testNotificationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Notification{}
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	o := NotificationRandom()

	AddNotificationHook(boil.BeforeInsertHook, notificationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	notificationBeforeInsertHooks = []NotificationHook{}

	AddNotificationHook(boil.AfterInsertHook, notificationAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	notificationAfterInsertHooks = []NotificationHook{}

	AddNotificationHook(boil.AfterSelectHook, notificationAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	notificationAfterSelectHooks = []NotificationHook{}

	AddNotificationHook(boil.BeforeUpdateHook, notificationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	notificationBeforeUpdateHooks = []NotificationHook{}

	AddNotificationHook(boil.AfterUpdateHook, notificationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	notificationAfterUpdateHooks = []NotificationHook{}

	AddNotificationHook(boil.BeforeDeleteHook, notificationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	notificationBeforeDeleteHooks = []NotificationHook{}

	AddNotificationHook(boil.AfterDeleteHook, notificationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	notificationAfterDeleteHooks = []NotificationHook{}

	AddNotificationHook(boil.BeforeUpsertHook, notificationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	notificationBeforeUpsertHooks = []NotificationHook{}

	AddNotificationHook(boil.AfterUpsertHook, notificationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	notificationAfterUpsertHooks = []NotificationHook{}
}
func testNotificationsInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notification := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNotificationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notification := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx, notificationColumns...); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNotificationToOneTagUsingTag(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Notification
	var foreign Tag

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tagDBTypes, true, tagColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}

	local.Tag.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Tag.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.TagByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadTag(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tag = nil
	if err = local.L.LoadTag(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOneCommentUsingComment(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Notification
	var foreign Comment

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, commentDBTypes, true, commentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	local.Comment.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Comment.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.CommentByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadComment(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Comment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Comment = nil
	if err = local.L.LoadComment(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Comment == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOneAssetUsingAsset(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Notification
	var foreign Asset

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	local.Asset.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Asset.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.AssetByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadAsset(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Asset == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Asset = nil
	if err = local.L.LoadAsset(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Asset == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOneContainerUsingContainer(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Notification
	var foreign Container

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, containerDBTypes, true, containerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	local.Container.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Container.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.ContainerByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadContainer(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Container == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Container = nil
	if err = local.L.LoadContainer(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Container == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOneVolumeUsingVolume(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Notification
	var foreign Volume

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, volumeDBTypes, true, volumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	local.Volume.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Volume.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.VolumeByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadVolume(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Volume = nil
	if err = local.L.LoadVolume(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOnePartyUsingParty(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Notification
	var foreign Party

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	local.Party.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Party.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.PartyByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadParty(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Party == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Party = nil
	if err = local.L.LoadParty(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Party == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOnePartyUsingAgent(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Notification
	var foreign Party

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Agent = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.AgentByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadAgent(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Agent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Agent = nil
	if err = local.L.LoadAgent(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Agent == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOneNoticeUsingNotice(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Notification
	var foreign Notice

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, noticeDBTypes, true, noticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Notice = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.NoticeByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadNotice(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Notice == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Notice = nil
	if err = local.L.LoadNotice(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Notice == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOneAccountUsingTarget(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Notification
	var foreign Account

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, notificationDBTypes, true, notificationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountDBTypes, true, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Target = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.TargetByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadTarget(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Target == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Target = nil
	if err = local.L.LoadTarget(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Target == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOneSetOpTagUsingTag(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notification
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tag{&b, &c} {
		err = a.SetTag(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tag != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Notifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Tag.Int != x.ID {
			t.Error("foreign key was wrong value", a.Tag.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Tag.Int))
		reflect.Indirect(reflect.ValueOf(&a.Tag.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Tag.Int != x.ID {
			t.Error("foreign key was wrong value", a.Tag.Int, x.ID)
		}
	}
}

func testNotificationToOneRemoveOpTagUsingTag(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notification
	var b Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTag(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTag(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.TagByFk(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Tag != nil {
		t.Error("R struct entry should be nil")
	}

	if a.Tag.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Notifications) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNotificationToOneSetOpCommentUsingComment(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notification
	var b, c Comment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, commentDBTypes, false, strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, commentDBTypes, false, strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Comment{&b, &c} {
		err = a.SetComment(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Comment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Notifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Comment.Int != x.ID {
			t.Error("foreign key was wrong value", a.Comment.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Comment.Int))
		reflect.Indirect(reflect.ValueOf(&a.Comment.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Comment.Int != x.ID {
			t.Error("foreign key was wrong value", a.Comment.Int, x.ID)
		}
	}
}

func testNotificationToOneRemoveOpCommentUsingComment(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notification
	var b Comment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, commentDBTypes, false, strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetComment(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveComment(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CommentByFk(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Comment != nil {
		t.Error("R struct entry should be nil")
	}

	if a.Comment.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Notifications) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNotificationToOneSetOpAssetUsingAsset(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notification
	var b, c Asset

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Asset{&b, &c} {
		err = a.SetAsset(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Asset != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Notifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Asset.Int != x.ID {
			t.Error("foreign key was wrong value", a.Asset.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Asset.Int))
		reflect.Indirect(reflect.ValueOf(&a.Asset.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Asset.Int != x.ID {
			t.Error("foreign key was wrong value", a.Asset.Int, x.ID)
		}
	}
}

func testNotificationToOneRemoveOpAssetUsingAsset(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notification
	var b Asset

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAsset(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAsset(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.AssetByFk(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Asset != nil {
		t.Error("R struct entry should be nil")
	}

	if a.Asset.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Notifications) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNotificationToOneSetOpContainerUsingContainer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notification
	var b, c Container

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, containerDBTypes, false, strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, containerDBTypes, false, strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Container{&b, &c} {
		err = a.SetContainer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Container != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Notifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Container.Int != x.ID {
			t.Error("foreign key was wrong value", a.Container.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Container.Int))
		reflect.Indirect(reflect.ValueOf(&a.Container.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Container.Int != x.ID {
			t.Error("foreign key was wrong value", a.Container.Int, x.ID)
		}
	}
}

func testNotificationToOneRemoveOpContainerUsingContainer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notification
	var b Container

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, containerDBTypes, false, strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetContainer(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveContainer(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ContainerByFk(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Container != nil {
		t.Error("R struct entry should be nil")
	}

	if a.Container.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Notifications) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNotificationToOneSetOpVolumeUsingVolume(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notification
	var b, c Volume

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, volumeDBTypes, false, strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, volumeDBTypes, false, strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Volume{&b, &c} {
		err = a.SetVolume(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Volume != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Notifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Volume.Int != x.ID {
			t.Error("foreign key was wrong value", a.Volume.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Volume.Int))
		reflect.Indirect(reflect.ValueOf(&a.Volume.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Volume.Int != x.ID {
			t.Error("foreign key was wrong value", a.Volume.Int, x.ID)
		}
	}
}

func testNotificationToOneRemoveOpVolumeUsingVolume(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notification
	var b Volume

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, volumeDBTypes, false, strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetVolume(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveVolume(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.VolumeByFk(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Volume != nil {
		t.Error("R struct entry should be nil")
	}

	if a.Volume.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Notifications) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNotificationToOneSetOpPartyUsingParty(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notification
	var b, c Party

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Party{&b, &c} {
		err = a.SetParty(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Party != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Notifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Party.Int != x.ID {
			t.Error("foreign key was wrong value", a.Party.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Party.Int))
		reflect.Indirect(reflect.ValueOf(&a.Party.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Party.Int != x.ID {
			t.Error("foreign key was wrong value", a.Party.Int, x.ID)
		}
	}
}

func testNotificationToOneRemoveOpPartyUsingParty(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notification
	var b Party

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetParty(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveParty(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.PartyByFk(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Party != nil {
		t.Error("R struct entry should be nil")
	}

	if a.Party.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Notifications) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNotificationToOneSetOpPartyUsingAgent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notification
	var b, c Party

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Party{&b, &c} {
		err = a.SetAgent(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Agent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AgentNotifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Agent != x.ID {
			t.Error("foreign key was wrong value", a.Agent)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Agent))
		reflect.Indirect(reflect.ValueOf(&a.Agent)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Agent != x.ID {
			t.Error("foreign key was wrong value", a.Agent, x.ID)
		}
	}
}
func testNotificationToOneSetOpNoticeUsingNotice(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notification
	var b, c Notice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, noticeDBTypes, false, strmangle.SetComplement(noticePrimaryKeyColumns, noticeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, noticeDBTypes, false, strmangle.SetComplement(noticePrimaryKeyColumns, noticeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Notice{&b, &c} {
		err = a.SetNotice(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Notice != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Notifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Notice != x.ID {
			t.Error("foreign key was wrong value", a.Notice)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Notice))
		reflect.Indirect(reflect.ValueOf(&a.Notice)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Notice != x.ID {
			t.Error("foreign key was wrong value", a.Notice, x.ID)
		}
	}
}
func testNotificationToOneSetOpAccountUsingTarget(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notification
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetTarget(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Target != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TargetNotifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Target != x.ID {
			t.Error("foreign key was wrong value", a.Target)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Target))
		reflect.Indirect(reflect.ValueOf(&a.Target)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Target != x.ID {
			t.Error("foreign key was wrong value", a.Target, x.ID)
		}
	}
}
func testNotificationsReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notification := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = notification.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testNotificationsReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notification := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := NotificationSlice{notification}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testNotificationsSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notification := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Notifications(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	notificationDBTypes = map[string]string{`Agent`: `integer`, `Asset`: `integer`, `Comment`: `integer`, `Container`: `integer`, `Delivered`: `enum.notice_delivery('none','site','weekly','daily','async')`, `ID`: `integer`, `Notice`: `smallint`, `Party`: `integer`, `Permission`: `enum.permission('NONE','PUBLIC','SHARED','READ','EDIT','ADMIN')`, `Release`: `enum.release('PRIVATE','SHARED','EXCERPTS','PUBLIC')`, `Segment`: `USER-DEFINED`, `Tag`: `integer`, `Target`: `integer`, `Time`: `timestamp with time zone`, `Volume`: `integer`}
	_                   = bytes.MinRead
)

func testNotificationsUpdate(t *testing.T) {
	t.Parallel()

	if len(notificationColumns) == len(notificationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notification := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	notification = NotificationRandom()

	if err = notification.Update(tx); err != nil {
		t.Error(err)
	}
}

func testNotificationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(notificationColumns) == len(notificationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	notification := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	notification = NotificationRandom()

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(notificationColumns, notificationPrimaryKeyColumns) {
		fields = notificationColumns
	} else {
		fields = strmangle.SetComplement(
			notificationColumns,
			notificationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(notification))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := NotificationSlice{notification}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testNotificationsUpsert(t *testing.T) {
	t.Parallel()

	if len(notificationColumns) == len(notificationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed
	// Attempt the INSERT side of an UPSERT

	notification := NotificationRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Notification: %s", err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT

	notification = NotificationRandom()

	if err = notification.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Notification: %s", err)
	}

	count, err = Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
