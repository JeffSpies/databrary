// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testParties(t *testing.T) {
	t.Parallel()

	query := Parties(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPartiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = party.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPartiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Parties(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPartiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PartySlice{party}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPartiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PartyExists(tx, party.ID)
	if err != nil {
		t.Errorf("Unable to check if Party exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PartyExistsG to return true, but got false.")
	}
}
func testPartiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	partyFound, err := FindParty(tx, party.ID)
	if err != nil {
		t.Error(err)
	}

	if partyFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPartiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Parties(tx).Bind(party); err != nil {
		t.Error(err)
	}
}

func testPartiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Parties(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPartiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	partyOne := &Party{}
	partyTwo := &Party{}
	if err = randomize.Struct(seed, partyOne, partyDBTypes, false, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	if err = randomize.Struct(seed, partyTwo, partyDBTypes, false, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = partyOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = partyTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Parties(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPartiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	partyOne := &Party{}
	partyTwo := &Party{}
	if err = randomize.Struct(seed, partyOne, partyDBTypes, false, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	if err = randomize.Struct(seed, partyTwo, partyDBTypes, false, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = partyOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = partyTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func partyBeforeInsertHook(e boil.Executor, o *Party) error {
	*o = Party{}
	return nil
}

func partyAfterInsertHook(e boil.Executor, o *Party) error {
	*o = Party{}
	return nil
}

func partyAfterSelectHook(e boil.Executor, o *Party) error {
	*o = Party{}
	return nil
}

func partyBeforeUpdateHook(e boil.Executor, o *Party) error {
	*o = Party{}
	return nil
}

func partyAfterUpdateHook(e boil.Executor, o *Party) error {
	*o = Party{}
	return nil
}

func partyBeforeDeleteHook(e boil.Executor, o *Party) error {
	*o = Party{}
	return nil
}

func partyAfterDeleteHook(e boil.Executor, o *Party) error {
	*o = Party{}
	return nil
}

func partyBeforeUpsertHook(e boil.Executor, o *Party) error {
	*o = Party{}
	return nil
}

func partyAfterUpsertHook(e boil.Executor, o *Party) error {
	*o = Party{}
	return nil
}

func testPartiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Party{}
	o := &Party{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, partyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Party object: %s", err)
	}

	AddPartyHook(boil.BeforeInsertHook, partyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	partyBeforeInsertHooks = []PartyHook{}

	AddPartyHook(boil.AfterInsertHook, partyAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	partyAfterInsertHooks = []PartyHook{}

	AddPartyHook(boil.AfterSelectHook, partyAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	partyAfterSelectHooks = []PartyHook{}

	AddPartyHook(boil.BeforeUpdateHook, partyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	partyBeforeUpdateHooks = []PartyHook{}

	AddPartyHook(boil.AfterUpdateHook, partyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	partyAfterUpdateHooks = []PartyHook{}

	AddPartyHook(boil.BeforeDeleteHook, partyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	partyBeforeDeleteHooks = []PartyHook{}

	AddPartyHook(boil.AfterDeleteHook, partyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	partyAfterDeleteHooks = []PartyHook{}

	AddPartyHook(boil.BeforeUpsertHook, partyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	partyBeforeUpsertHooks = []PartyHook{}

	AddPartyHook(boil.AfterUpsertHook, partyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	partyAfterUpsertHooks = []PartyHook{}
}
func testPartiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPartiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx, partyColumns...); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPartyOneToOneAvatarUsingAvatar(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var foreign Avatar
	var local Party

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, avatarDBTypes, true, avatarColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Avatar struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreign.Party = local.ID
	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.AvatarByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.Party != foreign.Party {
		t.Errorf("want: %v, got %v", foreign.Party, check.Party)
	}

	slice := PartySlice{&local}
	if err = local.L.LoadAvatar(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Avatar == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Avatar = nil
	if err = local.L.LoadAvatar(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Avatar == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPartyOneToOneAccountUsingIDAccount(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var foreign Account
	var local Party

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, accountDBTypes, true, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreign.ID = local.ID
	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDAccountByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PartySlice{&local}
	if err = local.L.LoadIDAccount(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.IDAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.IDAccount = nil
	if err = local.L.LoadIDAccount(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.IDAccount == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPartyOneToOneSetOpAvatarUsingAvatar(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c Avatar

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, avatarDBTypes, false, strmangle.SetComplement(avatarPrimaryKeyColumns, avatarColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, avatarDBTypes, false, strmangle.SetComplement(avatarPrimaryKeyColumns, avatarColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Avatar{&b, &c} {
		err = a.SetAvatar(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Avatar != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Party != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.Party {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := AvatarExists(tx, x.Party); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.Party {
			t.Error("foreign key was wrong value", a.ID, x.Party)
		}

		if err = x.Delete(tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testPartyOneToOneSetOpAccountUsingIDAccount(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetIDAccount(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.IDAccount != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.ID != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.ID {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := AccountExists(tx, x.ID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.ID {
			t.Error("foreign key was wrong value", a.ID, x.ID)
		}

		if err = x.Delete(tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testPartyToManyParentAuthorizes(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c Authorize

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, authorizeDBTypes, false, authorizeColumnsWithDefault...)
	randomize.Struct(seed, &c, authorizeDBTypes, false, authorizeColumnsWithDefault...)

	b.Parent = a.ID
	c.Parent = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	authorize, err := a.ParentAuthorizesByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range authorize {
		if v.Parent == b.Parent {
			bFound = true
		}
		if v.Parent == c.Parent {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PartySlice{&a}
	if err = a.L.LoadParentAuthorizes(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentAuthorizes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ParentAuthorizes = nil
	if err = a.L.LoadParentAuthorizes(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentAuthorizes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", authorize)
	}
}

func testPartyToManyChildAuthorizes(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c Authorize

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, authorizeDBTypes, false, authorizeColumnsWithDefault...)
	randomize.Struct(seed, &c, authorizeDBTypes, false, authorizeColumnsWithDefault...)

	b.Child = a.ID
	c.Child = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	authorize, err := a.ChildAuthorizesByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range authorize {
		if v.Child == b.Child {
			bFound = true
		}
		if v.Child == c.Child {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PartySlice{&a}
	if err = a.L.LoadChildAuthorizes(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChildAuthorizes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ChildAuthorizes = nil
	if err = a.L.LoadChildAuthorizes(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChildAuthorizes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", authorize)
	}
}

func testPartyToManyVolumeAccesses(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c VolumeAccess

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, volumeAccessDBTypes, false, volumeAccessColumnsWithDefault...)
	randomize.Struct(seed, &c, volumeAccessDBTypes, false, volumeAccessColumnsWithDefault...)

	b.Party = a.ID
	c.Party = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	volumeAccess, err := a.VolumeAccessesByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range volumeAccess {
		if v.Party == b.Party {
			bFound = true
		}
		if v.Party == c.Party {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PartySlice{&a}
	if err = a.L.LoadVolumeAccesses(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeAccesses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VolumeAccesses = nil
	if err = a.L.LoadVolumeAccesses(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeAccesses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", volumeAccess)
	}
}

func testPartyToManyNotifications(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c Notification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, notificationDBTypes, false, notificationColumnsWithDefault...)
	randomize.Struct(seed, &c, notificationDBTypes, false, notificationColumnsWithDefault...)

	b.Party.Valid = true
	c.Party.Valid = true
	b.Party.Int = a.ID
	c.Party.Int = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	notification, err := a.NotificationsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range notification {
		if v.Party.Int == b.Party.Int {
			bFound = true
		}
		if v.Party.Int == c.Party.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PartySlice{&a}
	if err = a.L.LoadNotifications(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Notifications = nil
	if err = a.L.LoadNotifications(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", notification)
	}
}

func testPartyToManyAgentNotifications(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c Notification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, notificationDBTypes, false, notificationColumnsWithDefault...)
	randomize.Struct(seed, &c, notificationDBTypes, false, notificationColumnsWithDefault...)

	b.Agent = a.ID
	c.Agent = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	notification, err := a.AgentNotificationsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range notification {
		if v.Agent == b.Agent {
			bFound = true
		}
		if v.Agent == c.Agent {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PartySlice{&a}
	if err = a.L.LoadAgentNotifications(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AgentNotifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AgentNotifications = nil
	if err = a.L.LoadAgentNotifications(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AgentNotifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", notification)
	}
}

func testPartyToManyAddOpParentAuthorizes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c, d, e Authorize

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Authorize{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, authorizeDBTypes, false, strmangle.SetComplement(authorizePrimaryKeyColumns, authorizeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Authorize{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddParentAuthorizes(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Parent {
			t.Error("foreign key was wrong value", a.ID, first.Parent)
		}
		if a.ID != second.Parent {
			t.Error("foreign key was wrong value", a.ID, second.Parent)
		}

		if first.R.Parent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Parent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ParentAuthorizes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ParentAuthorizes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ParentAuthorizesByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPartyToManyAddOpChildAuthorizes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c, d, e Authorize

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Authorize{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, authorizeDBTypes, false, strmangle.SetComplement(authorizePrimaryKeyColumns, authorizeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Authorize{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddChildAuthorizes(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Child {
			t.Error("foreign key was wrong value", a.ID, first.Child)
		}
		if a.ID != second.Child {
			t.Error("foreign key was wrong value", a.ID, second.Child)
		}

		if first.R.Child != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Child != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ChildAuthorizes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ChildAuthorizes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ChildAuthorizesByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPartyToManyAddOpVolumeAccesses(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c, d, e VolumeAccess

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VolumeAccess{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, volumeAccessDBTypes, false, strmangle.SetComplement(volumeAccessPrimaryKeyColumns, volumeAccessColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VolumeAccess{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVolumeAccesses(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Party {
			t.Error("foreign key was wrong value", a.ID, first.Party)
		}
		if a.ID != second.Party {
			t.Error("foreign key was wrong value", a.ID, second.Party)
		}

		if first.R.Party != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Party != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VolumeAccesses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VolumeAccesses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VolumeAccessesByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPartyToManyAddOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Notification{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddNotifications(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Party.Int {
			t.Error("foreign key was wrong value", a.ID, first.Party.Int)
		}
		if a.ID != second.Party.Int {
			t.Error("foreign key was wrong value", a.ID, second.Party.Int)
		}

		if first.R.Party != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Party != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Notifications[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Notifications[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.NotificationsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPartyToManySetOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetNotifications(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetNotifications(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Party.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Party.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.Party.Int {
		t.Error("foreign key was wrong value", a.ID, d.Party.Int)
	}
	if a.ID != e.Party.Int {
		t.Error("foreign key was wrong value", a.ID, e.Party.Int)
	}

	if b.R.Party != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Party != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Party != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Party != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Notifications[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Notifications[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPartyToManyRemoveOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddNotifications(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveNotifications(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Party.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Party.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Party != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Party != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Party != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Party != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Notifications) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Notifications[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Notifications[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPartyToManyAddOpAgentNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Party
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Notification{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAgentNotifications(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Agent {
			t.Error("foreign key was wrong value", a.ID, first.Agent)
		}
		if a.ID != second.Agent {
			t.Error("foreign key was wrong value", a.ID, second.Agent)
		}

		if first.R.Agent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Agent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AgentNotifications[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AgentNotifications[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AgentNotificationsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPartiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = party.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPartiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PartySlice{party}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPartiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Parties(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	partyDBTypes = map[string]string{`Affiliation`: `text`, `ID`: `integer`, `Name`: `text`, `Orcid`: `character varying`, `Prename`: `text`, `URL`: `text`}
	_            = bytes.MinRead
)

func testPartiesUpdate(t *testing.T) {
	t.Parallel()

	if len(partyColumns) == len(partyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, party, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	if err = party.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPartiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(partyColumns) == len(partyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	party := &Party{}
	if err = randomize.Struct(seed, party, partyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, party, partyDBTypes, true, partyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(partyColumns, partyPrimaryKeyColumns) {
		fields = partyColumns
	} else {
		fields = strmangle.SetComplement(
			partyColumns,
			partyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(party))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PartySlice{party}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPartiesUpsert(t *testing.T) {
	t.Parallel()

	if len(partyColumns) == len(partyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	party := Party{}
	if err = randomize.Struct(seed, &party, partyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = party.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Party: %s", err)
	}

	count, err := Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &party, partyDBTypes, false, partyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	if err = party.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Party: %s", err)
	}

	count, err = Parties(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
