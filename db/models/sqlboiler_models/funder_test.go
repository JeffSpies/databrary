// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testFunders(t *testing.T) {
	t.Parallel()

	query := Funders(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testFundersDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funder := &Funder{}
	if err = randomize.Struct(seed, funder, funderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funder.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = funder.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Funders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFundersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funder := &Funder{}
	if err = randomize.Struct(seed, funder, funderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funder.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Funders(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Funders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFundersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funder := &Funder{}
	if err = randomize.Struct(seed, funder, funderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funder.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := FunderSlice{funder}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Funders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testFundersExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funder := &Funder{}
	if err = randomize.Struct(seed, funder, funderDBTypes, true, funderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funder.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := FunderExists(tx, funder.FundrefID)
	if err != nil {
		t.Errorf("Unable to check if Funder exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FunderExistsG to return true, but got false.")
	}
}
func testFundersFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funder := &Funder{}
	if err = randomize.Struct(seed, funder, funderDBTypes, true, funderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funder.Insert(tx); err != nil {
		t.Error(err)
	}

	funderFound, err := FindFunder(tx, funder.FundrefID)
	if err != nil {
		t.Error(err)
	}

	if funderFound == nil {
		t.Error("want a record, got nil")
	}
}
func testFundersBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funder := &Funder{}
	if err = randomize.Struct(seed, funder, funderDBTypes, true, funderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funder.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Funders(tx).Bind(funder); err != nil {
		t.Error(err)
	}
}

func testFundersOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funder := &Funder{}
	if err = randomize.Struct(seed, funder, funderDBTypes, true, funderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funder.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Funders(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFundersAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funderOne := &Funder{}
	funderTwo := &Funder{}
	if err = randomize.Struct(seed, funderOne, funderDBTypes, false, funderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}
	if err = randomize.Struct(seed, funderTwo, funderDBTypes, false, funderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funderOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = funderTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Funders(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFundersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funderOne := &Funder{}
	funderTwo := &Funder{}
	if err = randomize.Struct(seed, funderOne, funderDBTypes, false, funderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}
	if err = randomize.Struct(seed, funderTwo, funderDBTypes, false, funderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funderOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = funderTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Funders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func funderBeforeInsertHook(e boil.Executor, o *Funder) error {
	*o = Funder{}
	return nil
}

func funderAfterInsertHook(e boil.Executor, o *Funder) error {
	*o = Funder{}
	return nil
}

func funderAfterSelectHook(e boil.Executor, o *Funder) error {
	*o = Funder{}
	return nil
}

func funderBeforeUpdateHook(e boil.Executor, o *Funder) error {
	*o = Funder{}
	return nil
}

func funderAfterUpdateHook(e boil.Executor, o *Funder) error {
	*o = Funder{}
	return nil
}

func funderBeforeDeleteHook(e boil.Executor, o *Funder) error {
	*o = Funder{}
	return nil
}

func funderAfterDeleteHook(e boil.Executor, o *Funder) error {
	*o = Funder{}
	return nil
}

func funderBeforeUpsertHook(e boil.Executor, o *Funder) error {
	*o = Funder{}
	return nil
}

func funderAfterUpsertHook(e boil.Executor, o *Funder) error {
	*o = Funder{}
	return nil
}

func testFundersHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Funder{}
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	o := &Funder{}
	if err = randomize.Struct(seed, o, funderDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Funder object: %s", err)
	}

	AddFunderHook(boil.BeforeInsertHook, funderBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	funderBeforeInsertHooks = []FunderHook{}

	AddFunderHook(boil.AfterInsertHook, funderAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	funderAfterInsertHooks = []FunderHook{}

	AddFunderHook(boil.AfterSelectHook, funderAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	funderAfterSelectHooks = []FunderHook{}

	AddFunderHook(boil.BeforeUpdateHook, funderBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	funderBeforeUpdateHooks = []FunderHook{}

	AddFunderHook(boil.AfterUpdateHook, funderAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	funderAfterUpdateHooks = []FunderHook{}

	AddFunderHook(boil.BeforeDeleteHook, funderBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	funderBeforeDeleteHooks = []FunderHook{}

	AddFunderHook(boil.AfterDeleteHook, funderAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	funderAfterDeleteHooks = []FunderHook{}

	AddFunderHook(boil.BeforeUpsertHook, funderBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	funderBeforeUpsertHooks = []FunderHook{}

	AddFunderHook(boil.AfterUpsertHook, funderAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	funderAfterUpsertHooks = []FunderHook{}
}
func testFundersInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funder := &Funder{}
	if err = randomize.Struct(seed, funder, funderDBTypes, true, funderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funder.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Funders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFundersInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funder := &Funder{}
	if err = randomize.Struct(seed, funder, funderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funder.Insert(tx, funderColumns...); err != nil {
		t.Error(err)
	}

	count, err := Funders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFunderToManyVolumeFundings(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Funder
	var b, c VolumeFunding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, funderDBTypes, true, funderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, volumeFundingDBTypes, false, volumeFundingColumnsWithDefault...)
	randomize.Struct(seed, &c, volumeFundingDBTypes, false, volumeFundingColumnsWithDefault...)

	b.Funder = a.FundrefID
	c.Funder = a.FundrefID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	volumeFunding, err := a.VolumeFundingsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range volumeFunding {
		if v.Funder == b.Funder {
			bFound = true
		}
		if v.Funder == c.Funder {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := FunderSlice{&a}
	if err = a.L.LoadVolumeFundings(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeFundings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VolumeFundings = nil
	if err = a.L.LoadVolumeFundings(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeFundings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", volumeFunding)
	}
}

func testFunderToManyAddOpVolumeFundings(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Funder
	var b, c, d, e VolumeFunding

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, funderDBTypes, false, strmangle.SetComplement(funderPrimaryKeyColumns, funderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VolumeFunding{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, volumeFundingDBTypes, false, strmangle.SetComplement(volumeFundingPrimaryKeyColumns, volumeFundingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VolumeFunding{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVolumeFundings(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.FundrefID != first.Funder {
			t.Error("foreign key was wrong value", a.FundrefID, first.Funder)
		}
		if a.FundrefID != second.Funder {
			t.Error("foreign key was wrong value", a.FundrefID, second.Funder)
		}

		if first.R.Funder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Funder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VolumeFundings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VolumeFundings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VolumeFundingsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testFundersReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funder := &Funder{}
	if err = randomize.Struct(seed, funder, funderDBTypes, true, funderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funder.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = funder.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testFundersReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funder := &Funder{}
	if err = randomize.Struct(seed, funder, funderDBTypes, true, funderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funder.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := FunderSlice{funder}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testFundersSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funder := &Funder{}
	if err = randomize.Struct(seed, funder, funderDBTypes, true, funderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funder.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Funders(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	funderDBTypes = map[string]string{`FundrefID`: `bigint`, `Name`: `text`}
	_             = bytes.MinRead
)

func testFundersUpdate(t *testing.T) {
	t.Parallel()

	if len(funderColumns) == len(funderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funder := &Funder{}
	if err = randomize.Struct(seed, funder, funderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funder.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Funders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, funder, funderDBTypes, true, funderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	if err = funder.Update(tx); err != nil {
		t.Error(err)
	}
}

func testFundersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(funderColumns) == len(funderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	funder := &Funder{}
	if err = randomize.Struct(seed, funder, funderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funder.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Funders(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, funder, funderDBTypes, true, funderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(funderColumns, funderPrimaryKeyColumns) {
		fields = funderColumns
	} else {
		fields = strmangle.SetComplement(
			funderColumns,
			funderPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(funder))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := FunderSlice{funder}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testFundersUpsert(t *testing.T) {
	t.Parallel()

	if len(funderColumns) == len(funderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed
	// Attempt the INSERT side of an UPSERT

	funder := Funder{}
	if err = randomize.Struct(seed, &funder, funderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = funder.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Funder: %s", err)
	}

	count, err := Funders(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT

	if err = randomize.Struct(seed, &funder, funderDBTypes, false, funderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}

	if err = funder.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Funder: %s", err)
	}

	count, err = Funders(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
