// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testAccountTokens(t *testing.T) {
	t.Parallel()

	query := AccountTokens(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testAccountTokensDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountToken := &AccountToken{}
	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountToken.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = accountToken.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := AccountTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountTokensQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountToken := &AccountToken{}
	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountToken.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = AccountTokens(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := AccountTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountTokensSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountToken := &AccountToken{}
	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountToken.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AccountTokenSlice{accountToken}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := AccountTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testAccountTokensExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountToken := &AccountToken{}
	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true, accountTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountToken.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := AccountTokenExists(tx, accountToken.Token)
	if err != nil {
		t.Errorf("Unable to check if AccountToken exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AccountTokenExistsG to return true, but got false.")
	}
}
func testAccountTokensFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountToken := &AccountToken{}
	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true, accountTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountToken.Insert(tx); err != nil {
		t.Error(err)
	}

	accountTokenFound, err := FindAccountToken(tx, accountToken.Token)
	if err != nil {
		t.Error(err)
	}

	if accountTokenFound == nil {
		t.Error("want a record, got nil")
	}
}
func testAccountTokensBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountToken := &AccountToken{}
	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true, accountTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountToken.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = AccountTokens(tx).Bind(accountToken); err != nil {
		t.Error(err)
	}
}

func testAccountTokensOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountToken := &AccountToken{}
	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true, accountTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountToken.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := AccountTokens(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAccountTokensAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountTokenOne := &AccountToken{}
	accountTokenTwo := &AccountToken{}
	if err = randomize.Struct(seed, accountTokenOne, accountTokenDBTypes, false, accountTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}
	if err = randomize.Struct(seed, accountTokenTwo, accountTokenDBTypes, false, accountTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountTokenOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = accountTokenTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := AccountTokens(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAccountTokensCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	accountTokenOne := &AccountToken{}
	accountTokenTwo := &AccountToken{}
	if err = randomize.Struct(seed, accountTokenOne, accountTokenDBTypes, false, accountTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}
	if err = randomize.Struct(seed, accountTokenTwo, accountTokenDBTypes, false, accountTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountTokenOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = accountTokenTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := AccountTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func accountTokenBeforeInsertHook(e boil.Executor, o *AccountToken) error {
	*o = AccountToken{}
	return nil
}

func accountTokenAfterInsertHook(e boil.Executor, o *AccountToken) error {
	*o = AccountToken{}
	return nil
}

func accountTokenAfterSelectHook(e boil.Executor, o *AccountToken) error {
	*o = AccountToken{}
	return nil
}

func accountTokenBeforeUpdateHook(e boil.Executor, o *AccountToken) error {
	*o = AccountToken{}
	return nil
}

func accountTokenAfterUpdateHook(e boil.Executor, o *AccountToken) error {
	*o = AccountToken{}
	return nil
}

func accountTokenBeforeDeleteHook(e boil.Executor, o *AccountToken) error {
	*o = AccountToken{}
	return nil
}

func accountTokenAfterDeleteHook(e boil.Executor, o *AccountToken) error {
	*o = AccountToken{}
	return nil
}

func accountTokenBeforeUpsertHook(e boil.Executor, o *AccountToken) error {
	*o = AccountToken{}
	return nil
}

func accountTokenAfterUpsertHook(e boil.Executor, o *AccountToken) error {
	*o = AccountToken{}
	return nil
}

func testAccountTokensHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &AccountToken{}
	o := &AccountToken{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, accountTokenDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AccountToken object: %s", err)
	}

	AddAccountTokenHook(boil.BeforeInsertHook, accountTokenBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	accountTokenBeforeInsertHooks = []AccountTokenHook{}

	AddAccountTokenHook(boil.AfterInsertHook, accountTokenAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	accountTokenAfterInsertHooks = []AccountTokenHook{}

	AddAccountTokenHook(boil.AfterSelectHook, accountTokenAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	accountTokenAfterSelectHooks = []AccountTokenHook{}

	AddAccountTokenHook(boil.BeforeUpdateHook, accountTokenBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	accountTokenBeforeUpdateHooks = []AccountTokenHook{}

	AddAccountTokenHook(boil.AfterUpdateHook, accountTokenAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	accountTokenAfterUpdateHooks = []AccountTokenHook{}

	AddAccountTokenHook(boil.BeforeDeleteHook, accountTokenBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	accountTokenBeforeDeleteHooks = []AccountTokenHook{}

	AddAccountTokenHook(boil.AfterDeleteHook, accountTokenAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	accountTokenAfterDeleteHooks = []AccountTokenHook{}

	AddAccountTokenHook(boil.BeforeUpsertHook, accountTokenBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	accountTokenBeforeUpsertHooks = []AccountTokenHook{}

	AddAccountTokenHook(boil.AfterUpsertHook, accountTokenAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	accountTokenAfterUpsertHooks = []AccountTokenHook{}
}
func testAccountTokensInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountToken := &AccountToken{}
	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true, accountTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountToken.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := AccountTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccountTokensInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountToken := &AccountToken{}
	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountToken.Insert(tx, accountTokenColumns...); err != nil {
		t.Error(err)
	}

	count, err := AccountTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccountTokenToOneAccountUsingAccount(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local AccountToken
	var foreign Account

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, accountTokenDBTypes, true, accountTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountDBTypes, true, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Account = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.AccountByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AccountTokenSlice{&local}
	if err = local.L.LoadAccount(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Account = nil
	if err = local.L.LoadAccount(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAccountTokenToOneSetOpAccountUsingAccount(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a AccountToken
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, accountTokenDBTypes, false, strmangle.SetComplement(accountTokenPrimaryKeyColumns, accountTokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetAccount(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Account != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AccountTokens[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Account != x.ID {
			t.Error("foreign key was wrong value", a.Account)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Account))
		reflect.Indirect(reflect.ValueOf(&a.Account)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Account != x.ID {
			t.Error("foreign key was wrong value", a.Account, x.ID)
		}
	}
}
func testAccountTokensReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountToken := &AccountToken{}
	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true, accountTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountToken.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = accountToken.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAccountTokensReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountToken := &AccountToken{}
	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true, accountTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountToken.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AccountTokenSlice{accountToken}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testAccountTokensSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountToken := &AccountToken{}
	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true, accountTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountToken.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := AccountTokens(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	accountTokenDBTypes = map[string]string{`Account`: `integer`, `Expires`: `timestamp with time zone`, `Token`: `character varying`}
	_                   = bytes.MinRead
)

func testAccountTokensUpdate(t *testing.T) {
	t.Parallel()

	if len(accountTokenColumns) == len(accountTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	accountToken := &AccountToken{}
	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountToken.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := AccountTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true, accountTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	if err = accountToken.Update(tx); err != nil {
		t.Error(err)
	}
}

func testAccountTokensSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(accountTokenColumns) == len(accountTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	accountToken := &AccountToken{}
	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountToken.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := AccountTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, accountToken, accountTokenDBTypes, true, accountTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(accountTokenColumns, accountTokenPrimaryKeyColumns) {
		fields = accountTokenColumns
	} else {
		fields = strmangle.SetComplement(
			accountTokenColumns,
			accountTokenPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(accountToken))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := AccountTokenSlice{accountToken}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testAccountTokensUpsert(t *testing.T) {
	t.Parallel()

	if len(accountTokenColumns) == len(accountTokenPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	accountToken := AccountToken{}
	if err = randomize.Struct(seed, &accountToken, accountTokenDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountToken.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert AccountToken: %s", err)
	}

	count, err := AccountTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &accountToken, accountTokenDBTypes, false, accountTokenPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}

	if err = accountToken.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert AccountToken: %s", err)
	}

	count, err = AccountTokens(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
