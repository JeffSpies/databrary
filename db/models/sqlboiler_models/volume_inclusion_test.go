// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testVolumeInclusions(t *testing.T) {
	t.Parallel()

	query := VolumeInclusions(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testVolumeInclusionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	volumeInclusion := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusion.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = volumeInclusion.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeInclusions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVolumeInclusionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	volumeInclusion := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusion.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = VolumeInclusions(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := VolumeInclusions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVolumeInclusionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	volumeInclusion := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusion.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := VolumeInclusionSlice{volumeInclusion}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeInclusions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testVolumeInclusionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	volumeInclusion := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true, volumeInclusionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusion.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := VolumeInclusionExists(tx, volumeInclusion.Container, volumeInclusion.Volume)
	if err != nil {
		t.Errorf("Unable to check if VolumeInclusion exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VolumeInclusionExistsG to return true, but got false.")
	}
}
func testVolumeInclusionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	volumeInclusion := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true, volumeInclusionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusion.Insert(tx); err != nil {
		t.Error(err)
	}

	volumeInclusionFound, err := FindVolumeInclusion(tx, volumeInclusion.Container, volumeInclusion.Volume)
	if err != nil {
		t.Error(err)
	}

	if volumeInclusionFound == nil {
		t.Error("want a record, got nil")
	}
}
func testVolumeInclusionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	volumeInclusion := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true, volumeInclusionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusion.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = VolumeInclusions(tx).Bind(volumeInclusion); err != nil {
		t.Error(err)
	}
}

func testVolumeInclusionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	volumeInclusion := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true, volumeInclusionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusion.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := VolumeInclusions(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVolumeInclusionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	volumeInclusionOne := &VolumeInclusion{}
	volumeInclusionTwo := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusionOne, volumeInclusionDBTypes, false, volumeInclusionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}
	if err = randomize.Struct(seed, volumeInclusionTwo, volumeInclusionDBTypes, false, volumeInclusionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = volumeInclusionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := VolumeInclusions(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVolumeInclusionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeInclusionOne := &VolumeInclusion{}
	volumeInclusionTwo := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusionOne, volumeInclusionDBTypes, false, volumeInclusionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}
	if err = randomize.Struct(seed, volumeInclusionTwo, volumeInclusionDBTypes, false, volumeInclusionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = volumeInclusionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeInclusions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func volumeInclusionBeforeInsertHook(e boil.Executor, o *VolumeInclusion) error {
	*o = VolumeInclusion{}
	return nil
}

func volumeInclusionAfterInsertHook(e boil.Executor, o *VolumeInclusion) error {
	*o = VolumeInclusion{}
	return nil
}

func volumeInclusionAfterSelectHook(e boil.Executor, o *VolumeInclusion) error {
	*o = VolumeInclusion{}
	return nil
}

func volumeInclusionBeforeUpdateHook(e boil.Executor, o *VolumeInclusion) error {
	*o = VolumeInclusion{}
	return nil
}

func volumeInclusionAfterUpdateHook(e boil.Executor, o *VolumeInclusion) error {
	*o = VolumeInclusion{}
	return nil
}

func volumeInclusionBeforeDeleteHook(e boil.Executor, o *VolumeInclusion) error {
	*o = VolumeInclusion{}
	return nil
}

func volumeInclusionAfterDeleteHook(e boil.Executor, o *VolumeInclusion) error {
	*o = VolumeInclusion{}
	return nil
}

func volumeInclusionBeforeUpsertHook(e boil.Executor, o *VolumeInclusion) error {
	*o = VolumeInclusion{}
	return nil
}

func volumeInclusionAfterUpsertHook(e boil.Executor, o *VolumeInclusion) error {
	*o = VolumeInclusion{}
	return nil
}

func testVolumeInclusionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &VolumeInclusion{}
	o := &VolumeInclusion{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, volumeInclusionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion object: %s", err)
	}

	AddVolumeInclusionHook(boil.BeforeInsertHook, volumeInclusionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	volumeInclusionBeforeInsertHooks = []VolumeInclusionHook{}

	AddVolumeInclusionHook(boil.AfterInsertHook, volumeInclusionAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	volumeInclusionAfterInsertHooks = []VolumeInclusionHook{}

	AddVolumeInclusionHook(boil.AfterSelectHook, volumeInclusionAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	volumeInclusionAfterSelectHooks = []VolumeInclusionHook{}

	AddVolumeInclusionHook(boil.BeforeUpdateHook, volumeInclusionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	volumeInclusionBeforeUpdateHooks = []VolumeInclusionHook{}

	AddVolumeInclusionHook(boil.AfterUpdateHook, volumeInclusionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	volumeInclusionAfterUpdateHooks = []VolumeInclusionHook{}

	AddVolumeInclusionHook(boil.BeforeDeleteHook, volumeInclusionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	volumeInclusionBeforeDeleteHooks = []VolumeInclusionHook{}

	AddVolumeInclusionHook(boil.AfterDeleteHook, volumeInclusionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	volumeInclusionAfterDeleteHooks = []VolumeInclusionHook{}

	AddVolumeInclusionHook(boil.BeforeUpsertHook, volumeInclusionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	volumeInclusionBeforeUpsertHooks = []VolumeInclusionHook{}

	AddVolumeInclusionHook(boil.AfterUpsertHook, volumeInclusionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	volumeInclusionAfterUpsertHooks = []VolumeInclusionHook{}
}
func testVolumeInclusionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	volumeInclusion := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true, volumeInclusionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusion.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeInclusions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVolumeInclusionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	volumeInclusion := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusion.Insert(tx, volumeInclusionColumns...); err != nil {
		t.Error(err)
	}

	count, err := VolumeInclusions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVolumeInclusionToOneContainerUsingContainer(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local VolumeInclusion
	var foreign Container

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, volumeInclusionDBTypes, true, volumeInclusionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, containerDBTypes, true, containerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Container = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.ContainerByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := VolumeInclusionSlice{&local}
	if err = local.L.LoadContainer(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Container == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Container = nil
	if err = local.L.LoadContainer(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Container == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVolumeInclusionToOneVolumeUsingVolume(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local VolumeInclusion
	var foreign Volume

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, volumeInclusionDBTypes, true, volumeInclusionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, volumeDBTypes, true, volumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Volume = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.VolumeByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := VolumeInclusionSlice{&local}
	if err = local.L.LoadVolume(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Volume = nil
	if err = local.L.LoadVolume(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVolumeInclusionToOneSetOpContainerUsingContainer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a VolumeInclusion
	var b, c Container

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, volumeInclusionDBTypes, false, strmangle.SetComplement(volumeInclusionPrimaryKeyColumns, volumeInclusionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, containerDBTypes, false, strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, containerDBTypes, false, strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Container{&b, &c} {
		err = a.SetContainer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Container != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VolumeInclusions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Container != x.ID {
			t.Error("foreign key was wrong value", a.Container)
		}

		if exists, err := VolumeInclusionExists(tx, a.Container, a.Volume); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testVolumeInclusionToOneSetOpVolumeUsingVolume(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a VolumeInclusion
	var b, c Volume

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, volumeInclusionDBTypes, false, strmangle.SetComplement(volumeInclusionPrimaryKeyColumns, volumeInclusionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, volumeDBTypes, false, strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, volumeDBTypes, false, strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Volume{&b, &c} {
		err = a.SetVolume(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Volume != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VolumeInclusions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Volume != x.ID {
			t.Error("foreign key was wrong value", a.Volume)
		}

		if exists, err := VolumeInclusionExists(tx, a.Container, a.Volume); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testVolumeInclusionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	volumeInclusion := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true, volumeInclusionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusion.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = volumeInclusion.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testVolumeInclusionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	volumeInclusion := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true, volumeInclusionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusion.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := VolumeInclusionSlice{volumeInclusion}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testVolumeInclusionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	volumeInclusion := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true, volumeInclusionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusion.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := VolumeInclusions(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	volumeInclusionDBTypes = map[string]string{`Container`: `integer`, `Segment`: `segment`, `Volume`: `integer`}
	_                      = bytes.MinRead
)

func testVolumeInclusionsUpdate(t *testing.T) {
	t.Parallel()

	if len(volumeInclusionColumns) == len(volumeInclusionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	volumeInclusion := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusion.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeInclusions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true, volumeInclusionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	if err = volumeInclusion.Update(tx); err != nil {
		t.Error(err)
	}
}

func testVolumeInclusionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(volumeInclusionColumns) == len(volumeInclusionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	volumeInclusion := &VolumeInclusion{}
	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusion.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeInclusions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, volumeInclusion, volumeInclusionDBTypes, true, volumeInclusionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(volumeInclusionColumns, volumeInclusionPrimaryKeyColumns) {
		fields = volumeInclusionColumns
	} else {
		fields = strmangle.SetComplement(
			volumeInclusionColumns,
			volumeInclusionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(volumeInclusion))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := VolumeInclusionSlice{volumeInclusion}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testVolumeInclusionsUpsert(t *testing.T) {
	t.Parallel()

	if len(volumeInclusionColumns) == len(volumeInclusionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	volumeInclusion := VolumeInclusion{}
	if err = randomize.Struct(seed, &volumeInclusion, volumeInclusionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeInclusion.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert VolumeInclusion: %s", err)
	}

	count, err := VolumeInclusions(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &volumeInclusion, volumeInclusionDBTypes, false, volumeInclusionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}

	if err = volumeInclusion.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert VolumeInclusion: %s", err)
	}

	count, err = VolumeInclusions(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
