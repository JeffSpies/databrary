// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Authorizes", testAuthorizes)
	t.Run("VolumeOwners", testVolumeOwners)
	t.Run("VolumeAccesses", testVolumeAccesses)
	t.Run("VolumeLinks", testVolumeLinks)
	t.Run("Funders", testFunders)
	t.Run("VolumeFundings", testVolumeFundings)
	t.Run("SlotReleases", testSlotReleases)
	t.Run("VolumeInclusions", testVolumeInclusions)
	t.Run("Formats", testFormats)
	t.Run("Excerpts", testExcerpts)
	t.Run("SlotAssets", testSlotAssets)
	t.Run("AssetRevisions", testAssetRevisions)
	t.Run("Transcodes", testTranscodes)
	t.Run("TagUses", testTagUses)
	t.Run("KeywordUses", testKeywordUses)
	t.Run("Categories", testCategories)
	t.Run("Metrics", testMetrics)
	t.Run("RecordMeasures", testRecordMeasures)
	t.Run("MeasureTexts", testMeasureTexts)
	t.Run("MeasureNumerics", testMeasureNumerics)
	t.Run("MeasureDates", testMeasureDates)
	t.Run("SlotRecords", testSlotRecords)
	t.Run("Tokens", testTokens)
	t.Run("AccountTokens", testAccountTokens)
	t.Run("LoginTokens", testLoginTokens)
	t.Run("Sessions", testSessions)
	t.Run("Uploads", testUploads)
	t.Run("Avatars", testAvatars)
	t.Run("VolumeCitations", testVolumeCitations)
	t.Run("Notifies", testNotifies)
	t.Run("Accounts", testAccounts)
	t.Run("Notices", testNotices)
	t.Run("Parties", testParties)
	t.Run("Comments", testComments)
	t.Run("Tags", testTags)
	t.Run("Notifications", testNotifications)
	t.Run("VolumeStates", testVolumeStates)
	t.Run("Assets", testAssets)
	t.Run("Containers", testContainers)
	t.Run("Records", testRecords)
	t.Run("Volumes", testVolumes)
}

func TestDelete(t *testing.T) {
	t.Run("Authorizes", testAuthorizesDelete)
	t.Run("VolumeOwners", testVolumeOwnersDelete)
	t.Run("VolumeAccesses", testVolumeAccessesDelete)
	t.Run("VolumeLinks", testVolumeLinksDelete)
	t.Run("Funders", testFundersDelete)
	t.Run("VolumeFundings", testVolumeFundingsDelete)
	t.Run("SlotReleases", testSlotReleasesDelete)
	t.Run("VolumeInclusions", testVolumeInclusionsDelete)
	t.Run("Formats", testFormatsDelete)
	t.Run("Excerpts", testExcerptsDelete)
	t.Run("SlotAssets", testSlotAssetsDelete)
	t.Run("AssetRevisions", testAssetRevisionsDelete)
	t.Run("Transcodes", testTranscodesDelete)
	t.Run("TagUses", testTagUsesDelete)
	t.Run("KeywordUses", testKeywordUsesDelete)
	t.Run("Categories", testCategoriesDelete)
	t.Run("Metrics", testMetricsDelete)
	t.Run("RecordMeasures", testRecordMeasuresDelete)
	t.Run("MeasureTexts", testMeasureTextsDelete)
	t.Run("MeasureNumerics", testMeasureNumericsDelete)
	t.Run("MeasureDates", testMeasureDatesDelete)
	t.Run("SlotRecords", testSlotRecordsDelete)
	t.Run("Tokens", testTokensDelete)
	t.Run("AccountTokens", testAccountTokensDelete)
	t.Run("LoginTokens", testLoginTokensDelete)
	t.Run("Sessions", testSessionsDelete)
	t.Run("Uploads", testUploadsDelete)
	t.Run("Avatars", testAvatarsDelete)
	t.Run("VolumeCitations", testVolumeCitationsDelete)
	t.Run("Notifies", testNotifiesDelete)
	t.Run("Accounts", testAccountsDelete)
	t.Run("Notices", testNoticesDelete)
	t.Run("Parties", testPartiesDelete)
	t.Run("Comments", testCommentsDelete)
	t.Run("Tags", testTagsDelete)
	t.Run("Notifications", testNotificationsDelete)
	t.Run("VolumeStates", testVolumeStatesDelete)
	t.Run("Assets", testAssetsDelete)
	t.Run("Containers", testContainersDelete)
	t.Run("Records", testRecordsDelete)
	t.Run("Volumes", testVolumesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Authorizes", testAuthorizesQueryDeleteAll)
	t.Run("VolumeOwners", testVolumeOwnersQueryDeleteAll)
	t.Run("VolumeAccesses", testVolumeAccessesQueryDeleteAll)
	t.Run("VolumeLinks", testVolumeLinksQueryDeleteAll)
	t.Run("Funders", testFundersQueryDeleteAll)
	t.Run("VolumeFundings", testVolumeFundingsQueryDeleteAll)
	t.Run("SlotReleases", testSlotReleasesQueryDeleteAll)
	t.Run("VolumeInclusions", testVolumeInclusionsQueryDeleteAll)
	t.Run("Formats", testFormatsQueryDeleteAll)
	t.Run("Excerpts", testExcerptsQueryDeleteAll)
	t.Run("SlotAssets", testSlotAssetsQueryDeleteAll)
	t.Run("AssetRevisions", testAssetRevisionsQueryDeleteAll)
	t.Run("Transcodes", testTranscodesQueryDeleteAll)
	t.Run("TagUses", testTagUsesQueryDeleteAll)
	t.Run("KeywordUses", testKeywordUsesQueryDeleteAll)
	t.Run("Categories", testCategoriesQueryDeleteAll)
	t.Run("Metrics", testMetricsQueryDeleteAll)
	t.Run("RecordMeasures", testRecordMeasuresQueryDeleteAll)
	t.Run("MeasureTexts", testMeasureTextsQueryDeleteAll)
	t.Run("MeasureNumerics", testMeasureNumericsQueryDeleteAll)
	t.Run("MeasureDates", testMeasureDatesQueryDeleteAll)
	t.Run("SlotRecords", testSlotRecordsQueryDeleteAll)
	t.Run("Tokens", testTokensQueryDeleteAll)
	t.Run("AccountTokens", testAccountTokensQueryDeleteAll)
	t.Run("LoginTokens", testLoginTokensQueryDeleteAll)
	t.Run("Sessions", testSessionsQueryDeleteAll)
	t.Run("Uploads", testUploadsQueryDeleteAll)
	t.Run("Avatars", testAvatarsQueryDeleteAll)
	t.Run("VolumeCitations", testVolumeCitationsQueryDeleteAll)
	t.Run("Notifies", testNotifiesQueryDeleteAll)
	t.Run("Accounts", testAccountsQueryDeleteAll)
	t.Run("Notices", testNoticesQueryDeleteAll)
	t.Run("Parties", testPartiesQueryDeleteAll)
	t.Run("Comments", testCommentsQueryDeleteAll)
	t.Run("Tags", testTagsQueryDeleteAll)
	t.Run("Notifications", testNotificationsQueryDeleteAll)
	t.Run("VolumeStates", testVolumeStatesQueryDeleteAll)
	t.Run("Assets", testAssetsQueryDeleteAll)
	t.Run("Containers", testContainersQueryDeleteAll)
	t.Run("Records", testRecordsQueryDeleteAll)
	t.Run("Volumes", testVolumesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Authorizes", testAuthorizesSliceDeleteAll)
	t.Run("VolumeOwners", testVolumeOwnersSliceDeleteAll)
	t.Run("VolumeAccesses", testVolumeAccessesSliceDeleteAll)
	t.Run("VolumeLinks", testVolumeLinksSliceDeleteAll)
	t.Run("Funders", testFundersSliceDeleteAll)
	t.Run("VolumeFundings", testVolumeFundingsSliceDeleteAll)
	t.Run("SlotReleases", testSlotReleasesSliceDeleteAll)
	t.Run("VolumeInclusions", testVolumeInclusionsSliceDeleteAll)
	t.Run("Formats", testFormatsSliceDeleteAll)
	t.Run("Excerpts", testExcerptsSliceDeleteAll)
	t.Run("SlotAssets", testSlotAssetsSliceDeleteAll)
	t.Run("AssetRevisions", testAssetRevisionsSliceDeleteAll)
	t.Run("Transcodes", testTranscodesSliceDeleteAll)
	t.Run("TagUses", testTagUsesSliceDeleteAll)
	t.Run("KeywordUses", testKeywordUsesSliceDeleteAll)
	t.Run("Categories", testCategoriesSliceDeleteAll)
	t.Run("Metrics", testMetricsSliceDeleteAll)
	t.Run("RecordMeasures", testRecordMeasuresSliceDeleteAll)
	t.Run("MeasureTexts", testMeasureTextsSliceDeleteAll)
	t.Run("MeasureNumerics", testMeasureNumericsSliceDeleteAll)
	t.Run("MeasureDates", testMeasureDatesSliceDeleteAll)
	t.Run("SlotRecords", testSlotRecordsSliceDeleteAll)
	t.Run("Tokens", testTokensSliceDeleteAll)
	t.Run("AccountTokens", testAccountTokensSliceDeleteAll)
	t.Run("LoginTokens", testLoginTokensSliceDeleteAll)
	t.Run("Sessions", testSessionsSliceDeleteAll)
	t.Run("Uploads", testUploadsSliceDeleteAll)
	t.Run("Avatars", testAvatarsSliceDeleteAll)
	t.Run("VolumeCitations", testVolumeCitationsSliceDeleteAll)
	t.Run("Notifies", testNotifiesSliceDeleteAll)
	t.Run("Accounts", testAccountsSliceDeleteAll)
	t.Run("Notices", testNoticesSliceDeleteAll)
	t.Run("Parties", testPartiesSliceDeleteAll)
	t.Run("Comments", testCommentsSliceDeleteAll)
	t.Run("Tags", testTagsSliceDeleteAll)
	t.Run("Notifications", testNotificationsSliceDeleteAll)
	t.Run("VolumeStates", testVolumeStatesSliceDeleteAll)
	t.Run("Assets", testAssetsSliceDeleteAll)
	t.Run("Containers", testContainersSliceDeleteAll)
	t.Run("Records", testRecordsSliceDeleteAll)
	t.Run("Volumes", testVolumesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Authorizes", testAuthorizesExists)
	t.Run("VolumeOwners", testVolumeOwnersExists)
	t.Run("VolumeAccesses", testVolumeAccessesExists)
	t.Run("VolumeLinks", testVolumeLinksExists)
	t.Run("Funders", testFundersExists)
	t.Run("VolumeFundings", testVolumeFundingsExists)
	t.Run("SlotReleases", testSlotReleasesExists)
	t.Run("VolumeInclusions", testVolumeInclusionsExists)
	t.Run("Formats", testFormatsExists)
	t.Run("Excerpts", testExcerptsExists)
	t.Run("SlotAssets", testSlotAssetsExists)
	t.Run("AssetRevisions", testAssetRevisionsExists)
	t.Run("Transcodes", testTranscodesExists)
	t.Run("TagUses", testTagUsesExists)
	t.Run("KeywordUses", testKeywordUsesExists)
	t.Run("Categories", testCategoriesExists)
	t.Run("Metrics", testMetricsExists)
	t.Run("RecordMeasures", testRecordMeasuresExists)
	t.Run("MeasureTexts", testMeasureTextsExists)
	t.Run("MeasureNumerics", testMeasureNumericsExists)
	t.Run("MeasureDates", testMeasureDatesExists)
	t.Run("SlotRecords", testSlotRecordsExists)
	t.Run("Tokens", testTokensExists)
	t.Run("AccountTokens", testAccountTokensExists)
	t.Run("LoginTokens", testLoginTokensExists)
	t.Run("Sessions", testSessionsExists)
	t.Run("Uploads", testUploadsExists)
	t.Run("Avatars", testAvatarsExists)
	t.Run("VolumeCitations", testVolumeCitationsExists)
	t.Run("Notifies", testNotifiesExists)
	t.Run("Accounts", testAccountsExists)
	t.Run("Notices", testNoticesExists)
	t.Run("Parties", testPartiesExists)
	t.Run("Comments", testCommentsExists)
	t.Run("Tags", testTagsExists)
	t.Run("Notifications", testNotificationsExists)
	t.Run("VolumeStates", testVolumeStatesExists)
	t.Run("Assets", testAssetsExists)
	t.Run("Containers", testContainersExists)
	t.Run("Records", testRecordsExists)
	t.Run("Volumes", testVolumesExists)
}

func TestFind(t *testing.T) {
	t.Run("Authorizes", testAuthorizesFind)
	t.Run("VolumeOwners", testVolumeOwnersFind)
	t.Run("VolumeAccesses", testVolumeAccessesFind)
	t.Run("VolumeLinks", testVolumeLinksFind)
	t.Run("Funders", testFundersFind)
	t.Run("VolumeFundings", testVolumeFundingsFind)
	t.Run("SlotReleases", testSlotReleasesFind)
	t.Run("VolumeInclusions", testVolumeInclusionsFind)
	t.Run("Formats", testFormatsFind)
	t.Run("Excerpts", testExcerptsFind)
	t.Run("SlotAssets", testSlotAssetsFind)
	t.Run("AssetRevisions", testAssetRevisionsFind)
	t.Run("Transcodes", testTranscodesFind)
	t.Run("TagUses", testTagUsesFind)
	t.Run("KeywordUses", testKeywordUsesFind)
	t.Run("Categories", testCategoriesFind)
	t.Run("Metrics", testMetricsFind)
	t.Run("RecordMeasures", testRecordMeasuresFind)
	t.Run("MeasureTexts", testMeasureTextsFind)
	t.Run("MeasureNumerics", testMeasureNumericsFind)
	t.Run("MeasureDates", testMeasureDatesFind)
	t.Run("SlotRecords", testSlotRecordsFind)
	t.Run("Tokens", testTokensFind)
	t.Run("AccountTokens", testAccountTokensFind)
	t.Run("LoginTokens", testLoginTokensFind)
	t.Run("Sessions", testSessionsFind)
	t.Run("Uploads", testUploadsFind)
	t.Run("Avatars", testAvatarsFind)
	t.Run("VolumeCitations", testVolumeCitationsFind)
	t.Run("Notifies", testNotifiesFind)
	t.Run("Accounts", testAccountsFind)
	t.Run("Notices", testNoticesFind)
	t.Run("Parties", testPartiesFind)
	t.Run("Comments", testCommentsFind)
	t.Run("Tags", testTagsFind)
	t.Run("Notifications", testNotificationsFind)
	t.Run("VolumeStates", testVolumeStatesFind)
	t.Run("Assets", testAssetsFind)
	t.Run("Containers", testContainersFind)
	t.Run("Records", testRecordsFind)
	t.Run("Volumes", testVolumesFind)
}

func TestBind(t *testing.T) {
	t.Run("Authorizes", testAuthorizesBind)
	t.Run("VolumeOwners", testVolumeOwnersBind)
	t.Run("VolumeAccesses", testVolumeAccessesBind)
	t.Run("VolumeLinks", testVolumeLinksBind)
	t.Run("Funders", testFundersBind)
	t.Run("VolumeFundings", testVolumeFundingsBind)
	t.Run("SlotReleases", testSlotReleasesBind)
	t.Run("VolumeInclusions", testVolumeInclusionsBind)
	t.Run("Formats", testFormatsBind)
	t.Run("Excerpts", testExcerptsBind)
	t.Run("SlotAssets", testSlotAssetsBind)
	t.Run("AssetRevisions", testAssetRevisionsBind)
	t.Run("Transcodes", testTranscodesBind)
	t.Run("TagUses", testTagUsesBind)
	t.Run("KeywordUses", testKeywordUsesBind)
	t.Run("Categories", testCategoriesBind)
	t.Run("Metrics", testMetricsBind)
	t.Run("RecordMeasures", testRecordMeasuresBind)
	t.Run("MeasureTexts", testMeasureTextsBind)
	t.Run("MeasureNumerics", testMeasureNumericsBind)
	t.Run("MeasureDates", testMeasureDatesBind)
	t.Run("SlotRecords", testSlotRecordsBind)
	t.Run("Tokens", testTokensBind)
	t.Run("AccountTokens", testAccountTokensBind)
	t.Run("LoginTokens", testLoginTokensBind)
	t.Run("Sessions", testSessionsBind)
	t.Run("Uploads", testUploadsBind)
	t.Run("Avatars", testAvatarsBind)
	t.Run("VolumeCitations", testVolumeCitationsBind)
	t.Run("Notifies", testNotifiesBind)
	t.Run("Accounts", testAccountsBind)
	t.Run("Notices", testNoticesBind)
	t.Run("Parties", testPartiesBind)
	t.Run("Comments", testCommentsBind)
	t.Run("Tags", testTagsBind)
	t.Run("Notifications", testNotificationsBind)
	t.Run("VolumeStates", testVolumeStatesBind)
	t.Run("Assets", testAssetsBind)
	t.Run("Containers", testContainersBind)
	t.Run("Records", testRecordsBind)
	t.Run("Volumes", testVolumesBind)
}

func TestOne(t *testing.T) {
	t.Run("Authorizes", testAuthorizesOne)
	t.Run("VolumeOwners", testVolumeOwnersOne)
	t.Run("VolumeAccesses", testVolumeAccessesOne)
	t.Run("VolumeLinks", testVolumeLinksOne)
	t.Run("Funders", testFundersOne)
	t.Run("VolumeFundings", testVolumeFundingsOne)
	t.Run("SlotReleases", testSlotReleasesOne)
	t.Run("VolumeInclusions", testVolumeInclusionsOne)
	t.Run("Formats", testFormatsOne)
	t.Run("Excerpts", testExcerptsOne)
	t.Run("SlotAssets", testSlotAssetsOne)
	t.Run("AssetRevisions", testAssetRevisionsOne)
	t.Run("Transcodes", testTranscodesOne)
	t.Run("TagUses", testTagUsesOne)
	t.Run("KeywordUses", testKeywordUsesOne)
	t.Run("Categories", testCategoriesOne)
	t.Run("Metrics", testMetricsOne)
	t.Run("RecordMeasures", testRecordMeasuresOne)
	t.Run("MeasureTexts", testMeasureTextsOne)
	t.Run("MeasureNumerics", testMeasureNumericsOne)
	t.Run("MeasureDates", testMeasureDatesOne)
	t.Run("SlotRecords", testSlotRecordsOne)
	t.Run("Tokens", testTokensOne)
	t.Run("AccountTokens", testAccountTokensOne)
	t.Run("LoginTokens", testLoginTokensOne)
	t.Run("Sessions", testSessionsOne)
	t.Run("Uploads", testUploadsOne)
	t.Run("Avatars", testAvatarsOne)
	t.Run("VolumeCitations", testVolumeCitationsOne)
	t.Run("Notifies", testNotifiesOne)
	t.Run("Accounts", testAccountsOne)
	t.Run("Notices", testNoticesOne)
	t.Run("Parties", testPartiesOne)
	t.Run("Comments", testCommentsOne)
	t.Run("Tags", testTagsOne)
	t.Run("Notifications", testNotificationsOne)
	t.Run("VolumeStates", testVolumeStatesOne)
	t.Run("Assets", testAssetsOne)
	t.Run("Containers", testContainersOne)
	t.Run("Records", testRecordsOne)
	t.Run("Volumes", testVolumesOne)
}

func TestAll(t *testing.T) {
	t.Run("Authorizes", testAuthorizesAll)
	t.Run("VolumeOwners", testVolumeOwnersAll)
	t.Run("VolumeAccesses", testVolumeAccessesAll)
	t.Run("VolumeLinks", testVolumeLinksAll)
	t.Run("Funders", testFundersAll)
	t.Run("VolumeFundings", testVolumeFundingsAll)
	t.Run("SlotReleases", testSlotReleasesAll)
	t.Run("VolumeInclusions", testVolumeInclusionsAll)
	t.Run("Formats", testFormatsAll)
	t.Run("Excerpts", testExcerptsAll)
	t.Run("SlotAssets", testSlotAssetsAll)
	t.Run("AssetRevisions", testAssetRevisionsAll)
	t.Run("Transcodes", testTranscodesAll)
	t.Run("TagUses", testTagUsesAll)
	t.Run("KeywordUses", testKeywordUsesAll)
	t.Run("Categories", testCategoriesAll)
	t.Run("Metrics", testMetricsAll)
	t.Run("RecordMeasures", testRecordMeasuresAll)
	t.Run("MeasureTexts", testMeasureTextsAll)
	t.Run("MeasureNumerics", testMeasureNumericsAll)
	t.Run("MeasureDates", testMeasureDatesAll)
	t.Run("SlotRecords", testSlotRecordsAll)
	t.Run("Tokens", testTokensAll)
	t.Run("AccountTokens", testAccountTokensAll)
	t.Run("LoginTokens", testLoginTokensAll)
	t.Run("Sessions", testSessionsAll)
	t.Run("Uploads", testUploadsAll)
	t.Run("Avatars", testAvatarsAll)
	t.Run("VolumeCitations", testVolumeCitationsAll)
	t.Run("Notifies", testNotifiesAll)
	t.Run("Accounts", testAccountsAll)
	t.Run("Notices", testNoticesAll)
	t.Run("Parties", testPartiesAll)
	t.Run("Comments", testCommentsAll)
	t.Run("Tags", testTagsAll)
	t.Run("Notifications", testNotificationsAll)
	t.Run("VolumeStates", testVolumeStatesAll)
	t.Run("Assets", testAssetsAll)
	t.Run("Containers", testContainersAll)
	t.Run("Records", testRecordsAll)
	t.Run("Volumes", testVolumesAll)
}

func TestCount(t *testing.T) {
	t.Run("Authorizes", testAuthorizesCount)
	t.Run("VolumeOwners", testVolumeOwnersCount)
	t.Run("VolumeAccesses", testVolumeAccessesCount)
	t.Run("VolumeLinks", testVolumeLinksCount)
	t.Run("Funders", testFundersCount)
	t.Run("VolumeFundings", testVolumeFundingsCount)
	t.Run("SlotReleases", testSlotReleasesCount)
	t.Run("VolumeInclusions", testVolumeInclusionsCount)
	t.Run("Formats", testFormatsCount)
	t.Run("Excerpts", testExcerptsCount)
	t.Run("SlotAssets", testSlotAssetsCount)
	t.Run("AssetRevisions", testAssetRevisionsCount)
	t.Run("Transcodes", testTranscodesCount)
	t.Run("TagUses", testTagUsesCount)
	t.Run("KeywordUses", testKeywordUsesCount)
	t.Run("Categories", testCategoriesCount)
	t.Run("Metrics", testMetricsCount)
	t.Run("RecordMeasures", testRecordMeasuresCount)
	t.Run("MeasureTexts", testMeasureTextsCount)
	t.Run("MeasureNumerics", testMeasureNumericsCount)
	t.Run("MeasureDates", testMeasureDatesCount)
	t.Run("SlotRecords", testSlotRecordsCount)
	t.Run("Tokens", testTokensCount)
	t.Run("AccountTokens", testAccountTokensCount)
	t.Run("LoginTokens", testLoginTokensCount)
	t.Run("Sessions", testSessionsCount)
	t.Run("Uploads", testUploadsCount)
	t.Run("Avatars", testAvatarsCount)
	t.Run("VolumeCitations", testVolumeCitationsCount)
	t.Run("Notifies", testNotifiesCount)
	t.Run("Accounts", testAccountsCount)
	t.Run("Notices", testNoticesCount)
	t.Run("Parties", testPartiesCount)
	t.Run("Comments", testCommentsCount)
	t.Run("Tags", testTagsCount)
	t.Run("Notifications", testNotificationsCount)
	t.Run("VolumeStates", testVolumeStatesCount)
	t.Run("Assets", testAssetsCount)
	t.Run("Containers", testContainersCount)
	t.Run("Records", testRecordsCount)
	t.Run("Volumes", testVolumesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Authorizes", testAuthorizesHooks)
	t.Run("VolumeOwners", testVolumeOwnersHooks)
	t.Run("VolumeAccesses", testVolumeAccessesHooks)
	t.Run("VolumeLinks", testVolumeLinksHooks)
	t.Run("Funders", testFundersHooks)
	t.Run("VolumeFundings", testVolumeFundingsHooks)
	t.Run("SlotReleases", testSlotReleasesHooks)
	t.Run("VolumeInclusions", testVolumeInclusionsHooks)
	t.Run("Formats", testFormatsHooks)
	t.Run("Excerpts", testExcerptsHooks)
	t.Run("SlotAssets", testSlotAssetsHooks)
	t.Run("AssetRevisions", testAssetRevisionsHooks)
	t.Run("Transcodes", testTranscodesHooks)
	t.Run("TagUses", testTagUsesHooks)
	t.Run("KeywordUses", testKeywordUsesHooks)
	t.Run("Categories", testCategoriesHooks)
	t.Run("Metrics", testMetricsHooks)
	t.Run("RecordMeasures", testRecordMeasuresHooks)
	t.Run("MeasureTexts", testMeasureTextsHooks)
	t.Run("MeasureNumerics", testMeasureNumericsHooks)
	t.Run("MeasureDates", testMeasureDatesHooks)
	t.Run("SlotRecords", testSlotRecordsHooks)
	t.Run("Tokens", testTokensHooks)
	t.Run("AccountTokens", testAccountTokensHooks)
	t.Run("LoginTokens", testLoginTokensHooks)
	t.Run("Sessions", testSessionsHooks)
	t.Run("Uploads", testUploadsHooks)
	t.Run("Avatars", testAvatarsHooks)
	t.Run("VolumeCitations", testVolumeCitationsHooks)
	t.Run("Notifies", testNotifiesHooks)
	t.Run("Accounts", testAccountsHooks)
	t.Run("Notices", testNoticesHooks)
	t.Run("Parties", testPartiesHooks)
	t.Run("Comments", testCommentsHooks)
	t.Run("Tags", testTagsHooks)
	t.Run("Notifications", testNotificationsHooks)
	t.Run("VolumeStates", testVolumeStatesHooks)
	t.Run("Assets", testAssetsHooks)
	t.Run("Containers", testContainersHooks)
	t.Run("Records", testRecordsHooks)
	t.Run("Volumes", testVolumesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Authorizes", testAuthorizesInsert)
	t.Run("Authorizes", testAuthorizesInsertWhitelist)
	t.Run("VolumeOwners", testVolumeOwnersInsert)
	t.Run("VolumeOwners", testVolumeOwnersInsertWhitelist)
	t.Run("VolumeAccesses", testVolumeAccessesInsert)
	t.Run("VolumeAccesses", testVolumeAccessesInsertWhitelist)
	t.Run("VolumeLinks", testVolumeLinksInsert)
	t.Run("VolumeLinks", testVolumeLinksInsertWhitelist)
	t.Run("Funders", testFundersInsert)
	t.Run("Funders", testFundersInsertWhitelist)
	t.Run("VolumeFundings", testVolumeFundingsInsert)
	t.Run("VolumeFundings", testVolumeFundingsInsertWhitelist)
	t.Run("SlotReleases", testSlotReleasesInsert)
	t.Run("SlotReleases", testSlotReleasesInsertWhitelist)
	t.Run("VolumeInclusions", testVolumeInclusionsInsert)
	t.Run("VolumeInclusions", testVolumeInclusionsInsertWhitelist)
	t.Run("Formats", testFormatsInsert)
	t.Run("Formats", testFormatsInsertWhitelist)
	t.Run("Excerpts", testExcerptsInsert)
	t.Run("Excerpts", testExcerptsInsertWhitelist)
	t.Run("SlotAssets", testSlotAssetsInsert)
	t.Run("SlotAssets", testSlotAssetsInsertWhitelist)
	t.Run("AssetRevisions", testAssetRevisionsInsert)
	t.Run("AssetRevisions", testAssetRevisionsInsertWhitelist)
	t.Run("Transcodes", testTranscodesInsert)
	t.Run("Transcodes", testTranscodesInsertWhitelist)
	t.Run("TagUses", testTagUsesInsert)
	t.Run("TagUses", testTagUsesInsertWhitelist)
	t.Run("KeywordUses", testKeywordUsesInsert)
	t.Run("KeywordUses", testKeywordUsesInsertWhitelist)
	t.Run("Categories", testCategoriesInsert)
	t.Run("Categories", testCategoriesInsertWhitelist)
	t.Run("Metrics", testMetricsInsert)
	t.Run("Metrics", testMetricsInsertWhitelist)
	t.Run("RecordMeasures", testRecordMeasuresInsert)
	t.Run("RecordMeasures", testRecordMeasuresInsertWhitelist)
	t.Run("MeasureTexts", testMeasureTextsInsert)
	t.Run("MeasureTexts", testMeasureTextsInsertWhitelist)
	t.Run("MeasureNumerics", testMeasureNumericsInsert)
	t.Run("MeasureNumerics", testMeasureNumericsInsertWhitelist)
	t.Run("MeasureDates", testMeasureDatesInsert)
	t.Run("MeasureDates", testMeasureDatesInsertWhitelist)
	t.Run("SlotRecords", testSlotRecordsInsert)
	t.Run("SlotRecords", testSlotRecordsInsertWhitelist)
	t.Run("Tokens", testTokensInsert)
	t.Run("Tokens", testTokensInsertWhitelist)
	t.Run("AccountTokens", testAccountTokensInsert)
	t.Run("AccountTokens", testAccountTokensInsertWhitelist)
	t.Run("LoginTokens", testLoginTokensInsert)
	t.Run("LoginTokens", testLoginTokensInsertWhitelist)
	t.Run("Sessions", testSessionsInsert)
	t.Run("Sessions", testSessionsInsertWhitelist)
	t.Run("Uploads", testUploadsInsert)
	t.Run("Uploads", testUploadsInsertWhitelist)
	t.Run("Avatars", testAvatarsInsert)
	t.Run("Avatars", testAvatarsInsertWhitelist)
	t.Run("VolumeCitations", testVolumeCitationsInsert)
	t.Run("VolumeCitations", testVolumeCitationsInsertWhitelist)
	t.Run("Notifies", testNotifiesInsert)
	t.Run("Notifies", testNotifiesInsertWhitelist)
	t.Run("Accounts", testAccountsInsert)
	t.Run("Accounts", testAccountsInsertWhitelist)
	t.Run("Notices", testNoticesInsert)
	t.Run("Notices", testNoticesInsertWhitelist)
	t.Run("Parties", testPartiesInsert)
	t.Run("Parties", testPartiesInsertWhitelist)
	t.Run("Comments", testCommentsInsert)
	t.Run("Comments", testCommentsInsertWhitelist)
	t.Run("Tags", testTagsInsert)
	t.Run("Tags", testTagsInsertWhitelist)
	t.Run("Notifications", testNotificationsInsert)
	t.Run("Notifications", testNotificationsInsertWhitelist)
	t.Run("VolumeStates", testVolumeStatesInsert)
	t.Run("VolumeStates", testVolumeStatesInsertWhitelist)
	t.Run("Assets", testAssetsInsert)
	t.Run("Assets", testAssetsInsertWhitelist)
	t.Run("Containers", testContainersInsert)
	t.Run("Containers", testContainersInsertWhitelist)
	t.Run("Records", testRecordsInsert)
	t.Run("Records", testRecordsInsertWhitelist)
	t.Run("Volumes", testVolumesInsert)
	t.Run("Volumes", testVolumesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AuthorizeToPartyUsingParent", testAuthorizeToOnePartyUsingParent)
	t.Run("AuthorizeToPartyUsingChild", testAuthorizeToOnePartyUsingChild)
	t.Run("VolumeOwnerToVolumeUsingVolume", testVolumeOwnerToOneVolumeUsingVolume)
	t.Run("VolumeAccessToPartyUsingParty", testVolumeAccessToOnePartyUsingParty)
	t.Run("VolumeAccessToVolumeUsingVolume", testVolumeAccessToOneVolumeUsingVolume)
	t.Run("VolumeLinkToVolumeUsingVolume", testVolumeLinkToOneVolumeUsingVolume)
	t.Run("VolumeFundingToFunderUsingFunder", testVolumeFundingToOneFunderUsingFunder)
	t.Run("VolumeFundingToVolumeUsingVolume", testVolumeFundingToOneVolumeUsingVolume)
	t.Run("SlotReleaseToContainerUsingContainer", testSlotReleaseToOneContainerUsingContainer)
	t.Run("VolumeInclusionToContainerUsingContainer", testVolumeInclusionToOneContainerUsingContainer)
	t.Run("VolumeInclusionToVolumeUsingVolume", testVolumeInclusionToOneVolumeUsingVolume)
	t.Run("ExcerptToSlotAssetUsingAsset", testExcerptToOneSlotAssetUsingAsset)
	t.Run("SlotAssetToContainerUsingContainer", testSlotAssetToOneContainerUsingContainer)
	t.Run("SlotAssetToAssetUsingAsset", testSlotAssetToOneAssetUsingAsset)
	t.Run("AssetRevisionToAssetUsingAsset", testAssetRevisionToOneAssetUsingAsset)
	t.Run("AssetRevisionToAssetUsingOrig", testAssetRevisionToOneAssetUsingOrig)
	t.Run("TranscodeToAssetUsingOrig", testTranscodeToOneAssetUsingOrig)
	t.Run("TranscodeToAccountUsingOwner", testTranscodeToOneAccountUsingOwner)
	t.Run("TranscodeToAssetUsingAsset", testTranscodeToOneAssetUsingAsset)
	t.Run("TagUseToContainerUsingContainer", testTagUseToOneContainerUsingContainer)
	t.Run("TagUseToAccountUsingWho", testTagUseToOneAccountUsingWho)
	t.Run("TagUseToTagUsingTag", testTagUseToOneTagUsingTag)
	t.Run("MetricToCategoryUsingCategory", testMetricToOneCategoryUsingCategory)
	t.Run("RecordMeasureToRecordUsingID", testRecordMeasureToOneRecordUsingID)
	t.Run("MeasureTextToMetricUsingMetric", testMeasureTextToOneMetricUsingMetric)
	t.Run("MeasureTextToRecordUsingRecord", testMeasureTextToOneRecordUsingRecord)
	t.Run("MeasureNumericToMetricUsingMetric", testMeasureNumericToOneMetricUsingMetric)
	t.Run("MeasureNumericToRecordUsingRecord", testMeasureNumericToOneRecordUsingRecord)
	t.Run("MeasureDateToMetricUsingMetric", testMeasureDateToOneMetricUsingMetric)
	t.Run("MeasureDateToRecordUsingRecord", testMeasureDateToOneRecordUsingRecord)
	t.Run("SlotRecordToContainerUsingContainer", testSlotRecordToOneContainerUsingContainer)
	t.Run("SlotRecordToRecordUsingRecord", testSlotRecordToOneRecordUsingRecord)
	t.Run("AccountTokenToAccountUsingAccount", testAccountTokenToOneAccountUsingAccount)
	t.Run("LoginTokenToAccountUsingAccount", testLoginTokenToOneAccountUsingAccount)
	t.Run("SessionToAccountUsingAccount", testSessionToOneAccountUsingAccount)
	t.Run("UploadToVolumeUsingVolume", testUploadToOneVolumeUsingVolume)
	t.Run("UploadToAccountUsingAccount", testUploadToOneAccountUsingAccount)
	t.Run("AvatarToAssetUsingAsset", testAvatarToOneAssetUsingAsset)
	t.Run("AvatarToPartyUsingParty", testAvatarToOnePartyUsingParty)
	t.Run("VolumeCitationToVolumeUsingVolume", testVolumeCitationToOneVolumeUsingVolume)
	t.Run("NotifyToNoticeUsingNotice", testNotifyToOneNoticeUsingNotice)
	t.Run("NotifyToAccountUsingTarget", testNotifyToOneAccountUsingTarget)
	t.Run("AccountToPartyUsingID", testAccountToOnePartyUsingID)
	t.Run("CommentToCommentUsingParent", testCommentToOneCommentUsingParent)
	t.Run("CommentToContainerUsingContainer", testCommentToOneContainerUsingContainer)
	t.Run("CommentToAccountUsingWho", testCommentToOneAccountUsingWho)
	t.Run("NotificationToTagUsingTag", testNotificationToOneTagUsingTag)
	t.Run("NotificationToCommentUsingComment", testNotificationToOneCommentUsingComment)
	t.Run("NotificationToAssetUsingAsset", testNotificationToOneAssetUsingAsset)
	t.Run("NotificationToContainerUsingContainer", testNotificationToOneContainerUsingContainer)
	t.Run("NotificationToVolumeUsingVolume", testNotificationToOneVolumeUsingVolume)
	t.Run("NotificationToPartyUsingParty", testNotificationToOnePartyUsingParty)
	t.Run("NotificationToPartyUsingAgent", testNotificationToOnePartyUsingAgent)
	t.Run("NotificationToNoticeUsingNotice", testNotificationToOneNoticeUsingNotice)
	t.Run("NotificationToAccountUsingTarget", testNotificationToOneAccountUsingTarget)
	t.Run("VolumeStateToVolumeUsingVolume", testVolumeStateToOneVolumeUsingVolume)
	t.Run("AssetToFormatUsingFormat", testAssetToOneFormatUsingFormat)
	t.Run("AssetToVolumeUsingVolume", testAssetToOneVolumeUsingVolume)
	t.Run("ContainerToVolumeUsingVolume", testContainerToOneVolumeUsingVolume)
	t.Run("RecordToCategoryUsingCategory", testRecordToOneCategoryUsingCategory)
	t.Run("RecordToVolumeUsingVolume", testRecordToOneVolumeUsingVolume)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("AccountToLoginTokenUsingLoginToken", testAccountOneToOneLoginTokenUsingLoginToken)
	t.Run("PartyToAvatarUsingAvatar", testPartyOneToOneAvatarUsingAvatar)
	t.Run("PartyToAccountUsingIDAccount", testPartyOneToOneAccountUsingIDAccount)
	t.Run("AssetToSlotAssetUsingSlotAsset", testAssetOneToOneSlotAssetUsingSlotAsset)
	t.Run("AssetToAssetRevisionUsingAssetRevision", testAssetOneToOneAssetRevisionUsingAssetRevision)
	t.Run("AssetToTranscodeUsingTranscode", testAssetOneToOneTranscodeUsingTranscode)
	t.Run("RecordToRecordMeasureUsingIDRecordMeasure", testRecordOneToOneRecordMeasureUsingIDRecordMeasure)
	t.Run("VolumeToVolumeOwnerUsingVolumeOwner", testVolumeOneToOneVolumeOwnerUsingVolumeOwner)
	t.Run("VolumeToVolumeCitationUsingVolumeCitation", testVolumeOneToOneVolumeCitationUsingVolumeCitation)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("FunderToVolumeFundings", testFunderToManyVolumeFundings)
	t.Run("FormatToAssets", testFormatToManyAssets)
	t.Run("SlotAssetToAssetExcerpts", testSlotAssetToManyAssetExcerpts)
	t.Run("CategoryToMetrics", testCategoryToManyMetrics)
	t.Run("CategoryToRecords", testCategoryToManyRecords)
	t.Run("MetricToVolumes", testMetricToManyVolumes)
	t.Run("MetricToRecords", testMetricToManyRecords)
	t.Run("MetricToMeasureTexts", testMetricToManyMeasureTexts)
	t.Run("MetricToMeasureNumerics", testMetricToManyMeasureNumerics)
	t.Run("MetricToMeasureDates", testMetricToManyMeasureDates)
	t.Run("AccountToOwnerTranscodes", testAccountToManyOwnerTranscodes)
	t.Run("AccountToWhoTagUses", testAccountToManyWhoTagUses)
	t.Run("AccountToAccountTokens", testAccountToManyAccountTokens)
	t.Run("AccountToSessions", testAccountToManySessions)
	t.Run("AccountToUploads", testAccountToManyUploads)
	t.Run("AccountToTargetNotifies", testAccountToManyTargetNotifies)
	t.Run("AccountToWhoComments", testAccountToManyWhoComments)
	t.Run("AccountToTargetNotifications", testAccountToManyTargetNotifications)
	t.Run("NoticeToNotifies", testNoticeToManyNotifies)
	t.Run("NoticeToNotifications", testNoticeToManyNotifications)
	t.Run("PartyToParentAuthorizes", testPartyToManyParentAuthorizes)
	t.Run("PartyToChildAuthorizes", testPartyToManyChildAuthorizes)
	t.Run("PartyToVolumeAccesses", testPartyToManyVolumeAccesses)
	t.Run("PartyToNotifications", testPartyToManyNotifications)
	t.Run("PartyToAgentNotifications", testPartyToManyAgentNotifications)
	t.Run("CommentToParentComments", testCommentToManyParentComments)
	t.Run("CommentToNotifications", testCommentToManyNotifications)
	t.Run("TagToTagUses", testTagToManyTagUses)
	t.Run("TagToNotifications", testTagToManyNotifications)
	t.Run("AssetToOrigAssetRevisions", testAssetToManyOrigAssetRevisions)
	t.Run("AssetToOrigTranscodes", testAssetToManyOrigTranscodes)
	t.Run("AssetToAvatars", testAssetToManyAvatars)
	t.Run("AssetToNotifications", testAssetToManyNotifications)
	t.Run("ContainerToSlotReleases", testContainerToManySlotReleases)
	t.Run("ContainerToVolumeInclusions", testContainerToManyVolumeInclusions)
	t.Run("ContainerToSlotAssets", testContainerToManySlotAssets)
	t.Run("ContainerToTagUses", testContainerToManyTagUses)
	t.Run("ContainerToSlotRecords", testContainerToManySlotRecords)
	t.Run("ContainerToComments", testContainerToManyComments)
	t.Run("ContainerToNotifications", testContainerToManyNotifications)
	t.Run("RecordToMetrics", testRecordToManyMetrics)
	t.Run("RecordToMeasureTexts", testRecordToManyMeasureTexts)
	t.Run("RecordToMeasureNumerics", testRecordToManyMeasureNumerics)
	t.Run("RecordToMeasureDates", testRecordToManyMeasureDates)
	t.Run("RecordToSlotRecords", testRecordToManySlotRecords)
	t.Run("VolumeToVolumeAccesses", testVolumeToManyVolumeAccesses)
	t.Run("VolumeToVolumeLinks", testVolumeToManyVolumeLinks)
	t.Run("VolumeToVolumeFundings", testVolumeToManyVolumeFundings)
	t.Run("VolumeToVolumeInclusions", testVolumeToManyVolumeInclusions)
	t.Run("VolumeToMetrics", testVolumeToManyMetrics)
	t.Run("VolumeToUploads", testVolumeToManyUploads)
	t.Run("VolumeToNotifications", testVolumeToManyNotifications)
	t.Run("VolumeToVolumeStates", testVolumeToManyVolumeStates)
	t.Run("VolumeToAssets", testVolumeToManyAssets)
	t.Run("VolumeToContainers", testVolumeToManyContainers)
	t.Run("VolumeToRecords", testVolumeToManyRecords)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AuthorizeToPartyUsingParent", testAuthorizeToOneSetOpPartyUsingParent)
	t.Run("AuthorizeToPartyUsingChild", testAuthorizeToOneSetOpPartyUsingChild)
	t.Run("VolumeOwnerToVolumeUsingVolume", testVolumeOwnerToOneSetOpVolumeUsingVolume)
	t.Run("VolumeAccessToPartyUsingParty", testVolumeAccessToOneSetOpPartyUsingParty)
	t.Run("VolumeAccessToVolumeUsingVolume", testVolumeAccessToOneSetOpVolumeUsingVolume)
	t.Run("VolumeLinkToVolumeUsingVolume", testVolumeLinkToOneSetOpVolumeUsingVolume)
	t.Run("VolumeFundingToFunderUsingFunder", testVolumeFundingToOneSetOpFunderUsingFunder)
	t.Run("VolumeFundingToVolumeUsingVolume", testVolumeFundingToOneSetOpVolumeUsingVolume)
	t.Run("SlotReleaseToContainerUsingContainer", testSlotReleaseToOneSetOpContainerUsingContainer)
	t.Run("VolumeInclusionToContainerUsingContainer", testVolumeInclusionToOneSetOpContainerUsingContainer)
	t.Run("VolumeInclusionToVolumeUsingVolume", testVolumeInclusionToOneSetOpVolumeUsingVolume)
	t.Run("ExcerptToSlotAssetUsingAsset", testExcerptToOneSetOpSlotAssetUsingAsset)
	t.Run("SlotAssetToContainerUsingContainer", testSlotAssetToOneSetOpContainerUsingContainer)
	t.Run("SlotAssetToAssetUsingAsset", testSlotAssetToOneSetOpAssetUsingAsset)
	t.Run("AssetRevisionToAssetUsingAsset", testAssetRevisionToOneSetOpAssetUsingAsset)
	t.Run("AssetRevisionToAssetUsingOrig", testAssetRevisionToOneSetOpAssetUsingOrig)
	t.Run("TranscodeToAssetUsingOrig", testTranscodeToOneSetOpAssetUsingOrig)
	t.Run("TranscodeToAccountUsingOwner", testTranscodeToOneSetOpAccountUsingOwner)
	t.Run("TranscodeToAssetUsingAsset", testTranscodeToOneSetOpAssetUsingAsset)
	t.Run("TagUseToContainerUsingContainer", testTagUseToOneSetOpContainerUsingContainer)
	t.Run("TagUseToAccountUsingWho", testTagUseToOneSetOpAccountUsingWho)
	t.Run("TagUseToTagUsingTag", testTagUseToOneSetOpTagUsingTag)
	t.Run("MetricToCategoryUsingCategory", testMetricToOneSetOpCategoryUsingCategory)
	t.Run("RecordMeasureToRecordUsingID", testRecordMeasureToOneSetOpRecordUsingID)
	t.Run("MeasureTextToMetricUsingMetric", testMeasureTextToOneSetOpMetricUsingMetric)
	t.Run("MeasureTextToRecordUsingRecord", testMeasureTextToOneSetOpRecordUsingRecord)
	t.Run("MeasureNumericToMetricUsingMetric", testMeasureNumericToOneSetOpMetricUsingMetric)
	t.Run("MeasureNumericToRecordUsingRecord", testMeasureNumericToOneSetOpRecordUsingRecord)
	t.Run("MeasureDateToMetricUsingMetric", testMeasureDateToOneSetOpMetricUsingMetric)
	t.Run("MeasureDateToRecordUsingRecord", testMeasureDateToOneSetOpRecordUsingRecord)
	t.Run("SlotRecordToContainerUsingContainer", testSlotRecordToOneSetOpContainerUsingContainer)
	t.Run("SlotRecordToRecordUsingRecord", testSlotRecordToOneSetOpRecordUsingRecord)
	t.Run("AccountTokenToAccountUsingAccount", testAccountTokenToOneSetOpAccountUsingAccount)
	t.Run("LoginTokenToAccountUsingAccount", testLoginTokenToOneSetOpAccountUsingAccount)
	t.Run("SessionToAccountUsingAccount", testSessionToOneSetOpAccountUsingAccount)
	t.Run("UploadToVolumeUsingVolume", testUploadToOneSetOpVolumeUsingVolume)
	t.Run("UploadToAccountUsingAccount", testUploadToOneSetOpAccountUsingAccount)
	t.Run("AvatarToAssetUsingAsset", testAvatarToOneSetOpAssetUsingAsset)
	t.Run("AvatarToPartyUsingParty", testAvatarToOneSetOpPartyUsingParty)
	t.Run("VolumeCitationToVolumeUsingVolume", testVolumeCitationToOneSetOpVolumeUsingVolume)
	t.Run("NotifyToNoticeUsingNotice", testNotifyToOneSetOpNoticeUsingNotice)
	t.Run("NotifyToAccountUsingTarget", testNotifyToOneSetOpAccountUsingTarget)
	t.Run("AccountToPartyUsingID", testAccountToOneSetOpPartyUsingID)
	t.Run("CommentToCommentUsingParent", testCommentToOneSetOpCommentUsingParent)
	t.Run("CommentToContainerUsingContainer", testCommentToOneSetOpContainerUsingContainer)
	t.Run("CommentToAccountUsingWho", testCommentToOneSetOpAccountUsingWho)
	t.Run("NotificationToTagUsingTag", testNotificationToOneSetOpTagUsingTag)
	t.Run("NotificationToCommentUsingComment", testNotificationToOneSetOpCommentUsingComment)
	t.Run("NotificationToAssetUsingAsset", testNotificationToOneSetOpAssetUsingAsset)
	t.Run("NotificationToContainerUsingContainer", testNotificationToOneSetOpContainerUsingContainer)
	t.Run("NotificationToVolumeUsingVolume", testNotificationToOneSetOpVolumeUsingVolume)
	t.Run("NotificationToPartyUsingParty", testNotificationToOneSetOpPartyUsingParty)
	t.Run("NotificationToPartyUsingAgent", testNotificationToOneSetOpPartyUsingAgent)
	t.Run("NotificationToNoticeUsingNotice", testNotificationToOneSetOpNoticeUsingNotice)
	t.Run("NotificationToAccountUsingTarget", testNotificationToOneSetOpAccountUsingTarget)
	t.Run("VolumeStateToVolumeUsingVolume", testVolumeStateToOneSetOpVolumeUsingVolume)
	t.Run("AssetToFormatUsingFormat", testAssetToOneSetOpFormatUsingFormat)
	t.Run("AssetToVolumeUsingVolume", testAssetToOneSetOpVolumeUsingVolume)
	t.Run("ContainerToVolumeUsingVolume", testContainerToOneSetOpVolumeUsingVolume)
	t.Run("RecordToCategoryUsingCategory", testRecordToOneSetOpCategoryUsingCategory)
	t.Run("RecordToVolumeUsingVolume", testRecordToOneSetOpVolumeUsingVolume)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("CommentToCommentUsingParent", testCommentToOneRemoveOpCommentUsingParent)
	t.Run("NotificationToTagUsingTag", testNotificationToOneRemoveOpTagUsingTag)
	t.Run("NotificationToCommentUsingComment", testNotificationToOneRemoveOpCommentUsingComment)
	t.Run("NotificationToAssetUsingAsset", testNotificationToOneRemoveOpAssetUsingAsset)
	t.Run("NotificationToContainerUsingContainer", testNotificationToOneRemoveOpContainerUsingContainer)
	t.Run("NotificationToVolumeUsingVolume", testNotificationToOneRemoveOpVolumeUsingVolume)
	t.Run("NotificationToPartyUsingParty", testNotificationToOneRemoveOpPartyUsingParty)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("AccountToLoginTokenUsingLoginToken", testAccountOneToOneSetOpLoginTokenUsingLoginToken)
	t.Run("PartyToAvatarUsingAvatar", testPartyOneToOneSetOpAvatarUsingAvatar)
	t.Run("PartyToAccountUsingIDAccount", testPartyOneToOneSetOpAccountUsingIDAccount)
	t.Run("AssetToSlotAssetUsingSlotAsset", testAssetOneToOneSetOpSlotAssetUsingSlotAsset)
	t.Run("AssetToAssetRevisionUsingAssetRevision", testAssetOneToOneSetOpAssetRevisionUsingAssetRevision)
	t.Run("AssetToTranscodeUsingTranscode", testAssetOneToOneSetOpTranscodeUsingTranscode)
	t.Run("RecordToRecordMeasureUsingIDRecordMeasure", testRecordOneToOneSetOpRecordMeasureUsingIDRecordMeasure)
	t.Run("VolumeToVolumeOwnerUsingVolumeOwner", testVolumeOneToOneSetOpVolumeOwnerUsingVolumeOwner)
	t.Run("VolumeToVolumeCitationUsingVolumeCitation", testVolumeOneToOneSetOpVolumeCitationUsingVolumeCitation)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("FunderToVolumeFundings", testFunderToManyAddOpVolumeFundings)
	t.Run("FormatToAssets", testFormatToManyAddOpAssets)
	t.Run("SlotAssetToAssetExcerpts", testSlotAssetToManyAddOpAssetExcerpts)
	t.Run("CategoryToMetrics", testCategoryToManyAddOpMetrics)
	t.Run("CategoryToRecords", testCategoryToManyAddOpRecords)
	t.Run("MetricToVolumes", testMetricToManyAddOpVolumes)
	t.Run("MetricToRecords", testMetricToManyAddOpRecords)
	t.Run("MetricToMeasureTexts", testMetricToManyAddOpMeasureTexts)
	t.Run("MetricToMeasureNumerics", testMetricToManyAddOpMeasureNumerics)
	t.Run("MetricToMeasureDates", testMetricToManyAddOpMeasureDates)
	t.Run("AccountToOwnerTranscodes", testAccountToManyAddOpOwnerTranscodes)
	t.Run("AccountToWhoTagUses", testAccountToManyAddOpWhoTagUses)
	t.Run("AccountToAccountTokens", testAccountToManyAddOpAccountTokens)
	t.Run("AccountToSessions", testAccountToManyAddOpSessions)
	t.Run("AccountToUploads", testAccountToManyAddOpUploads)
	t.Run("AccountToTargetNotifies", testAccountToManyAddOpTargetNotifies)
	t.Run("AccountToWhoComments", testAccountToManyAddOpWhoComments)
	t.Run("AccountToTargetNotifications", testAccountToManyAddOpTargetNotifications)
	t.Run("NoticeToNotifies", testNoticeToManyAddOpNotifies)
	t.Run("NoticeToNotifications", testNoticeToManyAddOpNotifications)
	t.Run("PartyToParentAuthorizes", testPartyToManyAddOpParentAuthorizes)
	t.Run("PartyToChildAuthorizes", testPartyToManyAddOpChildAuthorizes)
	t.Run("PartyToVolumeAccesses", testPartyToManyAddOpVolumeAccesses)
	t.Run("PartyToNotifications", testPartyToManyAddOpNotifications)
	t.Run("PartyToAgentNotifications", testPartyToManyAddOpAgentNotifications)
	t.Run("CommentToParentComments", testCommentToManyAddOpParentComments)
	t.Run("CommentToNotifications", testCommentToManyAddOpNotifications)
	t.Run("TagToTagUses", testTagToManyAddOpTagUses)
	t.Run("TagToNotifications", testTagToManyAddOpNotifications)
	t.Run("AssetToOrigAssetRevisions", testAssetToManyAddOpOrigAssetRevisions)
	t.Run("AssetToOrigTranscodes", testAssetToManyAddOpOrigTranscodes)
	t.Run("AssetToAvatars", testAssetToManyAddOpAvatars)
	t.Run("AssetToNotifications", testAssetToManyAddOpNotifications)
	t.Run("ContainerToSlotReleases", testContainerToManyAddOpSlotReleases)
	t.Run("ContainerToVolumeInclusions", testContainerToManyAddOpVolumeInclusions)
	t.Run("ContainerToSlotAssets", testContainerToManyAddOpSlotAssets)
	t.Run("ContainerToTagUses", testContainerToManyAddOpTagUses)
	t.Run("ContainerToSlotRecords", testContainerToManyAddOpSlotRecords)
	t.Run("ContainerToComments", testContainerToManyAddOpComments)
	t.Run("ContainerToNotifications", testContainerToManyAddOpNotifications)
	t.Run("RecordToMetrics", testRecordToManyAddOpMetrics)
	t.Run("RecordToMeasureTexts", testRecordToManyAddOpMeasureTexts)
	t.Run("RecordToMeasureNumerics", testRecordToManyAddOpMeasureNumerics)
	t.Run("RecordToMeasureDates", testRecordToManyAddOpMeasureDates)
	t.Run("RecordToSlotRecords", testRecordToManyAddOpSlotRecords)
	t.Run("VolumeToVolumeAccesses", testVolumeToManyAddOpVolumeAccesses)
	t.Run("VolumeToVolumeLinks", testVolumeToManyAddOpVolumeLinks)
	t.Run("VolumeToVolumeFundings", testVolumeToManyAddOpVolumeFundings)
	t.Run("VolumeToVolumeInclusions", testVolumeToManyAddOpVolumeInclusions)
	t.Run("VolumeToMetrics", testVolumeToManyAddOpMetrics)
	t.Run("VolumeToUploads", testVolumeToManyAddOpUploads)
	t.Run("VolumeToNotifications", testVolumeToManyAddOpNotifications)
	t.Run("VolumeToVolumeStates", testVolumeToManyAddOpVolumeStates)
	t.Run("VolumeToAssets", testVolumeToManyAddOpAssets)
	t.Run("VolumeToContainers", testVolumeToManyAddOpContainers)
	t.Run("VolumeToRecords", testVolumeToManyAddOpRecords)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("MetricToVolumes", testMetricToManySetOpVolumes)
	t.Run("MetricToRecords", testMetricToManySetOpRecords)
	t.Run("PartyToNotifications", testPartyToManySetOpNotifications)
	t.Run("CommentToParentComments", testCommentToManySetOpParentComments)
	t.Run("CommentToNotifications", testCommentToManySetOpNotifications)
	t.Run("TagToNotifications", testTagToManySetOpNotifications)
	t.Run("AssetToNotifications", testAssetToManySetOpNotifications)
	t.Run("ContainerToNotifications", testContainerToManySetOpNotifications)
	t.Run("RecordToMetrics", testRecordToManySetOpMetrics)
	t.Run("VolumeToMetrics", testVolumeToManySetOpMetrics)
	t.Run("VolumeToNotifications", testVolumeToManySetOpNotifications)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("MetricToVolumes", testMetricToManyRemoveOpVolumes)
	t.Run("MetricToRecords", testMetricToManyRemoveOpRecords)
	t.Run("PartyToNotifications", testPartyToManyRemoveOpNotifications)
	t.Run("CommentToParentComments", testCommentToManyRemoveOpParentComments)
	t.Run("CommentToNotifications", testCommentToManyRemoveOpNotifications)
	t.Run("TagToNotifications", testTagToManyRemoveOpNotifications)
	t.Run("AssetToNotifications", testAssetToManyRemoveOpNotifications)
	t.Run("ContainerToNotifications", testContainerToManyRemoveOpNotifications)
	t.Run("RecordToMetrics", testRecordToManyRemoveOpMetrics)
	t.Run("VolumeToMetrics", testVolumeToManyRemoveOpMetrics)
	t.Run("VolumeToNotifications", testVolumeToManyRemoveOpNotifications)
}

func TestReload(t *testing.T) {
	t.Run("Authorizes", testAuthorizesReload)
	t.Run("VolumeOwners", testVolumeOwnersReload)
	t.Run("VolumeAccesses", testVolumeAccessesReload)
	t.Run("VolumeLinks", testVolumeLinksReload)
	t.Run("Funders", testFundersReload)
	t.Run("VolumeFundings", testVolumeFundingsReload)
	t.Run("SlotReleases", testSlotReleasesReload)
	t.Run("VolumeInclusions", testVolumeInclusionsReload)
	t.Run("Formats", testFormatsReload)
	t.Run("Excerpts", testExcerptsReload)
	t.Run("SlotAssets", testSlotAssetsReload)
	t.Run("AssetRevisions", testAssetRevisionsReload)
	t.Run("Transcodes", testTranscodesReload)
	t.Run("TagUses", testTagUsesReload)
	t.Run("KeywordUses", testKeywordUsesReload)
	t.Run("Categories", testCategoriesReload)
	t.Run("Metrics", testMetricsReload)
	t.Run("RecordMeasures", testRecordMeasuresReload)
	t.Run("MeasureTexts", testMeasureTextsReload)
	t.Run("MeasureNumerics", testMeasureNumericsReload)
	t.Run("MeasureDates", testMeasureDatesReload)
	t.Run("SlotRecords", testSlotRecordsReload)
	t.Run("Tokens", testTokensReload)
	t.Run("AccountTokens", testAccountTokensReload)
	t.Run("LoginTokens", testLoginTokensReload)
	t.Run("Sessions", testSessionsReload)
	t.Run("Uploads", testUploadsReload)
	t.Run("Avatars", testAvatarsReload)
	t.Run("VolumeCitations", testVolumeCitationsReload)
	t.Run("Notifies", testNotifiesReload)
	t.Run("Accounts", testAccountsReload)
	t.Run("Notices", testNoticesReload)
	t.Run("Parties", testPartiesReload)
	t.Run("Comments", testCommentsReload)
	t.Run("Tags", testTagsReload)
	t.Run("Notifications", testNotificationsReload)
	t.Run("VolumeStates", testVolumeStatesReload)
	t.Run("Assets", testAssetsReload)
	t.Run("Containers", testContainersReload)
	t.Run("Records", testRecordsReload)
	t.Run("Volumes", testVolumesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Authorizes", testAuthorizesReloadAll)
	t.Run("VolumeOwners", testVolumeOwnersReloadAll)
	t.Run("VolumeAccesses", testVolumeAccessesReloadAll)
	t.Run("VolumeLinks", testVolumeLinksReloadAll)
	t.Run("Funders", testFundersReloadAll)
	t.Run("VolumeFundings", testVolumeFundingsReloadAll)
	t.Run("SlotReleases", testSlotReleasesReloadAll)
	t.Run("VolumeInclusions", testVolumeInclusionsReloadAll)
	t.Run("Formats", testFormatsReloadAll)
	t.Run("Excerpts", testExcerptsReloadAll)
	t.Run("SlotAssets", testSlotAssetsReloadAll)
	t.Run("AssetRevisions", testAssetRevisionsReloadAll)
	t.Run("Transcodes", testTranscodesReloadAll)
	t.Run("TagUses", testTagUsesReloadAll)
	t.Run("KeywordUses", testKeywordUsesReloadAll)
	t.Run("Categories", testCategoriesReloadAll)
	t.Run("Metrics", testMetricsReloadAll)
	t.Run("RecordMeasures", testRecordMeasuresReloadAll)
	t.Run("MeasureTexts", testMeasureTextsReloadAll)
	t.Run("MeasureNumerics", testMeasureNumericsReloadAll)
	t.Run("MeasureDates", testMeasureDatesReloadAll)
	t.Run("SlotRecords", testSlotRecordsReloadAll)
	t.Run("Tokens", testTokensReloadAll)
	t.Run("AccountTokens", testAccountTokensReloadAll)
	t.Run("LoginTokens", testLoginTokensReloadAll)
	t.Run("Sessions", testSessionsReloadAll)
	t.Run("Uploads", testUploadsReloadAll)
	t.Run("Avatars", testAvatarsReloadAll)
	t.Run("VolumeCitations", testVolumeCitationsReloadAll)
	t.Run("Notifies", testNotifiesReloadAll)
	t.Run("Accounts", testAccountsReloadAll)
	t.Run("Notices", testNoticesReloadAll)
	t.Run("Parties", testPartiesReloadAll)
	t.Run("Comments", testCommentsReloadAll)
	t.Run("Tags", testTagsReloadAll)
	t.Run("Notifications", testNotificationsReloadAll)
	t.Run("VolumeStates", testVolumeStatesReloadAll)
	t.Run("Assets", testAssetsReloadAll)
	t.Run("Containers", testContainersReloadAll)
	t.Run("Records", testRecordsReloadAll)
	t.Run("Volumes", testVolumesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Authorizes", testAuthorizesSelect)
	t.Run("VolumeOwners", testVolumeOwnersSelect)
	t.Run("VolumeAccesses", testVolumeAccessesSelect)
	t.Run("VolumeLinks", testVolumeLinksSelect)
	t.Run("Funders", testFundersSelect)
	t.Run("VolumeFundings", testVolumeFundingsSelect)
	t.Run("SlotReleases", testSlotReleasesSelect)
	t.Run("VolumeInclusions", testVolumeInclusionsSelect)
	t.Run("Formats", testFormatsSelect)
	t.Run("Excerpts", testExcerptsSelect)
	t.Run("SlotAssets", testSlotAssetsSelect)
	t.Run("AssetRevisions", testAssetRevisionsSelect)
	t.Run("Transcodes", testTranscodesSelect)
	t.Run("TagUses", testTagUsesSelect)
	t.Run("KeywordUses", testKeywordUsesSelect)
	t.Run("Categories", testCategoriesSelect)
	t.Run("Metrics", testMetricsSelect)
	t.Run("RecordMeasures", testRecordMeasuresSelect)
	t.Run("MeasureTexts", testMeasureTextsSelect)
	t.Run("MeasureNumerics", testMeasureNumericsSelect)
	t.Run("MeasureDates", testMeasureDatesSelect)
	t.Run("SlotRecords", testSlotRecordsSelect)
	t.Run("Tokens", testTokensSelect)
	t.Run("AccountTokens", testAccountTokensSelect)
	t.Run("LoginTokens", testLoginTokensSelect)
	t.Run("Sessions", testSessionsSelect)
	t.Run("Uploads", testUploadsSelect)
	t.Run("Avatars", testAvatarsSelect)
	t.Run("VolumeCitations", testVolumeCitationsSelect)
	t.Run("Notifies", testNotifiesSelect)
	t.Run("Accounts", testAccountsSelect)
	t.Run("Notices", testNoticesSelect)
	t.Run("Parties", testPartiesSelect)
	t.Run("Comments", testCommentsSelect)
	t.Run("Tags", testTagsSelect)
	t.Run("Notifications", testNotificationsSelect)
	t.Run("VolumeStates", testVolumeStatesSelect)
	t.Run("Assets", testAssetsSelect)
	t.Run("Containers", testContainersSelect)
	t.Run("Records", testRecordsSelect)
	t.Run("Volumes", testVolumesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Authorizes", testAuthorizesUpdate)
	t.Run("VolumeOwners", testVolumeOwnersUpdate)
	t.Run("VolumeAccesses", testVolumeAccessesUpdate)
	t.Run("VolumeLinks", testVolumeLinksUpdate)
	t.Run("Funders", testFundersUpdate)
	t.Run("VolumeFundings", testVolumeFundingsUpdate)
	t.Run("SlotReleases", testSlotReleasesUpdate)
	t.Run("VolumeInclusions", testVolumeInclusionsUpdate)
	t.Run("Formats", testFormatsUpdate)
	t.Run("Excerpts", testExcerptsUpdate)
	t.Run("SlotAssets", testSlotAssetsUpdate)
	t.Run("AssetRevisions", testAssetRevisionsUpdate)
	t.Run("Transcodes", testTranscodesUpdate)
	t.Run("TagUses", testTagUsesUpdate)
	t.Run("KeywordUses", testKeywordUsesUpdate)
	t.Run("Categories", testCategoriesUpdate)
	t.Run("Metrics", testMetricsUpdate)
	t.Run("RecordMeasures", testRecordMeasuresUpdate)
	t.Run("MeasureTexts", testMeasureTextsUpdate)
	t.Run("MeasureNumerics", testMeasureNumericsUpdate)
	t.Run("MeasureDates", testMeasureDatesUpdate)
	t.Run("SlotRecords", testSlotRecordsUpdate)
	t.Run("Tokens", testTokensUpdate)
	t.Run("AccountTokens", testAccountTokensUpdate)
	t.Run("LoginTokens", testLoginTokensUpdate)
	t.Run("Sessions", testSessionsUpdate)
	t.Run("Uploads", testUploadsUpdate)
	t.Run("Avatars", testAvatarsUpdate)
	t.Run("VolumeCitations", testVolumeCitationsUpdate)
	t.Run("Notifies", testNotifiesUpdate)
	t.Run("Accounts", testAccountsUpdate)
	t.Run("Notices", testNoticesUpdate)
	t.Run("Parties", testPartiesUpdate)
	t.Run("Comments", testCommentsUpdate)
	t.Run("Tags", testTagsUpdate)
	t.Run("Notifications", testNotificationsUpdate)
	t.Run("VolumeStates", testVolumeStatesUpdate)
	t.Run("Assets", testAssetsUpdate)
	t.Run("Containers", testContainersUpdate)
	t.Run("Records", testRecordsUpdate)
	t.Run("Volumes", testVolumesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Authorizes", testAuthorizesSliceUpdateAll)
	t.Run("VolumeOwners", testVolumeOwnersSliceUpdateAll)
	t.Run("VolumeAccesses", testVolumeAccessesSliceUpdateAll)
	t.Run("VolumeLinks", testVolumeLinksSliceUpdateAll)
	t.Run("Funders", testFundersSliceUpdateAll)
	t.Run("VolumeFundings", testVolumeFundingsSliceUpdateAll)
	t.Run("SlotReleases", testSlotReleasesSliceUpdateAll)
	t.Run("VolumeInclusions", testVolumeInclusionsSliceUpdateAll)
	t.Run("Formats", testFormatsSliceUpdateAll)
	t.Run("Excerpts", testExcerptsSliceUpdateAll)
	t.Run("SlotAssets", testSlotAssetsSliceUpdateAll)
	t.Run("AssetRevisions", testAssetRevisionsSliceUpdateAll)
	t.Run("Transcodes", testTranscodesSliceUpdateAll)
	t.Run("TagUses", testTagUsesSliceUpdateAll)
	t.Run("KeywordUses", testKeywordUsesSliceUpdateAll)
	t.Run("Categories", testCategoriesSliceUpdateAll)
	t.Run("Metrics", testMetricsSliceUpdateAll)
	t.Run("RecordMeasures", testRecordMeasuresSliceUpdateAll)
	t.Run("MeasureTexts", testMeasureTextsSliceUpdateAll)
	t.Run("MeasureNumerics", testMeasureNumericsSliceUpdateAll)
	t.Run("MeasureDates", testMeasureDatesSliceUpdateAll)
	t.Run("SlotRecords", testSlotRecordsSliceUpdateAll)
	t.Run("Tokens", testTokensSliceUpdateAll)
	t.Run("AccountTokens", testAccountTokensSliceUpdateAll)
	t.Run("LoginTokens", testLoginTokensSliceUpdateAll)
	t.Run("Sessions", testSessionsSliceUpdateAll)
	t.Run("Uploads", testUploadsSliceUpdateAll)
	t.Run("Avatars", testAvatarsSliceUpdateAll)
	t.Run("VolumeCitations", testVolumeCitationsSliceUpdateAll)
	t.Run("Notifies", testNotifiesSliceUpdateAll)
	t.Run("Accounts", testAccountsSliceUpdateAll)
	t.Run("Notices", testNoticesSliceUpdateAll)
	t.Run("Parties", testPartiesSliceUpdateAll)
	t.Run("Comments", testCommentsSliceUpdateAll)
	t.Run("Tags", testTagsSliceUpdateAll)
	t.Run("Notifications", testNotificationsSliceUpdateAll)
	t.Run("VolumeStates", testVolumeStatesSliceUpdateAll)
	t.Run("Assets", testAssetsSliceUpdateAll)
	t.Run("Containers", testContainersSliceUpdateAll)
	t.Run("Records", testRecordsSliceUpdateAll)
	t.Run("Volumes", testVolumesSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Authorizes", testAuthorizesUpsert)
	t.Run("VolumeOwners", testVolumeOwnersUpsert)
	t.Run("VolumeAccesses", testVolumeAccessesUpsert)
	t.Run("VolumeLinks", testVolumeLinksUpsert)
	t.Run("Funders", testFundersUpsert)
	t.Run("VolumeFundings", testVolumeFundingsUpsert)
	t.Run("SlotReleases", testSlotReleasesUpsert)
	t.Run("VolumeInclusions", testVolumeInclusionsUpsert)
	t.Run("Formats", testFormatsUpsert)
	t.Run("Excerpts", testExcerptsUpsert)
	t.Run("SlotAssets", testSlotAssetsUpsert)
	t.Run("AssetRevisions", testAssetRevisionsUpsert)
	t.Run("Transcodes", testTranscodesUpsert)
	t.Run("TagUses", testTagUsesUpsert)
	t.Run("KeywordUses", testKeywordUsesUpsert)
	t.Run("Categories", testCategoriesUpsert)
	t.Run("Metrics", testMetricsUpsert)
	t.Run("RecordMeasures", testRecordMeasuresUpsert)
	t.Run("MeasureTexts", testMeasureTextsUpsert)
	t.Run("MeasureNumerics", testMeasureNumericsUpsert)
	t.Run("MeasureDates", testMeasureDatesUpsert)
	t.Run("SlotRecords", testSlotRecordsUpsert)
	t.Run("Tokens", testTokensUpsert)
	t.Run("AccountTokens", testAccountTokensUpsert)
	t.Run("LoginTokens", testLoginTokensUpsert)
	t.Run("Sessions", testSessionsUpsert)
	t.Run("Uploads", testUploadsUpsert)
	t.Run("Avatars", testAvatarsUpsert)
	t.Run("VolumeCitations", testVolumeCitationsUpsert)
	t.Run("Notifies", testNotifiesUpsert)
	t.Run("Accounts", testAccountsUpsert)
	t.Run("Notices", testNoticesUpsert)
	t.Run("Parties", testPartiesUpsert)
	t.Run("Comments", testCommentsUpsert)
	t.Run("Tags", testTagsUpsert)
	t.Run("Notifications", testNotificationsUpsert)
	t.Run("VolumeStates", testVolumeStatesUpsert)
	t.Run("Assets", testAssetsUpsert)
	t.Run("Containers", testContainersUpsert)
	t.Run("Records", testRecordsUpsert)
	t.Run("Volumes", testVolumesUpsert)
}
