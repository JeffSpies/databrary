// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testVolumeAccesses(t *testing.T) {
	t.Parallel()

	query := VolumeAccesses(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testVolumeAccessesDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccess := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccess.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = volumeAccess.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeAccesses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVolumeAccessesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccess := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccess.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = VolumeAccesses(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := VolumeAccesses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVolumeAccessesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccess := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccess.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := VolumeAccessSlice{volumeAccess}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeAccesses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testVolumeAccessesExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccess := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccess.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := VolumeAccessExists(tx, volumeAccess.Volume, volumeAccess.Party)
	if err != nil {
		t.Errorf("Unable to check if VolumeAccess exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VolumeAccessExistsG to return true, but got false.")
	}
}
func testVolumeAccessesFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccess := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccess.Insert(tx); err != nil {
		t.Error(err)
	}

	volumeAccessFound, err := FindVolumeAccess(tx, volumeAccess.Volume, volumeAccess.Party)
	if err != nil {
		t.Error(err)
	}

	if volumeAccessFound == nil {
		t.Error("want a record, got nil")
	}
}
func testVolumeAccessesBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccess := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccess.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = VolumeAccesses(tx).Bind(volumeAccess); err != nil {
		t.Error(err)
	}
}

func testVolumeAccessesOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccess := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccess.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := VolumeAccesses(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVolumeAccessesAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccessOne := VolumeAccessRandom()
	volumeAccessTwo := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccessOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = volumeAccessTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := VolumeAccesses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVolumeAccessesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccessOne := VolumeAccessRandom()
	volumeAccessTwo := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccessOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = volumeAccessTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeAccesses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func volumeAccessBeforeInsertHook(e boil.Executor, o *VolumeAccess) error {
	*o = VolumeAccess{}
	return nil
}

func volumeAccessAfterInsertHook(e boil.Executor, o *VolumeAccess) error {
	*o = VolumeAccess{}
	return nil
}

func volumeAccessAfterSelectHook(e boil.Executor, o *VolumeAccess) error {
	*o = VolumeAccess{}
	return nil
}

func volumeAccessBeforeUpdateHook(e boil.Executor, o *VolumeAccess) error {
	*o = VolumeAccess{}
	return nil
}

func volumeAccessAfterUpdateHook(e boil.Executor, o *VolumeAccess) error {
	*o = VolumeAccess{}
	return nil
}

func volumeAccessBeforeDeleteHook(e boil.Executor, o *VolumeAccess) error {
	*o = VolumeAccess{}
	return nil
}

func volumeAccessAfterDeleteHook(e boil.Executor, o *VolumeAccess) error {
	*o = VolumeAccess{}
	return nil
}

func volumeAccessBeforeUpsertHook(e boil.Executor, o *VolumeAccess) error {
	*o = VolumeAccess{}
	return nil
}

func volumeAccessAfterUpsertHook(e boil.Executor, o *VolumeAccess) error {
	*o = VolumeAccess{}
	return nil
}

func testVolumeAccessesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &VolumeAccess{}
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	o := VolumeAccessRandom()

	AddVolumeAccessHook(boil.BeforeInsertHook, volumeAccessBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	volumeAccessBeforeInsertHooks = []VolumeAccessHook{}

	AddVolumeAccessHook(boil.AfterInsertHook, volumeAccessAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	volumeAccessAfterInsertHooks = []VolumeAccessHook{}

	AddVolumeAccessHook(boil.AfterSelectHook, volumeAccessAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	volumeAccessAfterSelectHooks = []VolumeAccessHook{}

	AddVolumeAccessHook(boil.BeforeUpdateHook, volumeAccessBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	volumeAccessBeforeUpdateHooks = []VolumeAccessHook{}

	AddVolumeAccessHook(boil.AfterUpdateHook, volumeAccessAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	volumeAccessAfterUpdateHooks = []VolumeAccessHook{}

	AddVolumeAccessHook(boil.BeforeDeleteHook, volumeAccessBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	volumeAccessBeforeDeleteHooks = []VolumeAccessHook{}

	AddVolumeAccessHook(boil.AfterDeleteHook, volumeAccessAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	volumeAccessAfterDeleteHooks = []VolumeAccessHook{}

	AddVolumeAccessHook(boil.BeforeUpsertHook, volumeAccessBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	volumeAccessBeforeUpsertHooks = []VolumeAccessHook{}

	AddVolumeAccessHook(boil.AfterUpsertHook, volumeAccessAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	volumeAccessAfterUpsertHooks = []VolumeAccessHook{}
}
func testVolumeAccessesInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccess := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccess.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeAccesses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVolumeAccessesInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccess := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccess.Insert(tx, volumeAccessColumns...); err != nil {
		t.Error(err)
	}

	count, err := VolumeAccesses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVolumeAccessToOnePartyUsingParty(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local VolumeAccess
	var foreign Party

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, volumeAccessDBTypes, true, volumeAccessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeAccess struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, partyDBTypes, true, partyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Party = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.PartyByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := VolumeAccessSlice{&local}
	if err = local.L.LoadParty(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Party == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Party = nil
	if err = local.L.LoadParty(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Party == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVolumeAccessToOneVolumeUsingVolume(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local VolumeAccess
	var foreign Volume

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, volumeAccessDBTypes, true, volumeAccessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeAccess struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, volumeDBTypes, true, volumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Volume = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.VolumeByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := VolumeAccessSlice{&local}
	if err = local.L.LoadVolume(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Volume = nil
	if err = local.L.LoadVolume(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVolumeAccessToOneSetOpPartyUsingParty(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a VolumeAccess
	var b, c Party

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, volumeAccessDBTypes, false, strmangle.SetComplement(volumeAccessPrimaryKeyColumns, volumeAccessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, partyDBTypes, false, strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Party{&b, &c} {
		err = a.SetParty(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Party != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VolumeAccesses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Party != x.ID {
			t.Error("foreign key was wrong value", a.Party)
		}

		if exists, err := VolumeAccessExists(tx, a.Volume, a.Party); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testVolumeAccessToOneSetOpVolumeUsingVolume(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a VolumeAccess
	var b, c Volume

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, volumeAccessDBTypes, false, strmangle.SetComplement(volumeAccessPrimaryKeyColumns, volumeAccessColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, volumeDBTypes, false, strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, volumeDBTypes, false, strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Volume{&b, &c} {
		err = a.SetVolume(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Volume != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VolumeAccesses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Volume != x.ID {
			t.Error("foreign key was wrong value", a.Volume)
		}

		if exists, err := VolumeAccessExists(tx, a.Volume, a.Party); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testVolumeAccessesReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccess := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccess.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = volumeAccess.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testVolumeAccessesReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccess := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccess.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := VolumeAccessSlice{volumeAccess}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testVolumeAccessesSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccess := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccess.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := VolumeAccesses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	volumeAccessDBTypes = map[string]string{`Children`: `enum.permission('NONE','PUBLIC','SHARED','READ','EDIT','ADMIN')`, `Individual`: `enum.permission('NONE','PUBLIC','SHARED','READ','EDIT','ADMIN')`, `Party`: `integer`, `Sort`: `smallint`, `Volume`: `integer`}
	_                   = bytes.MinRead
)

func testVolumeAccessesUpdate(t *testing.T) {
	t.Parallel()

	if len(volumeAccessColumns) == len(volumeAccessPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccess := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccess.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeAccesses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	volumeAccess = VolumeAccessRandom()

	if err = volumeAccess.Update(tx); err != nil {
		t.Error(err)
	}
}

func testVolumeAccessesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(volumeAccessColumns) == len(volumeAccessPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	volumeAccess := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccess.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeAccesses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	volumeAccess = VolumeAccessRandom()

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(volumeAccessColumns, volumeAccessPrimaryKeyColumns) {
		fields = volumeAccessColumns
	} else {
		fields = strmangle.SetComplement(
			volumeAccessColumns,
			volumeAccessPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(volumeAccess))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := VolumeAccessSlice{volumeAccess}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testVolumeAccessesUpsert(t *testing.T) {
	t.Parallel()

	if len(volumeAccessColumns) == len(volumeAccessPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed
	// Attempt the INSERT side of an UPSERT

	volumeAccess := VolumeAccessRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeAccess.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert VolumeAccess: %s", err)
	}

	count, err := VolumeAccesses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT

	volumeAccess = VolumeAccessRandom()

	if err = volumeAccess.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert VolumeAccess: %s", err)
	}

	count, err = VolumeAccesses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
