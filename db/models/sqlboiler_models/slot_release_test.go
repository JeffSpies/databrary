// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testSlotReleases(t *testing.T) {
	t.Parallel()

	query := SlotReleases(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSlotReleasesDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotRelease := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotRelease.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = slotRelease.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := SlotReleases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSlotReleasesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotRelease := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotRelease.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SlotReleases(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := SlotReleases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSlotReleasesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotRelease := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotRelease.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SlotReleaseSlice{slotRelease}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := SlotReleases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSlotReleasesExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotRelease := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotRelease.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SlotReleaseExists(tx, slotRelease.Container, slotRelease.Segment)
	if err != nil {
		t.Errorf("Unable to check if SlotRelease exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SlotReleaseExistsG to return true, but got false.")
	}
}
func testSlotReleasesFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotRelease := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotRelease.Insert(tx); err != nil {
		t.Error(err)
	}

	slotReleaseFound, err := FindSlotRelease(tx, slotRelease.Container, slotRelease.Segment)
	if err != nil {
		t.Error(err)
	}

	if slotReleaseFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSlotReleasesBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotRelease := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotRelease.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SlotReleases(tx).Bind(slotRelease); err != nil {
		t.Error(err)
	}
}

func testSlotReleasesOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotRelease := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotRelease.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := SlotReleases(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSlotReleasesAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotReleaseOne := SlotReleaseRandom()
	slotReleaseTwo := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotReleaseOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = slotReleaseTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SlotReleases(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSlotReleasesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotReleaseOne := SlotReleaseRandom()
	slotReleaseTwo := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotReleaseOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = slotReleaseTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SlotReleases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func slotReleaseBeforeInsertHook(e boil.Executor, o *SlotRelease) error {
	*o = SlotRelease{}
	return nil
}

func slotReleaseAfterInsertHook(e boil.Executor, o *SlotRelease) error {
	*o = SlotRelease{}
	return nil
}

func slotReleaseAfterSelectHook(e boil.Executor, o *SlotRelease) error {
	*o = SlotRelease{}
	return nil
}

func slotReleaseBeforeUpdateHook(e boil.Executor, o *SlotRelease) error {
	*o = SlotRelease{}
	return nil
}

func slotReleaseAfterUpdateHook(e boil.Executor, o *SlotRelease) error {
	*o = SlotRelease{}
	return nil
}

func slotReleaseBeforeDeleteHook(e boil.Executor, o *SlotRelease) error {
	*o = SlotRelease{}
	return nil
}

func slotReleaseAfterDeleteHook(e boil.Executor, o *SlotRelease) error {
	*o = SlotRelease{}
	return nil
}

func slotReleaseBeforeUpsertHook(e boil.Executor, o *SlotRelease) error {
	*o = SlotRelease{}
	return nil
}

func slotReleaseAfterUpsertHook(e boil.Executor, o *SlotRelease) error {
	*o = SlotRelease{}
	return nil
}

func testSlotReleasesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &SlotRelease{}
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	o := SlotReleaseRandom()

	AddSlotReleaseHook(boil.BeforeInsertHook, slotReleaseBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	slotReleaseBeforeInsertHooks = []SlotReleaseHook{}

	AddSlotReleaseHook(boil.AfterInsertHook, slotReleaseAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	slotReleaseAfterInsertHooks = []SlotReleaseHook{}

	AddSlotReleaseHook(boil.AfterSelectHook, slotReleaseAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	slotReleaseAfterSelectHooks = []SlotReleaseHook{}

	AddSlotReleaseHook(boil.BeforeUpdateHook, slotReleaseBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	slotReleaseBeforeUpdateHooks = []SlotReleaseHook{}

	AddSlotReleaseHook(boil.AfterUpdateHook, slotReleaseAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	slotReleaseAfterUpdateHooks = []SlotReleaseHook{}

	AddSlotReleaseHook(boil.BeforeDeleteHook, slotReleaseBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	slotReleaseBeforeDeleteHooks = []SlotReleaseHook{}

	AddSlotReleaseHook(boil.AfterDeleteHook, slotReleaseAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	slotReleaseAfterDeleteHooks = []SlotReleaseHook{}

	AddSlotReleaseHook(boil.BeforeUpsertHook, slotReleaseBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	slotReleaseBeforeUpsertHooks = []SlotReleaseHook{}

	AddSlotReleaseHook(boil.AfterUpsertHook, slotReleaseAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	slotReleaseAfterUpsertHooks = []SlotReleaseHook{}
}
func testSlotReleasesInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotRelease := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotRelease.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SlotReleases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSlotReleasesInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotRelease := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotRelease.Insert(tx, slotReleaseColumns...); err != nil {
		t.Error(err)
	}

	count, err := SlotReleases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSlotReleaseToOneContainerUsingContainer(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local SlotRelease
	var foreign Container

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, slotReleaseDBTypes, true, slotReleaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SlotRelease struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, containerDBTypes, true, containerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Container = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.ContainerByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SlotReleaseSlice{&local}
	if err = local.L.LoadContainer(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Container == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Container = nil
	if err = local.L.LoadContainer(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Container == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSlotReleaseToOneSetOpContainerUsingContainer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a SlotRelease
	var b, c Container

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, slotReleaseDBTypes, false, strmangle.SetComplement(slotReleasePrimaryKeyColumns, slotReleaseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, containerDBTypes, false, strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, containerDBTypes, false, strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Container{&b, &c} {
		err = a.SetContainer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Container != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SlotReleases[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Container != x.ID {
			t.Error("foreign key was wrong value", a.Container)
		}

		if exists, err := SlotReleaseExists(tx, a.Container, a.Segment); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testSlotReleasesReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotRelease := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotRelease.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = slotRelease.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSlotReleasesReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotRelease := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotRelease.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SlotReleaseSlice{slotRelease}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSlotReleasesSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotRelease := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotRelease.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SlotReleases(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	slotReleaseDBTypes = map[string]string{`Container`: `integer`, `Release`: `enum.release('PRIVATE','SHARED','EXCERPTS','PUBLIC')`, `Segment`: `USER-DEFINED`}
	_                  = bytes.MinRead
)

func testSlotReleasesUpdate(t *testing.T) {
	t.Parallel()

	if len(slotReleaseColumns) == len(slotReleasePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotRelease := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotRelease.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SlotReleases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	slotRelease = SlotReleaseRandom()

	if err = slotRelease.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSlotReleasesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(slotReleaseColumns) == len(slotReleasePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed

	slotRelease := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotRelease.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SlotReleases(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	slotRelease = SlotReleaseRandom()

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(slotReleaseColumns, slotReleasePrimaryKeyColumns) {
		fields = slotReleaseColumns
	} else {
		fields = strmangle.SetComplement(
			slotReleaseColumns,
			slotReleasePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(slotRelease))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SlotReleaseSlice{slotRelease}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSlotReleasesUpsert(t *testing.T) {
	t.Parallel()

	if len(slotReleaseColumns) == len(slotReleasePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	// this is a hack because if randomize isn't used compiler will complain
	// but if seed isn't then compiler will complain too
	_ = seed
	// Attempt the INSERT side of an UPSERT

	slotRelease := SlotReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = slotRelease.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert SlotRelease: %s", err)
	}

	count, err := SlotReleases(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT

	slotRelease = SlotReleaseRandom()

	if err = slotRelease.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert SlotRelease: %s", err)
	}

	count, err = SlotReleases(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
