// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testAssets(t *testing.T) {
	t.Parallel()

	query := Assets(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testAssetsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	asset := &Asset{}
	if err = randomize.Struct(seed, asset, assetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = asset.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = asset.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Assets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssetsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	asset := &Asset{}
	if err = randomize.Struct(seed, asset, assetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = asset.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Assets(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Assets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssetsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	asset := &Asset{}
	if err = randomize.Struct(seed, asset, assetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = asset.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AssetSlice{asset}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Assets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testAssetsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	asset := &Asset{}
	if err = randomize.Struct(seed, asset, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = asset.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := AssetExists(tx, asset.ID)
	if err != nil {
		t.Errorf("Unable to check if Asset exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AssetExistsG to return true, but got false.")
	}
}
func testAssetsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	asset := &Asset{}
	if err = randomize.Struct(seed, asset, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = asset.Insert(tx); err != nil {
		t.Error(err)
	}

	assetFound, err := FindAsset(tx, asset.ID)
	if err != nil {
		t.Error(err)
	}

	if assetFound == nil {
		t.Error("want a record, got nil")
	}
}
func testAssetsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	asset := &Asset{}
	if err = randomize.Struct(seed, asset, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = asset.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Assets(tx).Bind(asset); err != nil {
		t.Error(err)
	}
}

func testAssetsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	asset := &Asset{}
	if err = randomize.Struct(seed, asset, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = asset.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Assets(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAssetsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	assetOne := &Asset{}
	assetTwo := &Asset{}
	if err = randomize.Struct(seed, assetOne, assetDBTypes, false, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}
	if err = randomize.Struct(seed, assetTwo, assetDBTypes, false, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = assetOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = assetTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Assets(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAssetsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	assetOne := &Asset{}
	assetTwo := &Asset{}
	if err = randomize.Struct(seed, assetOne, assetDBTypes, false, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}
	if err = randomize.Struct(seed, assetTwo, assetDBTypes, false, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = assetOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = assetTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Assets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func assetBeforeInsertHook(e boil.Executor, o *Asset) error {
	*o = Asset{}
	return nil
}

func assetAfterInsertHook(e boil.Executor, o *Asset) error {
	*o = Asset{}
	return nil
}

func assetAfterSelectHook(e boil.Executor, o *Asset) error {
	*o = Asset{}
	return nil
}

func assetBeforeUpdateHook(e boil.Executor, o *Asset) error {
	*o = Asset{}
	return nil
}

func assetAfterUpdateHook(e boil.Executor, o *Asset) error {
	*o = Asset{}
	return nil
}

func assetBeforeDeleteHook(e boil.Executor, o *Asset) error {
	*o = Asset{}
	return nil
}

func assetAfterDeleteHook(e boil.Executor, o *Asset) error {
	*o = Asset{}
	return nil
}

func assetBeforeUpsertHook(e boil.Executor, o *Asset) error {
	*o = Asset{}
	return nil
}

func assetAfterUpsertHook(e boil.Executor, o *Asset) error {
	*o = Asset{}
	return nil
}

func testAssetsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Asset{}
	o := &Asset{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, assetDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Asset object: %s", err)
	}

	AddAssetHook(boil.BeforeInsertHook, assetBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	assetBeforeInsertHooks = []AssetHook{}

	AddAssetHook(boil.AfterInsertHook, assetAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	assetAfterInsertHooks = []AssetHook{}

	AddAssetHook(boil.AfterSelectHook, assetAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	assetAfterSelectHooks = []AssetHook{}

	AddAssetHook(boil.BeforeUpdateHook, assetBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	assetBeforeUpdateHooks = []AssetHook{}

	AddAssetHook(boil.AfterUpdateHook, assetAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	assetAfterUpdateHooks = []AssetHook{}

	AddAssetHook(boil.BeforeDeleteHook, assetBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	assetBeforeDeleteHooks = []AssetHook{}

	AddAssetHook(boil.AfterDeleteHook, assetAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	assetAfterDeleteHooks = []AssetHook{}

	AddAssetHook(boil.BeforeUpsertHook, assetBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	assetBeforeUpsertHooks = []AssetHook{}

	AddAssetHook(boil.AfterUpsertHook, assetAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	assetAfterUpsertHooks = []AssetHook{}
}
func testAssetsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	asset := &Asset{}
	if err = randomize.Struct(seed, asset, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = asset.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Assets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssetsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	asset := &Asset{}
	if err = randomize.Struct(seed, asset, assetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = asset.Insert(tx, assetColumns...); err != nil {
		t.Error(err)
	}

	count, err := Assets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssetOneToOneSlotAssetUsingSlotAsset(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var foreign SlotAsset
	var local Asset

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, slotAssetDBTypes, true, slotAssetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SlotAsset struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreign.Asset = local.ID
	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.SlotAssetByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.Asset != foreign.Asset {
		t.Errorf("want: %v, got %v", foreign.Asset, check.Asset)
	}

	slice := AssetSlice{&local}
	if err = local.L.LoadSlotAsset(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.SlotAsset == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SlotAsset = nil
	if err = local.L.LoadSlotAsset(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.SlotAsset == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAssetOneToOneAssetRevisionUsingAssetRevision(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var foreign AssetRevision
	var local Asset

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, assetRevisionDBTypes, true, assetRevisionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssetRevision struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreign.Asset = local.ID
	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.AssetRevisionByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.Asset != foreign.Asset {
		t.Errorf("want: %v, got %v", foreign.Asset, check.Asset)
	}

	slice := AssetSlice{&local}
	if err = local.L.LoadAssetRevision(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.AssetRevision == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AssetRevision = nil
	if err = local.L.LoadAssetRevision(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.AssetRevision == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAssetOneToOneTranscodeUsingTranscode(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var foreign Transcode
	var local Asset

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, transcodeDBTypes, true, transcodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Transcode struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreign.Asset = local.ID
	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.TranscodeByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.Asset != foreign.Asset {
		t.Errorf("want: %v, got %v", foreign.Asset, check.Asset)
	}

	slice := AssetSlice{&local}
	if err = local.L.LoadTranscode(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Transcode == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Transcode = nil
	if err = local.L.LoadTranscode(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Transcode == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAssetOneToOneSetOpSlotAssetUsingSlotAsset(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Asset
	var b, c SlotAsset

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, slotAssetDBTypes, false, strmangle.SetComplement(slotAssetPrimaryKeyColumns, slotAssetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, slotAssetDBTypes, false, strmangle.SetComplement(slotAssetPrimaryKeyColumns, slotAssetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SlotAsset{&b, &c} {
		err = a.SetSlotAsset(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SlotAsset != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Asset != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.Asset {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := SlotAssetExists(tx, x.Asset); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.Asset {
			t.Error("foreign key was wrong value", a.ID, x.Asset)
		}

		if err = x.Delete(tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testAssetOneToOneSetOpAssetRevisionUsingAssetRevision(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Asset
	var b, c AssetRevision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assetRevisionDBTypes, false, strmangle.SetComplement(assetRevisionPrimaryKeyColumns, assetRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assetRevisionDBTypes, false, strmangle.SetComplement(assetRevisionPrimaryKeyColumns, assetRevisionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AssetRevision{&b, &c} {
		err = a.SetAssetRevision(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AssetRevision != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Asset != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.Asset {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := AssetRevisionExists(tx, x.Asset); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.Asset {
			t.Error("foreign key was wrong value", a.ID, x.Asset)
		}

		if err = x.Delete(tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testAssetOneToOneSetOpTranscodeUsingTranscode(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Asset
	var b, c Transcode

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, transcodeDBTypes, false, strmangle.SetComplement(transcodePrimaryKeyColumns, transcodeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transcodeDBTypes, false, strmangle.SetComplement(transcodePrimaryKeyColumns, transcodeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Transcode{&b, &c} {
		err = a.SetTranscode(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Transcode != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Asset != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.Asset {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := TranscodeExists(tx, x.Asset); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.Asset {
			t.Error("foreign key was wrong value", a.ID, x.Asset)
		}

		if err = x.Delete(tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testAssetToManyOrigAssetRevisions(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Asset
	var b, c AssetRevision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, assetRevisionDBTypes, false, assetRevisionColumnsWithDefault...)
	randomize.Struct(seed, &c, assetRevisionDBTypes, false, assetRevisionColumnsWithDefault...)

	b.Orig = a.ID
	c.Orig = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	assetRevision, err := a.OrigAssetRevisionsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range assetRevision {
		if v.Orig == b.Orig {
			bFound = true
		}
		if v.Orig == c.Orig {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AssetSlice{&a}
	if err = a.L.LoadOrigAssetRevisions(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrigAssetRevisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrigAssetRevisions = nil
	if err = a.L.LoadOrigAssetRevisions(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrigAssetRevisions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", assetRevision)
	}
}

func testAssetToManyOrigTranscodes(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Asset
	var b, c Transcode

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, transcodeDBTypes, false, transcodeColumnsWithDefault...)
	randomize.Struct(seed, &c, transcodeDBTypes, false, transcodeColumnsWithDefault...)

	b.Orig = a.ID
	c.Orig = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	transcode, err := a.OrigTranscodesByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range transcode {
		if v.Orig == b.Orig {
			bFound = true
		}
		if v.Orig == c.Orig {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AssetSlice{&a}
	if err = a.L.LoadOrigTranscodes(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrigTranscodes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrigTranscodes = nil
	if err = a.L.LoadOrigTranscodes(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrigTranscodes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", transcode)
	}
}

func testAssetToManyAvatars(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Asset
	var b, c Avatar

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, avatarDBTypes, false, avatarColumnsWithDefault...)
	randomize.Struct(seed, &c, avatarDBTypes, false, avatarColumnsWithDefault...)

	b.Asset = a.ID
	c.Asset = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	avatar, err := a.AvatarsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range avatar {
		if v.Asset == b.Asset {
			bFound = true
		}
		if v.Asset == c.Asset {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AssetSlice{&a}
	if err = a.L.LoadAvatars(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Avatars); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Avatars = nil
	if err = a.L.LoadAvatars(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Avatars); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", avatar)
	}
}

func testAssetToManyNotifications(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Asset
	var b, c Notification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, notificationDBTypes, false, notificationColumnsWithDefault...)
	randomize.Struct(seed, &c, notificationDBTypes, false, notificationColumnsWithDefault...)

	b.Asset.Valid = true
	c.Asset.Valid = true
	b.Asset.Int = a.ID
	c.Asset.Int = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	notification, err := a.NotificationsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range notification {
		if v.Asset.Int == b.Asset.Int {
			bFound = true
		}
		if v.Asset.Int == c.Asset.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AssetSlice{&a}
	if err = a.L.LoadNotifications(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Notifications = nil
	if err = a.L.LoadNotifications(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", notification)
	}
}

func testAssetToManyAddOpOrigAssetRevisions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Asset
	var b, c, d, e AssetRevision

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssetRevision{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assetRevisionDBTypes, false, strmangle.SetComplement(assetRevisionPrimaryKeyColumns, assetRevisionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AssetRevision{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrigAssetRevisions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Orig {
			t.Error("foreign key was wrong value", a.ID, first.Orig)
		}
		if a.ID != second.Orig {
			t.Error("foreign key was wrong value", a.ID, second.Orig)
		}

		if first.R.Orig != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Orig != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrigAssetRevisions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrigAssetRevisions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrigAssetRevisionsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAssetToManyAddOpOrigTranscodes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Asset
	var b, c, d, e Transcode

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transcode{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transcodeDBTypes, false, strmangle.SetComplement(transcodePrimaryKeyColumns, transcodeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Transcode{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrigTranscodes(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Orig {
			t.Error("foreign key was wrong value", a.ID, first.Orig)
		}
		if a.ID != second.Orig {
			t.Error("foreign key was wrong value", a.ID, second.Orig)
		}

		if first.R.Orig != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Orig != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrigTranscodes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrigTranscodes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrigTranscodesByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAssetToManyAddOpAvatars(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Asset
	var b, c, d, e Avatar

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Avatar{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, avatarDBTypes, false, strmangle.SetComplement(avatarPrimaryKeyColumns, avatarColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Avatar{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAvatars(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Asset {
			t.Error("foreign key was wrong value", a.ID, first.Asset)
		}
		if a.ID != second.Asset {
			t.Error("foreign key was wrong value", a.ID, second.Asset)
		}

		if first.R.Asset != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Asset != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Avatars[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Avatars[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AvatarsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAssetToManyAddOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Asset
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Notification{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddNotifications(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Asset.Int {
			t.Error("foreign key was wrong value", a.ID, first.Asset.Int)
		}
		if a.ID != second.Asset.Int {
			t.Error("foreign key was wrong value", a.ID, second.Asset.Int)
		}

		if first.R.Asset != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Asset != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Notifications[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Notifications[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.NotificationsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAssetToManySetOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Asset
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetNotifications(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetNotifications(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Asset.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Asset.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.Asset.Int {
		t.Error("foreign key was wrong value", a.ID, d.Asset.Int)
	}
	if a.ID != e.Asset.Int {
		t.Error("foreign key was wrong value", a.ID, e.Asset.Int)
	}

	if b.R.Asset != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Asset != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Asset != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Asset != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Notifications[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Notifications[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAssetToManyRemoveOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Asset
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddNotifications(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveNotifications(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Asset.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Asset.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Asset != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Asset != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Asset != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Asset != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Notifications) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Notifications[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Notifications[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAssetToOneFormatUsingFormat(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Asset
	var foreign Format

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, formatDBTypes, true, formatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Format struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Format = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.FormatByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AssetSlice{&local}
	if err = local.L.LoadFormat(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Format == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Format = nil
	if err = local.L.LoadFormat(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Format == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAssetToOneVolumeUsingVolume(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Asset
	var foreign Volume

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, volumeDBTypes, true, volumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Volume = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.VolumeByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AssetSlice{&local}
	if err = local.L.LoadVolume(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Volume = nil
	if err = local.L.LoadVolume(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAssetToOneSetOpFormatUsingFormat(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Asset
	var b, c Format

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, formatDBTypes, false, strmangle.SetComplement(formatPrimaryKeyColumns, formatColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, formatDBTypes, false, strmangle.SetComplement(formatPrimaryKeyColumns, formatColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Format{&b, &c} {
		err = a.SetFormat(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Format != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Assets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Format != x.ID {
			t.Error("foreign key was wrong value", a.Format)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Format))
		reflect.Indirect(reflect.ValueOf(&a.Format)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Format != x.ID {
			t.Error("foreign key was wrong value", a.Format, x.ID)
		}
	}
}
func testAssetToOneSetOpVolumeUsingVolume(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Asset
	var b, c Volume

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assetDBTypes, false, strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, volumeDBTypes, false, strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, volumeDBTypes, false, strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Volume{&b, &c} {
		err = a.SetVolume(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Volume != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Assets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Volume != x.ID {
			t.Error("foreign key was wrong value", a.Volume)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Volume))
		reflect.Indirect(reflect.ValueOf(&a.Volume)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Volume != x.ID {
			t.Error("foreign key was wrong value", a.Volume, x.ID)
		}
	}
}
func testAssetsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	asset := &Asset{}
	if err = randomize.Struct(seed, asset, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = asset.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = asset.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAssetsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	asset := &Asset{}
	if err = randomize.Struct(seed, asset, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = asset.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AssetSlice{asset}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testAssetsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	asset := &Asset{}
	if err = randomize.Struct(seed, asset, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = asset.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Assets(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	assetDBTypes = map[string]string{`Duration`: `interval`, `Format`: `smallint`, `ID`: `integer`, `Name`: `text`, `Release`: `enum.release('PRIVATE','SHARED','EXCERPTS','PUBLIC')`, `Sha1`: `bytea`, `Size`: `bigint`, `Volume`: `integer`}
	_            = bytes.MinRead
)

func testAssetsUpdate(t *testing.T) {
	t.Parallel()

	if len(assetColumns) == len(assetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	asset := &Asset{}
	if err = randomize.Struct(seed, asset, assetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = asset.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Assets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, asset, assetDBTypes, true, assetColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	if err = asset.Update(tx); err != nil {
		t.Error(err)
	}
}

func testAssetsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(assetColumns) == len(assetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	asset := &Asset{}
	if err = randomize.Struct(seed, asset, assetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = asset.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Assets(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, asset, assetDBTypes, true, assetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(assetColumns, assetPrimaryKeyColumns) {
		fields = assetColumns
	} else {
		fields = strmangle.SetComplement(
			assetColumns,
			assetPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(asset))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := AssetSlice{asset}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testAssetsUpsert(t *testing.T) {
	t.Parallel()

	if len(assetColumns) == len(assetPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	asset := Asset{}
	if err = randomize.Struct(seed, &asset, assetDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = asset.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Asset: %s", err)
	}

	count, err := Assets(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &asset, assetDBTypes, false, assetPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}

	if err = asset.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Asset: %s", err)
	}

	count, err = Assets(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
