// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// Funder represents a row from '"public"."funder"'.
type Funder struct {
	FundrefID int64  `json:"fundref_id"` // fundref_id
	Name      string `json:"name"`       // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Funder exists in the database.
func (f *Funder) Exists() bool {
	return f._exists
}

// Deleted provides information if the Funder has been deleted from the database.
func (f *Funder) Deleted() bool {
	return f._deleted
}

// Insert inserts the Funder to the database.
func (f *Funder) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."funder" (` +
		`"fundref_id", "name"` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, f.FundrefID, f.Name)
	err = db.QueryRow(sqlstr, f.FundrefID, f.Name).Scan(&f.FundrefID)
	if err != nil {
		return err
	}

	// set existence
	f._exists = true

	return nil
}

// Update updates the Funder in the database.
func (f *Funder) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if f._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."funder" SET (` +
		`"name"` +
		`) = ( ` +
		`$1` +
		`) WHERE "fundref_id" = $2`

	// run query
	XOLog(sqlstr, f.Name, f.FundrefID)
	_, err = db.Exec(sqlstr, f.Name, f.FundrefID)
	return err
}

// Save saves the Funder to the database.
func (f *Funder) Save(db XODB) error {
	if f.Exists() {
		return f.Update(db)
	}

	return f.Insert(db)
}

// Upsert performs an upsert for Funder.
//
// NOTE: PostgreSQL 9.5+ only
func (f *Funder) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."funder" (` +
		`"fundref_id", "name"` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT ("fundref_id") DO UPDATE SET (` +
		`"fundref_id", "name"` +
		`) = (` +
		`EXCLUDED."fundref_id", EXCLUDED."name"` +
		`)`

	// run query
	XOLog(sqlstr, f.FundrefID, f.Name)
	_, err = db.Exec(sqlstr, f.FundrefID, f.Name)
	if err != nil {
		return err
	}

	// set existence
	f._exists = true

	return nil
}

// Delete deletes the Funder from the database.
func (f *Funder) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return nil
	}

	// if deleted, bail
	if f._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."funder" WHERE "fundref_id" = $1`

	// run query
	XOLog(sqlstr, f.FundrefID)
	_, err = db.Exec(sqlstr, f.FundrefID)
	if err != nil {
		return err
	}

	// set deleted
	f._deleted = true

	return nil
}

// FunderByFundrefID retrieves a row from '"public"."funder"' as a Funder.
//
// Generated from index 'funder_pkey'.
func FunderByFundrefID(db XODB, fundrefID int64) (*Funder, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"fundref_id", "name" ` +
		`FROM "public"."funder" ` +
		`WHERE "fundref_id" = $1`

	// run query
	XOLog(sqlstr, fundrefID)
	f := Funder{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, fundrefID).Scan(&f.FundrefID, &f.Name)
	if err != nil {
		return nil, err
	}

	return &f, nil
}
