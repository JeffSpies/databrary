// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Category represents a row from '"public"."category"'.
type Category struct {
	ID          int16          `json:"id"`          // id
	Name        string         `json:"name"`        // name
	Description sql.NullString `json:"description"` // description

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Category exists in the database.
func (c *Category) Exists() bool {
	return c._exists
}

// Deleted provides information if the Category has been deleted from the database.
func (c *Category) Deleted() bool {
	return c._deleted
}

// Insert inserts the Category to the database.
func (c *Category) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO "public"."category" (` +
		`"name", "description"` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING "id"`

	// run query
	XOLog(sqlstr, c.Name, c.Description)
	err = db.QueryRow(sqlstr, c.Name, c.Description).Scan(&c.ID)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Category in the database.
func (c *Category) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."category" SET (` +
		`"name", "description"` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE "id" = $3`

	// run query
	XOLog(sqlstr, c.Name, c.Description, c.ID)
	_, err = db.Exec(sqlstr, c.Name, c.Description, c.ID)
	return err
}

// Save saves the Category to the database.
func (c *Category) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Category.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Category) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."category" (` +
		`"id", "name", "description"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"id", "name", "description"` +
		`) = (` +
		`EXCLUDED."id", EXCLUDED."name", EXCLUDED."description"` +
		`)`

	// run query
	XOLog(sqlstr, c.ID, c.Name, c.Description)
	_, err = db.Exec(sqlstr, c.ID, c.Name, c.Description)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Category from the database.
func (c *Category) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."category" WHERE "id" = $1`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = db.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CategoryByName retrieves a row from '"public"."category"' as a Category.
//
// Generated from index 'category_name_key'.
func CategoryByName(db XODB, name string) (*Category, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "name", "description" ` +
		`FROM "public"."category" ` +
		`WHERE "name" = $1`

	// run query
	XOLog(sqlstr, name)
	c := Category{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&c.ID, &c.Name, &c.Description)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// CategoryByID retrieves a row from '"public"."category"' as a Category.
//
// Generated from index 'category_pkey'.
func CategoryByID(db XODB, id int16) (*Category, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "name", "description" ` +
		`FROM "public"."category" ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	c := Category{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&c.ID, &c.Name, &c.Description)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
