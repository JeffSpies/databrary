// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"

	"github.com/databrary/databrary/db/models/custom_types"
)

// KeywordUse represents a row from '"public"."keyword_use"'.
type KeywordUse struct {
	Container int64                `json:"container"` // container
	Segment   custom_types.Segment `json:"segment"`   // segment
	Tag       int64                `json:"tag"`       // tag
	Who       int64                `json:"who"`       // who

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the KeywordUse exists in the database.
func (ku *KeywordUse) Exists() bool {
	return ku._exists
}

// Deleted provides information if the KeywordUse has been deleted from the database.
func (ku *KeywordUse) Deleted() bool {
	return ku._deleted
}

// Insert inserts the KeywordUse to the database.
func (ku *KeywordUse) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ku._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."keyword_use" (` +
		`"container", "segment", "tag", "who"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, ku.Container, ku.Segment, ku.Tag, ku.Who)
	err = db.QueryRow(sqlstr, ku.Container, ku.Segment, ku.Tag, ku.Who).Scan(&ku.Tag)
	if err != nil {
		return err
	}

	// set existence
	ku._exists = true

	return nil
}

// Update updates the KeywordUse in the database.
func (ku *KeywordUse) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ku._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ku._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."keyword_use" SET (` +
		`"container", "segment", "who"` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE "tag" = $4`

	// run query
	XOLog(sqlstr, ku.Container, ku.Segment, ku.Who, ku.Tag)
	_, err = db.Exec(sqlstr, ku.Container, ku.Segment, ku.Who, ku.Tag)
	return err
}

// Save saves the KeywordUse to the database.
func (ku *KeywordUse) Save(db XODB) error {
	if ku.Exists() {
		return ku.Update(db)
	}

	return ku.Insert(db)
}

// Upsert performs an upsert for KeywordUse.
//
// NOTE: PostgreSQL 9.5+ only
func (ku *KeywordUse) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ku._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."keyword_use" (` +
		`"container", "segment", "tag", "who"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT ("tag") DO UPDATE SET (` +
		`"container", "segment", "tag", "who"` +
		`) = (` +
		`EXCLUDED."container", EXCLUDED."segment", EXCLUDED."tag", EXCLUDED."who"` +
		`)`

	// run query
	XOLog(sqlstr, ku.Container, ku.Segment, ku.Tag, ku.Who)
	_, err = db.Exec(sqlstr, ku.Container, ku.Segment, ku.Tag, ku.Who)
	if err != nil {
		return err
	}

	// set existence
	ku._exists = true

	return nil
}

// Delete deletes the KeywordUse from the database.
func (ku *KeywordUse) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ku._exists {
		return nil
	}

	// if deleted, bail
	if ku._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."keyword_use" WHERE "tag" = $1`

	// run query
	XOLog(sqlstr, ku.Tag)
	_, err = db.Exec(sqlstr, ku.Tag)
	if err != nil {
		return err
	}

	// set deleted
	ku._deleted = true

	return nil
}

// KeywordUseByTagContainerSegment retrieves a row from '"public"."keyword_use"' as a KeywordUse.
//
// Generated from index 'keyword_use_pkey'.
func KeywordUseByTagContainerSegment(db XODB, tag int64, container int64, segment custom_types.Segment) (*KeywordUse, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"container", "segment", "tag", "who" ` +
		`FROM "public"."keyword_use" ` +
		`WHERE "tag" = $1 AND "container" = $2 AND "segment" = $3`

	// run query
	XOLog(sqlstr, tag, container, segment)
	ku := KeywordUse{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, tag, container, segment).Scan(&ku.Container, &ku.Segment, &ku.Tag, &ku.Who)
	if err != nil {
		return nil, err
	}

	return &ku, nil
}

// KeywordUsesBySlot retrieves a row from '"public"."keyword_use"' as a KeywordUse.
//
// Generated from index 'keyword_use_slot_idx'.
func KeywordUsesBySlot(db XODB, container int64, segment custom_types.Segment) ([]*KeywordUse, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"container", "segment", "tag", "who" ` +
		`FROM "public"."keyword_use" ` +
		`WHERE "container" = $1 AND "segment" = $2`

	// run query
	XOLog(sqlstr, container, segment)
	q, err := db.Query(sqlstr, container, segment)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*KeywordUse{}
	for q.Next() {
		ku := KeywordUse{
			_exists: true,
		}

		// scan
		err = q.Scan(&ku.Container, &ku.Segment, &ku.Tag, &ku.Who)
		if err != nil {
			return nil, err
		}

		res = append(res, &ku)
	}

	return res, nil
}
