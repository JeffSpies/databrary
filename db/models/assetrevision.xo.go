// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// AssetRevision represents a row from '"public"."asset_revision"'.
type AssetRevision struct {
	Orig  int64 `json:"orig"`  // orig
	Asset int64 `json:"asset"` // asset

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AssetRevision exists in the database.
func (ar *AssetRevision) Exists() bool {
	return ar._exists
}

// Deleted provides information if the AssetRevision has been deleted from the database.
func (ar *AssetRevision) Deleted() bool {
	return ar._deleted
}

// Insert inserts the AssetRevision to the database.
func (ar *AssetRevision) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ar._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."asset_revision" (` +
		`"orig", "asset"` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, ar.Orig, ar.Asset)
	err = db.QueryRow(sqlstr, ar.Orig, ar.Asset).Scan(&ar.Asset)
	if err != nil {
		return err
	}

	// set existence
	ar._exists = true

	return nil
}

// Update updates the AssetRevision in the database.
func (ar *AssetRevision) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ar._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ar._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."asset_revision" SET (` +
		`"orig"` +
		`) = ( ` +
		`$1` +
		`) WHERE "asset" = $2`

	// run query
	XOLog(sqlstr, ar.Orig, ar.Asset)
	_, err = db.Exec(sqlstr, ar.Orig, ar.Asset)
	return err
}

// Save saves the AssetRevision to the database.
func (ar *AssetRevision) Save(db XODB) error {
	if ar.Exists() {
		return ar.Update(db)
	}

	return ar.Insert(db)
}

// Upsert performs an upsert for AssetRevision.
//
// NOTE: PostgreSQL 9.5+ only
func (ar *AssetRevision) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ar._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."asset_revision" (` +
		`"orig", "asset"` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT ("asset") DO UPDATE SET (` +
		`"orig", "asset"` +
		`) = (` +
		`EXCLUDED."orig", EXCLUDED."asset"` +
		`)`

	// run query
	XOLog(sqlstr, ar.Orig, ar.Asset)
	_, err = db.Exec(sqlstr, ar.Orig, ar.Asset)
	if err != nil {
		return err
	}

	// set existence
	ar._exists = true

	return nil
}

// Delete deletes the AssetRevision from the database.
func (ar *AssetRevision) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ar._exists {
		return nil
	}

	// if deleted, bail
	if ar._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."asset_revision" WHERE "asset" = $1`

	// run query
	XOLog(sqlstr, ar.Asset)
	_, err = db.Exec(sqlstr, ar.Asset)
	if err != nil {
		return err
	}

	// set deleted
	ar._deleted = true

	return nil
}

// AssetByAsset returns the Asset associated with the AssetRevision's Asset (asset).
//
// Generated from foreign key 'asset_revision_asset_fkey'.
func (ar *AssetRevision) AssetByAsset(db XODB) (*Asset, error) {
	return AssetByID(db, ar.Asset)
}

// AssetByOrig returns the Asset associated with the AssetRevision's Orig (orig).
//
// Generated from foreign key 'asset_revision_orig_fkey'.
func (ar *AssetRevision) AssetByOrig(db XODB) (*Asset, error) {
	return AssetByID(db, ar.Orig)
}

// AssetRevisionByAsset retrieves a row from '"public"."asset_revision"' as a AssetRevision.
//
// Generated from index 'asset_revision_pkey'.
func AssetRevisionByAsset(db XODB, asset int64) (*AssetRevision, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"orig", "asset" ` +
		`FROM "public"."asset_revision" ` +
		`WHERE "asset" = $1`

	// run query
	XOLog(sqlstr, asset)
	ar := AssetRevision{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, asset).Scan(&ar.Orig, &ar.Asset)
	if err != nil {
		return nil, err
	}

	return &ar, nil
}
