// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"

	"github.com/databrary/databrary/db/models/custom_types"
)

// SlotRecord represents a row from '"public"."slot_record"'.
type SlotRecord struct {
	Container int64                `json:"container"` // container
	Segment   custom_types.Segment `json:"segment"`   // segment
	Record    int64                `json:"record"`    // record

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SlotRecord exists in the database.
func (sr *SlotRecord) Exists() bool {
	return sr._exists
}

// Deleted provides information if the SlotRecord has been deleted from the database.
func (sr *SlotRecord) Deleted() bool {
	return sr._deleted
}

// Insert inserts the SlotRecord to the database.
func (sr *SlotRecord) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if sr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."slot_record" (` +
		`"container", "segment", "record"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, sr.Container, sr.Segment, sr.Record)
	err = db.QueryRow(sqlstr, sr.Container, sr.Segment, sr.Record).Scan(&sr.Record)
	if err != nil {
		return err
	}

	// set existence
	sr._exists = true

	return nil
}

// Update updates the SlotRecord in the database.
func (sr *SlotRecord) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if sr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."slot_record" SET (` +
		`"container", "segment"` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE "record" = $3`

	// run query
	XOLog(sqlstr, sr.Container, sr.Segment, sr.Record)
	_, err = db.Exec(sqlstr, sr.Container, sr.Segment, sr.Record)
	return err
}

// Save saves the SlotRecord to the database.
func (sr *SlotRecord) Save(db XODB) error {
	if sr.Exists() {
		return sr.Update(db)
	}

	return sr.Insert(db)
}

// Upsert performs an upsert for SlotRecord.
//
// NOTE: PostgreSQL 9.5+ only
func (sr *SlotRecord) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if sr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."slot_record" (` +
		`"container", "segment", "record"` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT ("record") DO UPDATE SET (` +
		`"container", "segment", "record"` +
		`) = (` +
		`EXCLUDED."container", EXCLUDED."segment", EXCLUDED."record"` +
		`)`

	// run query
	XOLog(sqlstr, sr.Container, sr.Segment, sr.Record)
	_, err = db.Exec(sqlstr, sr.Container, sr.Segment, sr.Record)
	if err != nil {
		return err
	}

	// set existence
	sr._exists = true

	return nil
}

// Delete deletes the SlotRecord from the database.
func (sr *SlotRecord) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !sr._exists {
		return nil
	}

	// if deleted, bail
	if sr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."slot_record" WHERE "record" = $1`

	// run query
	XOLog(sqlstr, sr.Record)
	_, err = db.Exec(sqlstr, sr.Record)
	if err != nil {
		return err
	}

	// set deleted
	sr._deleted = true

	return nil
}

// Container returns the Container associated with the SlotRecord's Container (container).
//
// Generated from foreign key 'slot_record_container_fkey'.
func (sr *SlotRecord) ContainerByContainerID(db XODB) (*Container, error) {
	return ContainerByID(db, sr.Container)
}

// Record returns the Record associated with the SlotRecord's Record (record).
//
// Generated from foreign key 'slot_record_record_fkey'.
func (sr *SlotRecord) RecordByRecordID(db XODB) (*Record, error) {
	return RecordByID(db, sr.Record)
}

// SlotRecordByRecordContainerSegment retrieves a row from '"public"."slot_record"' as a SlotRecord.
//
// Generated from index 'slot_record_pkey'.
func SlotRecordByRecordContainerSegment(db XODB, record int64, container int64, segment custom_types.Segment) (*SlotRecord, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"container", "segment", "record" ` +
		`FROM "public"."slot_record" ` +
		`WHERE "record" = $1 AND "container" = $2 AND "segment" = $3`

	// run query
	XOLog(sqlstr, record, container, segment)
	sr := SlotRecord{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, record, container, segment).Scan(&sr.Container, &sr.Segment, &sr.Record)
	if err != nil {
		return nil, err
	}

	return &sr, nil
}

// SlotRecordsBySlot retrieves a row from '"public"."slot_record"' as a SlotRecord.
//
// Generated from index 'slot_record_slot_idx'.
func SlotRecordsBySlot(db XODB, container int64, segment custom_types.Segment) ([]*SlotRecord, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"container", "segment", "record" ` +
		`FROM "public"."slot_record" ` +
		`WHERE "container" = $1 AND "segment" = $2`

	// run query
	XOLog(sqlstr, container, segment)
	q, err := db.Query(sqlstr, container, segment)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*SlotRecord{}
	for q.Next() {
		sr := SlotRecord{
			_exists: true,
		}

		// scan
		err = q.Scan(&sr.Container, &sr.Segment, &sr.Record)
		if err != nil {
			return nil, err
		}

		res = append(res, &sr)
	}

	return res, nil
}
