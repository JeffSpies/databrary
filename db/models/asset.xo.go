// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"github.com/databrary/databrary/db/models/custom_types"
)

// Asset represents a row from '"public"."asset"'.
type Asset struct {
	ID       int64                             `json:"id"`       // id
	Volume   int64                             `json:"volume"`   // volume
	Format   int16                             `json:"format"`   // format
	Release  Release                           `json:"release"`  // release
	Duration custom_types.IntervalHourToSecond `json:"duration"` // duration
	Name     sql.NullString                    `json:"name"`     // name
	Sha1     []byte                            `json:"sha1"`     // sha1
	Size     sql.NullInt64                     `json:"size"`     // size

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Asset exists in the database.
func (a *Asset) Exists() bool {
	return a._exists
}

// Deleted provides information if the Asset has been deleted from the database.
func (a *Asset) Deleted() bool {
	return a._deleted
}

// Insert inserts the Asset to the database.
func (a *Asset) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO "public"."asset" (` +
		`"volume", "format", "release", "duration", "name", "sha1", "size"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING "id"`

	// run query
	XOLog(sqlstr, a.Volume, a.Format, a.Release, a.Duration, a.Name, a.Sha1, a.Size)
	err = db.QueryRow(sqlstr, a.Volume, a.Format, a.Release, a.Duration, a.Name, a.Sha1, a.Size).Scan(&a.ID)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Asset in the database.
func (a *Asset) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."asset" SET (` +
		`"volume", "format", "release", "duration", "name", "sha1", "size"` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE "id" = $8`

	// run query
	XOLog(sqlstr, a.Volume, a.Format, a.Release, a.Duration, a.Name, a.Sha1, a.Size, a.ID)
	_, err = db.Exec(sqlstr, a.Volume, a.Format, a.Release, a.Duration, a.Name, a.Sha1, a.Size, a.ID)
	return err
}

// Save saves the Asset to the database.
func (a *Asset) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Asset.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Asset) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."asset" (` +
		`"id", "volume", "format", "release", "duration", "name", "sha1", "size"` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"id", "volume", "format", "release", "duration", "name", "sha1", "size"` +
		`) = (` +
		`EXCLUDED."id", EXCLUDED."volume", EXCLUDED."format", EXCLUDED."release", EXCLUDED."duration", EXCLUDED."name", EXCLUDED."sha1", EXCLUDED."size"` +
		`)`

	// run query
	XOLog(sqlstr, a.ID, a.Volume, a.Format, a.Release, a.Duration, a.Name, a.Sha1, a.Size)
	_, err = db.Exec(sqlstr, a.ID, a.Volume, a.Format, a.Release, a.Duration, a.Name, a.Sha1, a.Size)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Asset from the database.
func (a *Asset) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."asset" WHERE "id" = $1`

	// run query
	XOLog(sqlstr, a.ID)
	_, err = db.Exec(sqlstr, a.ID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// Format returns the Format associated with the Asset's Format (format).
//
// Generated from foreign key 'asset_format_fkey'.
func (a *Asset) FormatByFormatID(db XODB) (*Format, error) {
	return FormatByID(db, a.Format)
}

// Volume returns the Volume associated with the Asset's Volume (volume).
//
// Generated from foreign key 'asset_volume_fkey'.
func (a *Asset) VolumeByFormatID(db XODB) (*Volume, error) {
	return VolumeByID(db, a.Volume)
}

// AssetByID retrieves a row from '"public"."asset"' as a Asset.
//
// Generated from index 'asset_pkey'.
func AssetByID(db XODB, id int64) (*Asset, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "volume", "format", "release", "duration", "name", "sha1", "size" ` +
		`FROM "public"."asset" ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	a := Asset{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&a.ID, &a.Volume, &a.Format, &a.Release, &a.Duration, &a.Name, &a.Sha1, &a.Size)
	if err != nil {
		return nil, err
	}

	return &a, nil
}

// AssetsBySha1 retrieves a row from '"public"."asset"' as a Asset.
//
// Generated from index 'asset_sha1_idx'.
func AssetsBySha1(db XODB, sha1 []byte) ([]*Asset, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "volume", "format", "release", "duration", "name", "sha1", "size" ` +
		`FROM "public"."asset" ` +
		`WHERE "sha1" = $1`

	// run query
	XOLog(sqlstr, sha1)
	q, err := db.Query(sqlstr, sha1)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Asset{}
	for q.Next() {
		a := Asset{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ID, &a.Volume, &a.Format, &a.Release, &a.Duration, &a.Name, &a.Sha1, &a.Size)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}
