// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// Permission is the 'permission' enum type from schema 'public'.
type Permission uint16

const (
	// PermissionNone is the 'NONE' Permission.
	PermissionNone = Permission(1)

	// PermissionPublic is the 'PUBLIC' Permission.
	PermissionPublic = Permission(2)

	// PermissionShared is the 'SHARED' Permission.
	PermissionShared = Permission(3)

	// PermissionRead is the 'READ' Permission.
	PermissionRead = Permission(4)

	// PermissionEdit is the 'EDIT' Permission.
	PermissionEdit = Permission(5)

	// PermissionAdmin is the 'ADMIN' Permission.
	PermissionAdmin = Permission(6)
)

// String returns the string value of the Permission.
func (p Permission) String() string {
	var enumVal string

	switch p {
	case PermissionNone:
		enumVal = "NONE"

	case PermissionPublic:
		enumVal = "PUBLIC"

	case PermissionShared:
		enumVal = "SHARED"

	case PermissionRead:
		enumVal = "READ"

	case PermissionEdit:
		enumVal = "EDIT"

	case PermissionAdmin:
		enumVal = "ADMIN"
	}

	return enumVal
}

// MarshalText marshals Permission into text.
func (p Permission) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

// UnmarshalText unmarshals Permission from text.
func (p *Permission) UnmarshalText(text []byte) error {
	switch string(text) {
	case "NONE":
		*p = PermissionNone

	case "PUBLIC":
		*p = PermissionPublic

	case "SHARED":
		*p = PermissionShared

	case "READ":
		*p = PermissionRead

	case "EDIT":
		*p = PermissionEdit

	case "ADMIN":
		*p = PermissionAdmin

	default:
		return errors.New("invalid Permission")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Permission.
func (p Permission) Value() (driver.Value, error) {
	return p.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Permission.
func (p *Permission) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Permission")
	}

	return p.UnmarshalText(buf)
}
