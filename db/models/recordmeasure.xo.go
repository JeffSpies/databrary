// Package xo_models contains the types for schema 'public'.
package xo_models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// RecordMeasure represents a row from '"public"."record_measures"'.
type RecordMeasure struct {
	ID       int64       `json:"id"`       // id
	Volume   int64       `json:"volume"`   // volume
	Category int16       `json:"category"` // category
	Measures StringSlice `json:"measures"` // measures

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RecordMeasure exists in the database.
func (rm *RecordMeasure) Exists() bool {
	return rm._exists
}

// Deleted provides information if the RecordMeasure has been deleted from the database.
func (rm *RecordMeasure) Deleted() bool {
	return rm._deleted
}

// Insert inserts the RecordMeasure to the database.
func (rm *RecordMeasure) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if rm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO "public"."record_measures" (` +
		`"id", "volume", "category", "measures"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, rm.ID, rm.Volume, rm.Category, rm.Measures)
	err = db.QueryRow(sqlstr, rm.ID, rm.Volume, rm.Category, rm.Measures).Scan(&rm.ID)
	if err != nil {
		return err
	}

	// set existence
	rm._exists = true

	return nil
}

// Update updates the RecordMeasure in the database.
func (rm *RecordMeasure) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if rm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE "public"."record_measures" SET (` +
		`"volume", "category", "measures"` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE "id" = $4`

	// run query
	XOLog(sqlstr, rm.Volume, rm.Category, rm.Measures, rm.ID)
	_, err = db.Exec(sqlstr, rm.Volume, rm.Category, rm.Measures, rm.ID)
	return err
}

// Save saves the RecordMeasure to the database.
func (rm *RecordMeasure) Save(db XODB) error {
	if rm.Exists() {
		return rm.Update(db)
	}

	return rm.Insert(db)
}

// Upsert performs an upsert for RecordMeasure.
//
// NOTE: PostgreSQL 9.5+ only
func (rm *RecordMeasure) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if rm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO "public"."record_measures" (` +
		`"id", "volume", "category", "measures"` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT ("id") DO UPDATE SET (` +
		`"id", "volume", "category", "measures"` +
		`) = (` +
		`EXCLUDED."id", EXCLUDED."volume", EXCLUDED."category", EXCLUDED."measures"` +
		`)`

	// run query
	XOLog(sqlstr, rm.ID, rm.Volume, rm.Category, rm.Measures)
	_, err = db.Exec(sqlstr, rm.ID, rm.Volume, rm.Category, rm.Measures)
	if err != nil {
		return err
	}

	// set existence
	rm._exists = true

	return nil
}

// Delete deletes the RecordMeasure from the database.
func (rm *RecordMeasure) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rm._exists {
		return nil
	}

	// if deleted, bail
	if rm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM "public"."record_measures" WHERE "id" = $1`

	// run query
	XOLog(sqlstr, rm.ID)
	_, err = db.Exec(sqlstr, rm.ID)
	if err != nil {
		return err
	}

	// set deleted
	rm._deleted = true

	return nil
}

// Record returns the Record associated with the RecordMeasure's ID (id).
//
// Generated from foreign key 'record_measures_id_fkey'.
func (rm *RecordMeasure) Record(db XODB) (*Record, error) {
	return RecordByID(db, rm.ID)
}

// RecordMeasureByID retrieves a row from '"public"."record_measures"' as a RecordMeasure.
//
// Generated from index 'record_measures_pkey'.
func RecordMeasureByID(db XODB, id int64) (*RecordMeasure, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "volume", "category", "measures" ` +
		`FROM "public"."record_measures" ` +
		`WHERE "id" = $1`

	// run query
	XOLog(sqlstr, id)
	rm := RecordMeasure{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&rm.ID, &rm.Volume, &rm.Category, &rm.Measures)
	if err != nil {
		return nil, err
	}

	return &rm, nil
}

// RecordMeasuresByVolume retrieves a row from '"public"."record_measures"' as a RecordMeasure.
//
// Generated from index 'record_measures_volume_idx'.
func RecordMeasuresByVolume(db XODB, volume int64) ([]*RecordMeasure, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`"id", "volume", "category", "measures" ` +
		`FROM "public"."record_measures" ` +
		`WHERE "volume" = $1`

	// run query
	XOLog(sqlstr, volume)
	q, err := db.Query(sqlstr, volume)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RecordMeasure{}
	for q.Next() {
		rm := RecordMeasure{
			_exists: true,
		}

		// scan
		err = q.Scan(&rm.ID, &rm.Volume, &rm.Category, &rm.Measures)
		if err != nil {
			return nil, err
		}

		res = append(res, &rm)
	}

	return res, nil
}
